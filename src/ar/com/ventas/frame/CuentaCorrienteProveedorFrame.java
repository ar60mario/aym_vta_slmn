/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ComprobanteCompras;
import ar.com.ventas.entities.CuentaCorrienteProveedor;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.entities.RcCo;
import ar.com.ventas.entities.ReciboProveedor;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ComprobanteComprasService;
import ar.com.ventas.services.CuentaCorrienteProveedorService;
import ar.com.ventas.services.ProveedorService;
import ar.com.ventas.services.RcCoService;
import ar.com.ventas.services.ReciboProveedorService;
import java.awt.Rectangle;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class CuentaCorrienteProveedorFrame extends javax.swing.JFrame {

    private List<Proveedor> proveedores;
    private List<CuentaCorrienteProveedor> ctaCteP = null;
    private Proveedor proveedor;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df1 = new DecimalFormat("#0");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private Date fecha = new Date();
    private Integer menu;

    /**
     * Creates new form CuentaCorrienteProveedorFrame
     */
    public CuentaCorrienteProveedorFrame(Proveedor pro, Integer menu) {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        setExtendedState(6); // this.MAXIMIZED_BOTH
        initComponents();
        this.menu = menu;
        limpiarCampos();
        this.proveedor = pro;
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DATE, -60);
        String f = sdf.format(calendar.getTime());
        desdeTxt.setText("01" + f.substring(2, 10));
        hastaTxt.setText(sdf.format(new Date()));
        if (proveedor != null) {
            codigoTxt.setText(String.valueOf(proveedor.getCodigo()));
            filtroTxt.setText(proveedor.getRazonSocial());
            saldoTxt.setText(df.format(proveedor.getSaldo()));
            if (proveedor.getSaldo() > 0.0) {
                pagarAntiguedadBtn.setEnabled(true);
                pagarCpbteBtn.setEnabled(true);
                pagarCpbteBtn.setEnabled(true);
            }
            composicionPagoBtn.setEnabled(true);
            anticipoBtn.setEnabled(true);
            llenarTabla();
            hastaTxt.requestFocus();
        } else {
            codigoTxt.requestFocus();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        codigoTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        filtroTxt = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        comboProveedores = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCtaCte = new javax.swing.JTable();
        pagarAntiguedadBtn = new javax.swing.JButton();
        pagarCpbteBtn = new javax.swing.JButton();
        anticipoBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        desdeTxt = new javax.swing.JTextField();
        hastaTxt = new javax.swing.JTextField();
        composicionPagoBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        saldoTxt = new javax.swing.JTextField();
        aplicarCreditosBtn = new javax.swing.JButton();
        desaplicarBtn = new javax.swing.JButton();
        eliminarBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Cuenta Corriente Proveedores");

        jLabel1.setText("Código:");

        codigoTxt.setText("COD");
        codigoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Nombre a Buscar:");

        filtroTxt.setText("NOMBRE");
        filtroTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filtroTxtKeyPressed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        comboProveedores.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboProveedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboProveedoresActionPerformed(evt);
            }
        });
        comboProveedores.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboProveedoresKeyPressed(evt);
            }
        });

        tablaCtaCte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Fecha Entrega", "Tipo", "Comprobante", "Proveedor", "Debe", "Haber", "Saldo", "FECH.VTO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaCtaCte);
        if (tablaCtaCte.getColumnModel().getColumnCount() > 0) {
            tablaCtaCte.getColumnModel().getColumn(0).setPreferredWidth(40);
            tablaCtaCte.getColumnModel().getColumn(1).setPreferredWidth(40);
            tablaCtaCte.getColumnModel().getColumn(2).setPreferredWidth(25);
            tablaCtaCte.getColumnModel().getColumn(3).setPreferredWidth(70);
            tablaCtaCte.getColumnModel().getColumn(4).setPreferredWidth(200);
            tablaCtaCte.getColumnModel().getColumn(8).setPreferredWidth(50);
        }

        pagarAntiguedadBtn.setText("Pagar x Antiguedad");
        pagarAntiguedadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagarAntiguedadBtnActionPerformed(evt);
            }
        });

        pagarCpbteBtn.setText("Pagar x Cpbte");
        pagarCpbteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagarCpbteBtnActionPerformed(evt);
            }
        });

        anticipoBtn.setText("Anticipo");
        anticipoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anticipoBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Desde:");

        jLabel4.setText("Hasta:");

        desdeTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        desdeTxt.setText("FECHA1");
        desdeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                desdeTxtKeyPressed(evt);
            }
        });

        hastaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hastaTxt.setText("FECHA2");
        hastaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hastaTxtKeyPressed(evt);
            }
        });

        composicionPagoBtn.setText("Composición Pago");
        composicionPagoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                composicionPagoBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("Saldo:");

        saldoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        saldoTxt.setText("SALDO");

        aplicarCreditosBtn.setText("Aplicar Créditos");
        aplicarCreditosBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarCreditosBtnActionPerformed(evt);
            }
        });

        desaplicarBtn.setText("Desaplicar Pago");
        desaplicarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desaplicarBtnActionPerformed(evt);
            }
        });

        eliminarBtn.setText("Elim. Pago");
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 949, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pagarAntiguedadBtn)
                        .addGap(18, 18, 18)
                        .addComponent(pagarCpbteBtn)
                        .addGap(18, 18, 18)
                        .addComponent(anticipoBtn)
                        .addGap(18, 18, 18)
                        .addComponent(composicionPagoBtn)
                        .addGap(18, 18, 18)
                        .addComponent(aplicarCreditosBtn)
                        .addGap(18, 18, 18)
                        .addComponent(desaplicarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(desdeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hastaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(92, 92, 92)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(saldoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filtroTxt)
                                .addGap(18, 18, 18)
                                .addComponent(buscarBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboProveedores, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarBtn)
                    .addComponent(comboProveedores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(desdeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hastaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(saldoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pagarAntiguedadBtn)
                    .addComponent(pagarCpbteBtn)
                    .addComponent(anticipoBtn)
                    .addComponent(volverBtn)
                    .addComponent(composicionPagoBtn)
                    .addComponent(aplicarCreditosBtn)
                    .addComponent(desaplicarBtn)
                    .addComponent(eliminarBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pagarAntiguedadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagarAntiguedadBtnActionPerformed
        if (codigoTxt.getText().isEmpty()) {
            return;
        }
        String s = df.format(proveedor.getSaldo());
        Double sa = Double.valueOf(s.replace(",", "."));
        if (sa < 0.01) {
            JOptionPane.showMessageDialog(this, "debe generar un ANTICIPO");
        } else {
            pagarAntiguedad();
        }
    }//GEN-LAST:event_pagarAntiguedadBtnActionPerformed

    private void pagarCpbteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagarCpbteBtnActionPerformed
        if (codigoTxt.getText().isEmpty()) {
            return;
        }
        String s = df.format(proveedor.getSaldo());
        Double sa = Double.valueOf(s.replace(",", "."));
        if (sa < 0.01) {
            JOptionPane.showMessageDialog(this, "debe generar un ANTICIPO");
        } else {
            pagarCpbte();
        }
    }//GEN-LAST:event_pagarCpbteBtnActionPerformed

    private void anticipoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anticipoBtnActionPerformed
        if (codigoTxt.getText().isEmpty()) {
            return;
        }
        anticipo();
    }//GEN-LAST:event_anticipoBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void codigoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (codigoTxt.getText().isEmpty()) {
                filtroTxt.requestFocus();
            } else {
                buscarCodigo();
            }
        }
    }//GEN-LAST:event_codigoTxtKeyPressed

    private void filtroTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (filtroTxt.getText().isEmpty()) {
                codigoTxt.requestFocus();
            } else {
                codigoTxt.setText("");
                buscar();
            }
        }
    }//GEN-LAST:event_filtroTxtKeyPressed

    private void comboProveedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboProveedoresActionPerformed
        if (evt.getModifiers() == 16) {
            int row = comboProveedores.getSelectedIndex();
            if (row < 0) {
                JOptionPane.showMessageDialog(this, "debe seleccionar un proveedor");
                return;
            }
            proveedor = proveedores.get(row);
            codigoTxt.setText(String.valueOf(proveedor.getCodigo()));
            buscarCodigo();
        }
    }//GEN-LAST:event_comboProveedoresActionPerformed

    private void comboProveedoresKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboProveedoresKeyPressed
        if (evt.getKeyCode() == 10) {
            int row = comboProveedores.getSelectedIndex();
            if (row < 0) {
                JOptionPane.showMessageDialog(this, "debe seleccionar un proveedor");
                return;
            }
            proveedor = proveedores.get(row);
            codigoTxt.setText(String.valueOf(proveedor.getCodigo()));
            buscarCodigo();
        }
    }//GEN-LAST:event_comboProveedoresKeyPressed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        codigoTxt.setText("");
        buscar();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void desdeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_desdeTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            desde();
        }
    }//GEN-LAST:event_desdeTxtKeyPressed

    private void hastaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hastaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            hasta();
        }
    }//GEN-LAST:event_hastaTxtKeyPressed

    private void composicionPagoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_composicionPagoBtnActionPerformed
        if (codigoTxt.getText().isEmpty()) {
            return;
        }
        composicion();
    }//GEN-LAST:event_composicionPagoBtnActionPerformed

    private void aplicarCreditosBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarCreditosBtnActionPerformed
        if (codigoTxt.getText().isEmpty()) {
            return;
        }
        aplicarCreditos();
    }//GEN-LAST:event_aplicarCreditosBtnActionPerformed

    private void desaplicarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desaplicarBtnActionPerformed
        if (codigoTxt.getText().isEmpty()) {
            return;
        }
        int row = tablaCtaCte.getSelectedRow();
        if (row < 0) {
            return;
        }
        String tipo = tablaCtaCte.getValueAt(row, 2).toString();
        //JOptionPane.showMessageDialog(this, tipo);
        if (tipo.equals("RC")) {
            int nro = Integer.valueOf(tablaCtaCte.getValueAt(row, 3).toString());
            ReciboProveedor rp = null;
            try {
                rp = new ReciboProveedorService().getReciboByNro(nro, proveedor);
            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            //JOptionPane.showMessageDialog(this, rp);
            if (rp != null) {
                List<RcCo> rocos = null;
                try {
                    rocos = new RcCoService().getRcCoByRecibo(rp);
                } catch (Exception ex) {
                    Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (rocos != null && !rocos.isEmpty()) {
                    int o = JOptionPane.showConfirmDialog(this, "Confirme desaplicar RECIBO", "Atención", JOptionPane.YES_NO_OPTION);
                    if (o == 0) {
                        for (RcCo r : rocos) {
                            ComprobanteCompras cc = r.getComprobanteCompras();
                            cc.setEstaPago(false);
                            cc.setPagado(cc.getPagado() - r.getImputadoRc());
                            ReciboProveedor r1 = r.getReciboProveedor();
                            r1.setImporteImputado(0.0);
                            r1.setImputado(false);
                            try {
                                new RcCoService().deleteRecibo(r);
                                new ComprobanteComprasService().updateComprobante(cc);
                                new ReciboProveedorService().updateRecibo(r1);
                            } catch (Exception ex) {
                                Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                                JOptionPane.showMessageDialog(this, "Error 459");
                                return;
                            }
                        }
                        JOptionPane.showMessageDialog(this, "Comprobante desaplicado");
                    } else {
                        JOptionPane.showMessageDialog(this, "No se realizó ningún cambio");
                    }
                }
            }
        } else {
            if (tipo.equals("NC")) {
                String nf = tablaCtaCte.getValueAt(row, 2).toString();
                String l1 = nf.substring(0, 1);
                Integer s1 = Integer.valueOf(nf.substring(2, 6));
                Integer n1 = Integer.valueOf(nf.substring(7, 15));
                ComprobanteCompras coco = null;
                try {
                    coco = new ComprobanteComprasService().getComprobanteByProveedorAndNumero(proveedor, l1, s1, n1, false, tipo);
                } catch (Exception ex) {
                    Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (coco != null) {
                    List<RcCo> rocos = null;
                    try {
                        rocos = new RcCoService().getRcCoByNotaCredito(coco);
                    } catch (Exception ex) {
                        Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (rocos != null && !rocos.isEmpty()) {
                        int o = JOptionPane.showConfirmDialog(this, "Confirme desaplicar NOTA de CREDITO",
                                "Atención", JOptionPane.YES_NO_OPTION);
                        if (o == 0) {
                            for (RcCo rn : rocos) {
                                ComprobanteCompras cc = rn.getComprobanteCompras();
                                cc.setEstaPago(false);
                                cc.setPagado(cc.getPagado() - rn.getImputadoNc());
                                ComprobanteCompras r1 = rn.getNotaCredito();
                                r1.setPagado(0.0);
                                r1.setEstaPago(false);
                                try {
                                    new RcCoService().deleteRecibo(rn);
                                    new ComprobanteComprasService().updateComprobante(cc);
                                    new ComprobanteComprasService().updateComprobante(r1);
                                } catch (Exception ex) {
                                    Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error 552");
                                    return;
                                }
                            }
                            JOptionPane.showMessageDialog(this, "Comprobante desaplicado");
                        } else {
                            JOptionPane.showMessageDialog(this, "No se realizó ningún cambio");
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_desaplicarBtnActionPerformed

    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        if (codigoTxt.getText().isEmpty()) {
            return;
        }
        eliminarPago();
    }//GEN-LAST:event_eliminarBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CuentaCorrienteProveedorFrame(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton anticipoBtn;
    private javax.swing.JButton aplicarCreditosBtn;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JTextField codigoTxt;
    private javax.swing.JComboBox comboProveedores;
    private javax.swing.JButton composicionPagoBtn;
    private javax.swing.JButton desaplicarBtn;
    private javax.swing.JTextField desdeTxt;
    private javax.swing.JButton eliminarBtn;
    private javax.swing.JTextField filtroTxt;
    private javax.swing.JTextField hastaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton pagarAntiguedadBtn;
    private javax.swing.JButton pagarCpbteBtn;
    private javax.swing.JTextField saldoTxt;
    private javax.swing.JTable tablaCtaCte;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void pagarAntiguedad() {
        List<ComprobanteCompras> fc = null;
        List<ReciboProveedor> recibos = null;
        List<ComprobanteCompras> notasDeCredito = null;
        try {
            fc = new ComprobanteComprasService().getComprobantesImpagosByProveedor(proveedor);
        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (fc == null || fc.isEmpty()) {
            JOptionPane.showMessageDialog(this, "NO hay comprobantes para imputar el Pago");
        } else {
            try {
                recibos = new ReciboProveedorService().getRecibosPorProveedorNoImputados(proveedor);
            } catch (Exception ex) {
                Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (recibos != null && !recibos.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Hay comprobantes para Imputar que debe procesar primero");
                return;
            }
            try {
                notasDeCredito = new ComprobanteComprasService().getNotasCreditoImpagosByProveedor(proveedor);
            } catch (Exception ex) {
                Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (notasDeCredito != null && !notasDeCredito.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Hay comprobantes para Imputar que debe procesar primero");
                return;
            }
            IngresarPagoAntiguedadFrame ipaf = new IngresarPagoAntiguedadFrame(proveedor, menu);
            ipaf.setVisible(true);
            this.dispose();
        }
    }

    private void pagarCpbte() {
        List<ComprobanteCompras> fc = null;
        List<ReciboProveedor> recibos = null;
        List<ComprobanteCompras> notasDeCredito = null;
        try {
            fc = new ComprobanteComprasService().getComprobantesImpagosByProveedor(proveedor);
        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (fc == null || fc.isEmpty()) {
            JOptionPane.showMessageDialog(this, "NO hay comprobantes para imputar el Pago");
        } else {
            try {
                recibos = new ReciboProveedorService().getRecibosPorProveedorNoImputados(proveedor);
            } catch (Exception ex) {
                Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (recibos != null && !recibos.isEmpty()) {
                int a = JOptionPane.showConfirmDialog(this, "Tiene Comprobantes para Imputar, desea hacerlo igual?", "Atención", JOptionPane.YES_NO_OPTION);
                if (a == 0) {
                    VerComprobantesCompraImpagosByProveedorFrame iapf
                            = new VerComprobantesCompraImpagosByProveedorFrame(proveedor, menu);
                    iapf.setVisible(true);
                    this.dispose();
                }
                return;
            }
            try {
                notasDeCredito = new ComprobanteComprasService().getNotasCreditoImpagosByProveedor(proveedor);
            } catch (Exception ex) {
                Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (notasDeCredito != null && !notasDeCredito.isEmpty()) {
                int a = JOptionPane.showConfirmDialog(this, "Tiene Comprobantes para Imputar, desea hacerlo igual?", "Atención", JOptionPane.YES_NO_OPTION);
                if (a == 0) {
                    VerComprobantesCompraImpagosByProveedorFrame iapf
                            = new VerComprobantesCompraImpagosByProveedorFrame(proveedor, menu);
                    iapf.setVisible(true);
                    this.dispose();
                }
                return;
            }
            VerComprobantesCompraImpagosByProveedorFrame iapf
                    = new VerComprobantesCompraImpagosByProveedorFrame(proveedor, menu);
            iapf.setVisible(true);
            this.dispose();
        }
    }

    private void anticipo() {
        List<ComprobanteCompras> fc = null;
        try {
            fc = new ComprobanteComprasService().getComprobantesImpagosByProveedor(proveedor);
        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
//            JOptionPane.showMessageDialog(this, "ERROR LEYENDO COMPROBANTES");
//            return;
        }
        if (fc == null || fc.isEmpty()) {
            IngresarAnticipoProveedorFrame iapf = new IngresarAnticipoProveedorFrame(proveedor, menu);
            iapf.setVisible(true);
            this.dispose();
        } else {
            int a = JOptionPane.showConfirmDialog(this, "Tiene Comprobantes pendientes, desea hacerlo igual?", "Atención", JOptionPane.YES_NO_OPTION);
            if (a == 0) {
                IngresarAnticipoProveedorFrame iapf = new IngresarAnticipoProveedorFrame(proveedor, menu);
                iapf.setVisible(true);
                this.dispose();
            }
        }
    }

    private void volver() {
        if (menu.equals(0)) {
            MainFrame mf = new MainFrame();
            mf.setVisible(true);
            this.dispose();
        } else {
            if (menu.equals(1)) {
                VerSaldosPendientesProveedoresFrame vsppf = new VerSaldosPendientesProveedoresFrame();
                vsppf.setVisible(true);
                this.dispose();
            } else {
                ComprobantesPendientesFrame cpf = new ComprobantesPendientesFrame(menu);
                cpf.setVisible(true);
                this.dispose();
            }
        }
    }

    private void limpiarCampos() {
        codigoTxt.setText("");
        filtroTxt.setText("");
        desdeTxt.setText("");
        hastaTxt.setText("");
        saldoTxt.setText("");
        saldoTxt.setEditable(false);
        comboProveedores.removeAllItems();
    }

    private void buscar() {
        if (codigoTxt.getText().isEmpty()) {
            if (filtroTxt.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Debe ingresar codigo o nombre para buscar Proveedor");
                codigoTxt.requestFocus();
                return;
            }
            String filtro = filtroTxt.getText();
            proveedores = null;
            comboProveedores.removeAllItems();
            try {
                proveedores = new ProveedorService().getProveedoresByFiltro(filtro);
            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (proveedores != null && !proveedores.isEmpty()) {
                for (Proveedor p : proveedores) {
                    comboProveedores.addItem(p.getRazonSocial());
                }
                comboProveedores.requestFocus();
                comboProveedores.addFocusListener(null);
                comboProveedores.showPopup();
            } else {
                if (proveedores.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Nombre buscado INEXISTENTE");
                    filtroTxt.setText("");
                    filtroTxt.requestFocus();
                }
            }
        } else {
            buscarCodigo();
        }
    }

    private void buscarCodigo() {
        limpiarTabla();
        int c = Integer.valueOf(codigoTxt.getText());
        proveedor = null;
        try {
            proveedor = new ProveedorService().getProveedorByCodigo(c);
        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (proveedor != null) {
            filtroTxt.setText(proveedor.getRazonSocial());
            if (proveedor.getSaldo() != null) {
                saldoTxt.setText(df.format(proveedor.getSaldo()));
            } else {
                saldoTxt.setText(df.format(0.0));
            }
        } else {
            JOptionPane.showMessageDialog(this, "Proveedor inexistente");
            codigoTxt.setText("");
            return;
        }
        composicionPagoBtn.setEnabled(true);
        aplicarCreditosBtn.setEnabled(true);
        if (proveedor.getSaldo() > 0.00) {
            pagarAntiguedadBtn.setEnabled(true);
            pagarCpbteBtn.setEnabled(true);
        } else {
            anticipoBtn.setEnabled(true);
        }
        desdeTxt.requestFocus();
    }

    private void llenarTabla() {
        limpiarTabla();
        ctaCteP = null;
        Date fd = new Date();
        Date fa = fd;
        try {
            fd = sdf.parse(desdeTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
            desdeTxt.requestFocus();
            return;
        }
        try {
            fa = sdf.parse(hastaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
            hastaTxt.requestFocus();
            return;
        }
        try {
            ctaCteP = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(proveedor, fd, fa);
//            ctaCteP = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechasInverso(proveedor, fd, fa);

        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ctaCteP != null && !ctaCteP.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tablaCtaCte.getModel();
            for (CuentaCorrienteProveedor cta : ctaCteP) {
                Object ob[] = new Object[9];
                ob[0] = sdf.format(cta.getFecha());
                if (cta.getComprobante() != null) {
                    if (cta.getComprobante().getFechaEntrega() != null) {
                        ob[1] = sdf.format(cta.getComprobante().getFechaEntrega());
                    } else {
                        ob[1] = ".";
                    }
                } else {
                    ob[1] = ".";
                }
                if (cta.getComprobante() != null) {
                    String cbte = "";
                    if (cta.getComprobante().getLetra() != null) {
                        cbte = cta.getComprobante().getLetra();
                    }
                    if (cta.getComprobante().getNumeroSucursal() != null) {
                        String tmp = "0000" + cta.getComprobante().getNumeroSucursal().toString();
                        int tmp1 = tmp.length();
                        cbte = cbte + " " + tmp.substring(tmp1 - 4, tmp1) + "-";
                    }
                    String tmp = "00000000" + cta.getComprobante().getNumeroFactura().toString();
                    int tmp1 = tmp.length();
                    cbte = cbte + tmp.substring(tmp1 - 8, tmp1);
                    ob[2] = cta.getComprobante().getTipoComprobante();
//                    if (cta.getComprobante().getEsDebito() != null) {
//                        if (cta.getComprobante().getEsDebito()) {
//                            ob[1] = "FC";
//                        } else {
//                            ob[1] = "NC";
//                        }
//                    } else {
//                        ob[1] = "FC";
//                    }
                    ob[3] = cbte;
                } else {
                    if (cta.getReciboProveedor() != null) {
                        String tmp = "00000000" + cta.getReciboProveedor().getNumero().toString();
                        int tmp1 = tmp.length();
                        String cbte = tmp.substring(tmp1 - 8, tmp1);
                        ob[2] = "RC";
                        ob[3] = cbte;
                    }
                }
                ob[4] = cta.getProveedor().getRazonSocial();
                ob[5] = df.format(cta.getDebe());
                ob[6] = df.format(cta.getHaber());
                ob[7] = df.format(cta.getSaldo());
                if (cta.getComprobante() != null) {
                    if (cta.getComprobante().getFechaCalculoVencimiento() != null) {
//                        if (cta.getComprobante().getProntoPago()) {
                        ob[8] = sdf.format(cta.getComprobante().getFechaCalculoVencimiento());
//                        } else {
//                            ob[8] = "";
//                        }
                    } else {
                        ob[8] = "";
                    }
                }
                tbl.addRow(ob);
            }
            int rows = tablaCtaCte.getRowCount();
            Rectangle rect = tablaCtaCte.getCellRect(rows - 1, 0, true);
            tablaCtaCte.scrollRectToVisible(rect);
            tablaCtaCte.clearSelection();
            tablaCtaCte.setRowSelectionInterval(rows - 1, rows - 1);
            tablaCtaCte.setModel(tbl);
        }
    }

    private void limpiarTabla() {
        int row = tablaCtaCte.getRowCount();
        if (row > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tablaCtaCte.getModel();
            for (int i = 0; i < row; i++) {
                tbl.removeRow(0);
            }
            tablaCtaCte.setModel(tbl);
        }
    }

    private void desde() {
        if (desdeTxt.getText().isEmpty()) {
            desdeTxt.setText(sdf.format(new Date()));
            desdeTxt.requestFocus();
        } else {
            int largo = desdeTxt.getText().length();
            if (largo == 2) {
                Calendar cal = Calendar.getInstance();
                int mes = cal.get(Calendar.MONTH) + 1;
                int anio = cal.get(Calendar.YEAR);
                String an = String.valueOf(anio);
                String f = "0" + String.valueOf(mes);
                if (f.length() > 2) {
                    f = f.substring(1, 3);
                }
                f = f + "/" + an;
                desdeTxt.setText(desdeTxt.getText() + "/" + f);
                hastaTxt.requestFocus();
            } else {
                if (largo == 5) {
                    Calendar cal = Calendar.getInstance();
                    int anio = cal.get(Calendar.YEAR);
                    String an = "/" + String.valueOf(anio);
                    desdeTxt.setText(desdeTxt.getText() + an);
                    hastaTxt.requestFocus();
                } else {
                    if (largo != 10) {
                        JOptionPane.showMessageDialog(this, "Error en fecha");
                        desdeTxt.setText("");
//                          request focus mismo campo
                        desdeTxt.requestFocus();
                    } else {
                        String veinte = desdeTxt.getText().substring(6, 8);
                        if (!veinte.equals("20")) {
                            JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                            desdeTxt.requestFocus();
                        } else {
                            hastaTxt.requestFocus();
                        }
                    }
                }
            }
        }
    }

    private void hasta() {
        if (hastaTxt.getText().isEmpty()) {
            hastaTxt.setText(sdf.format(new Date()));
            hastaTxt.requestFocus();
        } else {
            int largo = hastaTxt.getText().length();
            if (largo == 2) {
                Calendar cal = Calendar.getInstance();
                int mes = cal.get(Calendar.MONTH) + 1;
                int anio = cal.get(Calendar.YEAR);
                String an = String.valueOf(anio);
                String f = "0" + String.valueOf(mes);
                if (f.length() > 2) {
                    f = f.substring(1, 3);
                }
                f = f + "/" + an;
                hastaTxt.setText(hastaTxt.getText() + "/" + f);
                llenarTabla();
            } else {
                if (largo == 5) {
                    Calendar cal = Calendar.getInstance();
                    int anio = cal.get(Calendar.YEAR);
                    String an = "/" + String.valueOf(anio);
                    hastaTxt.setText(hastaTxt.getText() + an);
                    llenarTabla();
                } else {
                    if (largo != 10) {
                        JOptionPane.showMessageDialog(this, "Error en fecha");
                        hastaTxt.setText("");
//                          request focus mismo campo
                        hastaTxt.requestFocus();
                    } else {
                        String veinte = hastaTxt.getText().substring(6, 8);
                        if (!veinte.equals("20")) {
                            JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                            hastaTxt.requestFocus();
                        } else {
                            llenarTabla();
                        }
                    }
                }
            }

        }
    }

    private void composicion() {
        int row = tablaCtaCte.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un comprobante");
        } else {
            CuentaCorrienteProveedor c = ctaCteP.get(row);
            ComposicionPagoFrame cpf = new ComposicionPagoFrame(c);
            cpf.setVisible(true);
            this.dispose();
        }
    }

    private void aplicarCreditos() {
        AplicarCreditoFrame acf = new AplicarCreditoFrame(proveedor, menu);
        acf.setVisible(true);
        this.dispose();
    }

    private void eliminarPago() {
        int row = tablaCtaCte.getSelectedRow();
        String t = tablaCtaCte.getValueAt(row, 2).toString();
        if (t.equals("RC")) {
            int a = JOptionPane.showConfirmDialog(this, "Confirma eliminar el RECIBO?", "Atención", JOptionPane.YES_NO_OPTION);
            if (a == 0) {
                int nro = Integer.valueOf(tablaCtaCte.getValueAt(row, 3).toString());
                ReciboProveedor r = null;
                try {
                    r = new ReciboProveedorService().getReciboByNro(nro, proveedor);
                } catch (Exception ex) {
                    Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                fecha = r.getFecha();
                Double valor = r.getImporte();
                if (r != null) {
                    if (r.getImputado() != null) {
                        if (r.getImputado()) {
                            JOptionPane.showMessageDialog(this, "Debe desaplicar el recibo primero");
                        } else {
                            List<RcCo> rc = null;
                            try {
                                rc = new RcCoService().getRcCoByRecibo(r);
                            } catch (Exception ex) {
                                Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            if (rc != null && !rc.isEmpty()) {
                                for (RcCo r1 : rc) {
                                    try {
                                        new RcCoService().deleteRecibo(r1);
                                    } catch (Exception ex) {
                                        Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }
                            CuentaCorrienteProveedor ccp = null;
                            try {
                                ccp = new CuentaCorrienteProveedorService().getCtaCteByRecibo(r);
                            } catch (Exception ex) {
                                Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            proveedor.setSaldo(proveedor.getSaldo() + valor);
                            try {
                                new CuentaCorrienteProveedorService().deleteCtaCteProveedor(ccp);
                                new ReciboProveedorService().deleteRecibo(r);
                                new ProveedorService().updateProveedor(proveedor);
                            } catch (Exception ex) {
                                Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            JOptionPane.showMessageDialog(this, "Pago eliminado");
                            recalcular();
                            saldoTxt.setText(df.format(proveedor.getSaldo()));
                            llenarTabla();
                        }
                    } else {
                        if (r.getImporteImputado() != null) {
                            if (r.getImporteImputado() > 0.0) {
                                JOptionPane.showMessageDialog(this, "Debe desimputar el recibo primero");
                            } else {
                                List<RcCo> rc = null;
                                try {
                                    rc = new RcCoService().getRcCoByRecibo(r);
                                } catch (Exception ex) {
                                    Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                if (rc != null && !rc.isEmpty()) {
                                    for (RcCo r1 : rc) {
                                        try {
                                            new RcCoService().deleteRecibo(r1);
                                        } catch (Exception ex) {
                                            Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                }
                                CuentaCorrienteProveedor ccp = null;
                                try {
                                    ccp = new CuentaCorrienteProveedorService().getCtaCteByRecibo(r);
                                } catch (Exception ex) {
                                    Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                proveedor.setSaldo(proveedor.getSaldo() + valor);
                                try {
                                    new CuentaCorrienteProveedorService().deleteCtaCteProveedor(ccp);
                                    new ReciboProveedorService().deleteRecibo(r);
                                    new ProveedorService().updateProveedor(proveedor);
                                } catch (Exception ex) {
                                    Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                JOptionPane.showMessageDialog(this, "Pago eliminado");
                                recalcular();
                                saldoTxt.setText(df.format(proveedor.getSaldo()));
                                llenarTabla();
                            }
                        } else {
                            List<RcCo> rc = null;
                            try {
                                rc = new RcCoService().getRcCoByRecibo(r);
                            } catch (Exception ex) {
                                Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            if (rc != null && !rc.isEmpty()) {
                                for (RcCo r1 : rc) {
                                    try {
                                        new RcCoService().deleteRecibo(r1);
                                    } catch (Exception ex) {
                                        Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }
                            CuentaCorrienteProveedor ccp = null;
                            try {
                                ccp = new CuentaCorrienteProveedorService().getCtaCteByRecibo(r);
                            } catch (Exception ex) {
                                Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            proveedor.setSaldo(proveedor.getSaldo() + valor);
                            try {
                                new CuentaCorrienteProveedorService().deleteCtaCteProveedor(ccp);
                                new ReciboProveedorService().deleteRecibo(r);
                                new ProveedorService().updateProveedor(proveedor);
                            } catch (Exception ex) {
                                Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            JOptionPane.showMessageDialog(this, "Pago eliminado");
                            recalcular();
                            saldoTxt.setText(df.format(proveedor.getSaldo()));
                            llenarTabla();
                        }
                    }
                }
            }
        }
    }

    private void recalcular() {
        Calendar cal = Calendar.getInstance();
        cal.setTime(fecha);
        cal.add(Calendar.DATE, -365);
        Date fecha1 = cal.getTime();
        Date fecha2 = new Date();
        List<CuentaCorrienteProveedor> ccp1 = null;
        try {
            ccp1 = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(proveedor, fecha1, fecha2);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Double sa = 0.0;
        int x = 0;
        for (CuentaCorrienteProveedor cc1 : ccp1) {
            if (x == 0) {
                sa = cc1.getSaldo();
                x = 1;
            } else {
                sa += cc1.getDebe() - cc1.getHaber();
                cc1.setSaldo(sa);
                try {
                    new CuentaCorrienteProveedorService().updateCtaCteProveedor(cc1);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

}
