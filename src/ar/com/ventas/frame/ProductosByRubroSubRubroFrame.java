/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.SubRubro;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ProductoService;
import ar.com.ventas.services.RubroService;
import ar.com.ventas.services.SubRubroService;
import ar.com.ventas.util.UtilFrame;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author argia
 */
public class ProductosByRubroSubRubroFrame extends javax.swing.JFrame {

    private List<Rubro> rubros;
    private List<SubRubro> subs;
    private List<Producto> productos;

    /**
     * Creates new form ProductosByRubroSubRubroFrame
     */
    public ProductosByRubroSubRubroFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        this.setLocationRelativeTo(null);
        cargarCombos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboR = new javax.swing.JComboBox<>();
        comboS = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        nuevoRubro = new javax.swing.JComboBox<>();
        cambiarBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("PRODUCTOS POR RUBRO Y SUBRUBRO");

        jLabel1.setText("RUBRO:");

        jLabel2.setText("SUB:");

        comboR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRActionPerformed(evt);
            }
        });

        comboS.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO", "DETALLE", "RUBRO", "SUBRUBRO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        volverBtn.setText("VOLVER");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        nuevoRubro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cambiarBtn.setText("CAMBIAR");
        cambiarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboR, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboS, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 304, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(nuevoRubro, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cambiarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(comboR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(nuevoRubro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cambiarBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void comboRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboRActionPerformed
        int rowR = comboR.getSelectedIndex();
        if (rowR > 0) {
            cargarProductosByRubro();
        }
    }//GEN-LAST:event_comboRActionPerformed

    private void comboSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSActionPerformed
        int rowS = comboS.getSelectedIndex();
        if (rowS > 0) {
            cargarProductosBySubRubro();
        }
    }//GEN-LAST:event_comboSActionPerformed

    private void cambiarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row < 0) {
            return;
        }
        Producto p = productos.get(row);
        int ru = nuevoRubro.getSelectedIndex();
        p.setRubro(rubros.get(ru - 1));
        int a = JOptionPane.showConfirmDialog(this, "CONFIRMA CAMBIO DE RUBRO?", "ATENCIÃ“N", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            try {
                new ProductoService().updateProducto(p);
                JOptionPane.showMessageDialog(this, "CAMBIO REALIZADO");
            } catch (Exception ex) {
                Logger.getLogger(ProductosByRubroSubRubroFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR NO SE PUDO CAMBIAR DE RUBRO");
                return;
            }
            cargarProductosByRubro();
        }
    }//GEN-LAST:event_cambiarBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductosByRubroSubRubroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductosByRubroSubRubroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductosByRubroSubRubroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductosByRubroSubRubroFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductosByRubroSubRubroFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cambiarBtn;
    private javax.swing.JComboBox<String> comboR;
    private javax.swing.JComboBox<String> comboS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> nuevoRubro;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void cargarCombos() {
        comboR.removeAllItems();
        comboR.addItem("");
        comboS.removeAllItems();
        comboS.addItem("");
        nuevoRubro.removeAllItems();
        nuevoRubro.addItem("");
        rubros = null;
        subs = null;
        try {
            rubros = new RubroService().getAllRubros();
            subs = new SubRubroService().getAllSubRubros();
        } catch (Exception ex) {
            Logger.getLogger(ProductosByRubroSubRubroFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Rubro r : rubros) {
            comboR.addItem(r.getNombre());
            nuevoRubro.addItem(r.getNombre());
        }
        for (SubRubro s : subs) {
            comboS.addItem(s.getDetalle());
        }
    }

    private void cargarProductosByRubro() {
        int rowR = comboR.getSelectedIndex();
        int rowS = comboS.getSelectedIndex();
        productos = null;
        UtilFrame.limpiarTabla(tabla);
        if (rowS > 0) {
            Rubro r = rubros.get(rowR - 1);
            SubRubro s = subs.get(rowS - 1);
            try {
                productos = new ProductoService().getAllProductosActivosByRubroAndSubByNombre(r, s);
            } catch (Exception ex) {
                Logger.getLogger(ProductosByRubroSubRubroFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            llenarTabla();
        } else {
            Rubro r = rubros.get(rowR - 1);
            try {
                productos = new ProductoService().getActivosByRubroOrderBySubrubroAndNombre(r);
            } catch (Exception ex) {
                Logger.getLogger(ProductosByRubroSubRubroFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            llenarTabla();
        }
    }

    private void cargarProductosBySubRubro() {
        int rowR = comboR.getSelectedIndex();
        int rowS = comboS.getSelectedIndex();
        productos = null;
        UtilFrame.limpiarTabla(tabla);
        if (rowS > 0) {
            if (rowR > 0) {
                Rubro r = rubros.get(rowR - 1);
                SubRubro s = subs.get(rowS - 1);
                try {
                    productos = new ProductoService().getAllProductosActivosByRubroAndSubByNombre(r, s);
                } catch (Exception ex) {
                    Logger.getLogger(ProductosByRubroSubRubroFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                llenarTabla();
            }
        }
    }

    private void llenarTabla() {
        if (productos != null && !productos.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (Producto p : productos) {
                Object o[] = new Object[4];
                o[0] = p.getCodigo();
                o[1] = p.getDetalle();
                o[2] = p.getRubro().getNombre();
                o[3] = p.getSubRubro().getDetalle();
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }
}
