/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.ClienteTraba;
import ar.com.ventas.entities.CtaCteCliente;
import ar.com.ventas.entities.Customer;
import ar.com.ventas.entities.CustomerTraba;
import ar.com.ventas.entities.Inventory;
import ar.com.ventas.entities.Recibo;
import ar.com.ventas.entities.Usuario;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.ClienteTrabaService;
import ar.com.ventas.services.CtaCteClienteService;
import ar.com.ventas.services.CustomerService;
import ar.com.ventas.services.CustomerTrabaService;
import ar.com.ventas.services.InventoryService;
import ar.com.ventas.services.ReciboService;
import ar.com.ventas.services.UsuarioService;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class VerCuentaCorrienteClienteFrame1 extends javax.swing.JFrame {

    private Cliente cliente = null;
    private Customer customer = null;
    private List<Cliente> clientes = null;
    private DefaultTableModel tabla = null;
    private DefaultTableModel tabla2 = null;
    //private Long clienteId;
    public Date fechaDe = null;
    public Date fechaHasta = null;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private Double saldo1 = 0.0;
    private Double saldo2 = 0.0;
    private Usuario usuario;
    private final Integer nivel = 2;
    private Boolean puede;
    private List<CtaCteCliente> cta = null;
    private Integer frame = 1;

    /**
     * Creates new form VerCuentaCorrienteCliente
     *
     * @param cli
     * @param feD
     * @param feH
     */
    public VerCuentaCorrienteClienteFrame1(Cliente cli, Date feD, Date feH, Boolean puede, Integer frame) {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        initComponents();
        this.cliente = cli;
        this.fechaDe = feD;
        this.fechaHasta = feH;
        this.puede = puede;
        this.frame = frame;
        limpiarCampos();
        llenarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        codigoClienteTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        filtroClienteABuscar = new javax.swing.JTextField();
        buscarXCodigo = new javax.swing.JButton();
        llenarComboClientesByFiltro = new javax.swing.JButton();
        comboClientes = new javax.swing.JComboBox();
        clienteEncontradoTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        desdeFechaTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        hastaFechaTxt = new javax.swing.JTextField();
        verCtaCte = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCtaCte = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        cobrarBtn = new javax.swing.JButton();
        saldoClienteTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        saldo2CustomerTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        saldoTotalTxt = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCtaCte2 = new javax.swing.JTable();
        eliminarRcBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CUENTA CORRIENTE CLIENTE - COBRANZAS");

        jLabel1.setText("CÃ³digo Cliente:");

        codigoClienteTxt.setText("CODIGO CLIE");
        codigoClienteTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoClienteTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Buscar por Nombre:");

        filtroClienteABuscar.setText("NOMBRE CLIENTE");
        filtroClienteABuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filtroClienteABuscarKeyPressed(evt);
            }
        });

        buscarXCodigo.setText("Buscar");
        buscarXCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarXCodigoActionPerformed(evt);
            }
        });

        llenarComboClientesByFiltro.setText("Buscar x Nombre");
        llenarComboClientesByFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                llenarComboClientesByFiltroActionPerformed(evt);
            }
        });

        comboClientes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboClientesActionPerformed(evt);
            }
        });
        comboClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboClientesKeyPressed(evt);
            }
        });

        clienteEncontradoTxt.setText("NOMBRE CLIENTE ENCONTRADO");

        jLabel3.setText("Desde Fecha:");

        desdeFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        desdeFechaTxt.setText("DDE FECHA");
        desdeFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                desdeFechaTxtKeyPressed(evt);
            }
        });

        jLabel4.setText("dd/MM/aaaa");

        jLabel5.setText("Hasta Fecha:");

        hastaFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hastaFechaTxt.setText("HSTA FECHA");
        hastaFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hastaFechaTxtKeyPressed(evt);
            }
        });

        verCtaCte.setText("Ver Cta. Cte.");
        verCtaCte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verCtaCteActionPerformed(evt);
            }
        });

        tablaCtaCte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Tipo", "Nro. Documento", "Debe", "Haber", "Saldo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaCtaCte);
        if (tablaCtaCte.getColumnModel().getColumnCount() > 0) {
            tablaCtaCte.getColumnModel().getColumn(0).setPreferredWidth(104);
            tablaCtaCte.getColumnModel().getColumn(1).setPreferredWidth(40);
            tablaCtaCte.getColumnModel().getColumn(2).setPreferredWidth(120);
            tablaCtaCte.getColumnModel().getColumn(3).setPreferredWidth(200);
            tablaCtaCte.getColumnModel().getColumn(4).setPreferredWidth(200);
            tablaCtaCte.getColumnModel().getColumn(5).setPreferredWidth(200);
        }

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        cobrarBtn.setText("Cobrar");
        cobrarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cobrarBtnActionPerformed(evt);
            }
        });

        saldoClienteTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        saldoClienteTxt.setText("SALDO A");

        jLabel6.setText("A");

        saldo2CustomerTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        saldo2CustomerTxt.setText("SALDO B");

        jLabel7.setText("B");

        jLabel8.setText("Total:");

        saldoTotalTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        saldoTotalTxt.setText("TOTAL");

        tablaCtaCte2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Tipo", "Nro. Documento", "Debe", "Haber", "Saldo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaCtaCte2);
        if (tablaCtaCte2.getColumnModel().getColumnCount() > 0) {
            tablaCtaCte2.getColumnModel().getColumn(0).setPreferredWidth(104);
            tablaCtaCte2.getColumnModel().getColumn(1).setPreferredWidth(40);
            tablaCtaCte2.getColumnModel().getColumn(2).setPreferredWidth(120);
            tablaCtaCte2.getColumnModel().getColumn(3).setPreferredWidth(200);
            tablaCtaCte2.getColumnModel().getColumn(4).setPreferredWidth(200);
            tablaCtaCte2.getColumnModel().getColumn(5).setPreferredWidth(200);
        }

        eliminarRcBtn.setText("Eliminar Recibo Azul");
        eliminarRcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarRcBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(220, 220, 220)
                                .addComponent(cobrarBtn)
                                .addGap(142, 142, 142)
                                .addComponent(eliminarRcBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(volverBtn)
                                .addGap(195, 195, 195))
                            .addComponent(jScrollPane2))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codigoClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buscarXCodigo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(clienteEncontradoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(saldoClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(saldo2CustomerTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7))))
                                .addGap(0, 4, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(filtroClienteABuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(llenarComboClientesByFiltro))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(saldoTotalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(66, 66, 66)
                                        .addComponent(verCtaCte)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(80, 80, 80))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(codigoClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(filtroClienteABuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buscarXCodigo)
                            .addComponent(llenarComboClientesByFiltro))
                        .addGap(49, 49, 49))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saldoClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saldo2CustomerTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saldoTotalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clienteEncontradoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(verCtaCte)
                            .addComponent(jLabel8))
                        .addGap(8, 8, 8)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(cobrarBtn)
                    .addComponent(eliminarRcBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        if (frame == 3) {
            RankingDeudoresFrame rdf = new RankingDeudoresFrame();
            rdf.setVisible(true);
            this.dispose();
        } else {
            MainFrame mf = new MainFrame();
            mf.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_volverBtnActionPerformed

    private void buscarXCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarXCodigoActionPerformed
        buscarXCodigo();
    }//GEN-LAST:event_buscarXCodigoActionPerformed

    private void verCtaCteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verCtaCteActionPerformed
        buscarCtaCteByCliente();
    }//GEN-LAST:event_verCtaCteActionPerformed

    private void llenarComboClientesByFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_llenarComboClientesByFiltroActionPerformed
        codigoClienteTxt.setText("");
        llenarComboClientesByFiltro();
        comboClientes.requestFocus();
        comboClientes.addFocusListener(null);
        comboClientes.showPopup();
    }//GEN-LAST:event_llenarComboClientesByFiltroActionPerformed

    private void cobrarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cobrarBtnActionPerformed
//        System.out.println(puede);
//        JOptionPane.showMessageDialog(this, "PUEDE");
        if (puede) {
            ingresarCobro();
        } else {
            if (habilitado()) {
                ingresarCobro();
            }
        }
    }//GEN-LAST:event_cobrarBtnActionPerformed

    private void comboClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboClientesActionPerformed
        if (evt.getModifiers() == 16) {
            llenarCamposCliente();
        }
    }//GEN-LAST:event_comboClientesActionPerformed

    private void codigoClienteTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoClienteTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!codigoClienteTxt.getText().isEmpty()) {
                buscarXCodigo();
            } else {
                filtroClienteABuscar.requestFocus();
            }
        }
    }//GEN-LAST:event_codigoClienteTxtKeyPressed

    private void filtroClienteABuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroClienteABuscarKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!filtroClienteABuscar.getText().isEmpty()) {
                codigoClienteTxt.setText("");
                llenarComboClientesByFiltro();
                comboClientes.requestFocus();
                comboClientes.addFocusListener(null);
                comboClientes.showPopup();
            } else {
                codigoClienteTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_filtroClienteABuscarKeyPressed

    private void comboClientesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboClientesKeyPressed
        if (evt.getKeyCode() == 10) {
            if (comboClientes.getSelectedIndex() > 0) {
                llenarCamposCliente();
            }
        }
    }//GEN-LAST:event_comboClientesKeyPressed

    private void desdeFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_desdeFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (desdeFechaTxt.getText().isEmpty()) {
                desdeFechaTxt.setText(sdf.format(new Date()));
                desdeFechaTxt.requestFocus();
            } else {
                int largo = desdeFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    desdeFechaTxt.setText(desdeFechaTxt.getText() + "/" + f);
                    hastaFechaTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        desdeFechaTxt.setText(desdeFechaTxt.getText() + an);
                        hastaFechaTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            desdeFechaTxt.setText("");
//                          request focus mismo campo
                            desdeFechaTxt.requestFocus();
                        } else {
                            String veinte = desdeFechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÃO");
//                              request focus mismo campo
                                desdeFechaTxt.requestFocus();
                            } else {
                                hastaFechaTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_desdeFechaTxtKeyPressed

    private void hastaFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hastaFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (hastaFechaTxt.getText().isEmpty()) {
                hastaFechaTxt.setText(sdf.format(new Date()));
                hastaFechaTxt.requestFocus();
            } else {
                int largo = hastaFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    hastaFechaTxt.setText(hastaFechaTxt.getText() + "/" + f);
                    buscarCtaCteByCliente();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        hastaFechaTxt.setText(hastaFechaTxt.getText() + an);
                        buscarCtaCteByCliente();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            hastaFechaTxt.setText("");
//                          request focus mismo campo
                            hastaFechaTxt.requestFocus();
                        } else {
                            String veinte = hastaFechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÃO");
//                              request focus mismo campo
                                hastaFechaTxt.requestFocus();
                            } else {
                                buscarCtaCteByCliente();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_hastaFechaTxtKeyPressed

    private void eliminarRcBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarRcBtnActionPerformed
        int recBco = tablaCtaCte.getSelectedRow();
        if (recBco < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN RECIBO AZUL");
            return;
        }
        CtaCteCliente cc = cta.get(recBco);
        if (!cc.getTipo().equals("RC")) {
            JOptionPane.showMessageDialog(this, "SELECCIONES UN RECIBO PARA ELIMINAR");
            return;
        }
        int a = JOptionPane.showConfirmDialog(this, "CONFIRME ELIMINAR RECIBO AZUL", "AtenciÃ³n", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            Recibo r = cc.getRecibo();
            Double d = cc.getRecibo().getImporte();
            Double sa = cliente.getSaldo();
            sa += d;
            cliente.setSaldo(sa);
            try {
                new CtaCteClienteService().deleteCtaCteCliente(cc);
                new ReciboService().deleteRecibo(r);
                new ClienteService().updateCliente(cliente);
            } catch (Exception ex) {
                Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            JOptionPane.showMessageDialog(this, "RECIBO ELIMINADO CORRETAMENTE");
            ajustarCuentaCte();
            buscarCtaCteByCliente();
        }
    }//GEN-LAST:event_eliminarRcBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VerCuentaCorrienteClienteFrame1(null, null, null, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarXCodigo;
    private javax.swing.JTextField clienteEncontradoTxt;
    private javax.swing.JButton cobrarBtn;
    private javax.swing.JTextField codigoClienteTxt;
    private javax.swing.JComboBox comboClientes;
    private javax.swing.JTextField desdeFechaTxt;
    private javax.swing.JButton eliminarRcBtn;
    private javax.swing.JTextField filtroClienteABuscar;
    private javax.swing.JTextField hastaFechaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton llenarComboClientesByFiltro;
    private javax.swing.JTextField saldo2CustomerTxt;
    private javax.swing.JTextField saldoClienteTxt;
    private javax.swing.JTextField saldoTotalTxt;
    private javax.swing.JTable tablaCtaCte;
    private javax.swing.JTable tablaCtaCte2;
    private javax.swing.JButton verCtaCte;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        codigoClienteTxt.setText("");
        filtroClienteABuscar.setText("");
        clienteEncontradoTxt.setText("");
        desdeFechaTxt.setText("");
        hastaFechaTxt.setText("");
        comboClientes.removeAllItems();
        comboClientes.addItem("");
        saldoClienteTxt.setText("");
        saldo2CustomerTxt.setText("");
        saldoTotalTxt.setText("");
        codigoClienteTxt.requestFocus();
    }

    private void buscarCtaCteByCliente() {
        borrarTablas();
        //ew ArrayList<CtaCteCliente>();
        List<Inventory> cuenta = null; //ew ArrayList<Inventory>();
        fechaDe = null;
        try {
            fechaDe = sdf.parse(desdeFechaTxt.getText());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Fecha erronea " + fechaDe);
            Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
            desdeFechaTxt.requestFocus();
            return;
        }
        fechaHasta = null;
        try {
            fechaHasta = sdf.parse(hastaFechaTxt.getText());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Fecha erronea " + fechaHasta);
            Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
            hastaFechaTxt.requestFocus();
            return;
        }
        cta = null;
        try {
            cta = new CtaCteClienteService().getAllCtaCteClienteByCodigoAndFecha(cliente, fechaDe, fechaHasta);
            cuenta = new InventoryService().getAllInventoryByCodigoYFecha(customer, fechaDe, fechaHasta);
        } catch (Exception ex) {
            Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        CtaCteCliente cta1 = null;
        Inventory cuenta1 = null;
        if (cta == null || cta.isEmpty()) {
            //if (cliente.getSaldo() * 100 != 0.00) {
            try {
                cta1 = new CtaCteClienteService().getUltimoMovimiento(cliente);
            } catch (Exception ex) {
                //Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (cta1 != null) {
                tabla = (DefaultTableModel) tablaCtaCte.getModel();
                Object ob[] = new Object[6];
                ob[0] = sdf.format(cta1.getFecha());
                ob[1] = cta1.getTipo();
                if (cta1.getTipo().equals("FC")) {
                    if (cta1.getFactura() != null) {
                        ob[2] = cta1.getFactura().getNumeroFactura();
                    }
                    ob[3] = df.format(cta1.getDebe());
                    ob[4] = "";
                } else {
                    if (cta1.getTipo().equals("RC")) {
                        if (cta1.getRecibo() != null) {
                            ob[2] = cta1.getRecibo().getNumero();
                        }
                        ob[3] = "";
                        ob[4] = df.format(cta1.getHaber());
                    } else {
                        if (cta1.getTipo().equals("NC")) {
                            if (cta1.getNotaCredito() != null) {
                                ob[2] = cta1.getNotaCredito().getNumeroFactura();
                            }
                            ob[3] = "";
                            ob[4] = df.format(cta1.getHaber());
                        } else {
                            if (cta1.getTipo().equals("ND")) {
                                if (cta1.getFactura() != null) {
                                    ob[2] = cta1.getFactura().getNumeroFactura();
                                }
                                ob[4] = "";
                                ob[3] = df.format(cta1.getDebe());
                            }
                        }
                    }
                }
                ob[5] = df.format(cta1.getSaldo());
                tabla.addRow(ob);
                tablaCtaCte.setModel(tabla);
            }
            //}
        } else {
            tabla = (DefaultTableModel) tablaCtaCte.getModel();
            for (CtaCteCliente cc : cta) {
                Object ob[] = new Object[6];
                ob[0] = sdf.format(cc.getFecha());
                ob[1] = cc.getTipo();
                if (cc.getTipo().equals("FC")) {
                    if (cc.getFactura() != null) {
                        ob[2] = cc.getFactura().getNumeroFactura();
                    }
                    ob[3] = df.format(cc.getDebe());
                    ob[4] = "";
                } else {
                    if (cc.getTipo().equals("RC")) {
                        if (cc.getRecibo() != null) {
                            ob[2] = cc.getRecibo().getNumero();
                        }
                        ob[3] = "";
                        ob[4] = df.format(cc.getHaber());
                    } else {
                        if (cc.getTipo().equals("NC")) {
                            if (cc.getNotaCredito() != null) {
                                ob[2] = cc.getNotaCredito().getNumeroFactura();
                            }
                            ob[3] = "";
                            ob[4] = df.format(cc.getHaber());
                        } else {
                            if (cc.getTipo().equals("ND")) {
                                if (cc.getFactura() != null) {
                                    ob[2] = cc.getFactura().getNumeroFactura();
                                }
                                ob[4] = "";
                                ob[3] = df.format(cc.getDebe());
                            }
                        }
                    }
                }
                ob[5] = df.format(cc.getSaldo());
                tabla.addRow(ob);
            }
            int r = tabla.getRowCount();
            Rectangle rect = tablaCtaCte.getCellRect(r - 1, 0, true);
            tablaCtaCte.scrollRectToVisible(rect);
            tablaCtaCte.clearSelection();
            tablaCtaCte.setRowSelectionInterval(r - 1, r - 1);
            tablaCtaCte.setModel(tabla);
        }
        if (cuenta == null || cuenta.isEmpty()) {
            //if (customer.getSaldo() * 100 != 0.00) {
            if (customer != null) {
                try {
                    cuenta1 = new InventoryService().getUltimoMovimiento(customer);
                } catch (Exception ex) {
                    //Logger.getLogger(VerCuentaCorrienteClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (cuenta1 != null) {
                    tabla2 = (DefaultTableModel) tablaCtaCte2.getModel();
                    Object ob[] = new Object[6];
                    ob[0] = sdf.format(cuenta1.getFecha());
                    ob[1] = cuenta1.getTipo();
                    if (cuenta1.getTipo().equals("FC")) {
                        if (cuenta1.getFactura() != null) {
                            ob[2] = cuenta1.getFactura().getNumeroFactura();
                        }
                        ob[3] = df.format(cuenta1.getDebe());
                        ob[4] = "";
                    } else {
                        if (cuenta1.getTipo().equals("RC")) {
                            if (cuenta1.getRecibo() != null) {
                                ob[2] = cuenta1.getRecibo().getNumero();
                            }
                            ob[3] = "";
                            ob[4] = df.format(cuenta1.getHaber());
                        } else {
                            if (cuenta1.getTipo().equals("NC")) {
                                if (cuenta1.getNotaCredito() != null) {
                                    ob[2] = cuenta1.getNotaCredito().getNumeroFactura();
                                }
                                ob[3] = "";
                                ob[4] = df.format(cuenta1.getHaber());
                            }
                        }
                    }
                    ob[5] = df.format(cuenta1.getSaldo());
                    tabla2.addRow(ob);
                    tablaCtaCte2.setModel(tabla2);
                }
            }
        } else {
            tabla2 = (DefaultTableModel) tablaCtaCte2.getModel();
            for (Inventory ccc : cuenta) {
                Object ob[] = new Object[6];
                ob[0] = sdf.format(ccc.getFecha());
                ob[1] = ccc.getTipo();
                if (ccc.getTipo().equals("FC")) {
                    if (ccc.getFactura() != null) {
                        ob[2] = ccc.getFactura().getNumeroFactura();
                    }
                    ob[3] = df.format(ccc.getDebe());
                    ob[4] = "";
                } else {
                    if (ccc.getTipo().equals("RC")) {
                        if (ccc.getRecibo() != null) {
                            ob[2] = ccc.getRecibo().getNumero();
                        }
                        ob[3] = "";
                        ob[4] = df.format(ccc.getHaber());
                    } else {
                        if (ccc.getTipo().equals("NC")) {
                            if (ccc.getNotaCredito() != null) {
                                ob[2] = ccc.getNotaCredito().getNumeroFactura();
                            }
                            ob[3] = "";
                            ob[4] = df.format(ccc.getHaber());
                        } else {
                            if (ccc.getTipo().equals("DV")) {
                                if (ccc.getRecibo() != null) {
                                    ob[2] = ccc.getRecibo().getNumero();
                                }
                                ob[4] = "";
                                ob[3] = df.format(ccc.getDebe());
                            }
                        }
                    }
                }
                ob[5] = df.format(ccc.getSaldo());
                tabla2.addRow(ob);
            }
            int r = tabla2.getRowCount();
            Rectangle rect = tablaCtaCte2.getCellRect(r - 1, 0, true);
            tablaCtaCte2.scrollRectToVisible(rect);
            tablaCtaCte2.clearSelection();
            tablaCtaCte2.setRowSelectionInterval(r - 1, r - 1);
            tablaCtaCte2.setModel(tabla2);
        }
    }

    private void llenarComboClientesByFiltro() {
        comboClientes.removeAllItems();
        comboClientes.addItem("");
        clientes = null;
        String filtro = null;
        if (!filtroClienteABuscar.getText().isEmpty()) {
            filtro = filtroClienteABuscar.getText();
            try {
                clientes = new ClienteService().getClientesByFiltro(filtro);
            } catch (Exception ex) {
                Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Cliente cli : clientes) {
                comboClientes.addItem(cli.getRazonSocial());
            }
        }
    }

    private void ingresarCobro() {
        String codi = cliente.getCodigo();
        cliente = null;
        try {
            cliente = new ClienteService().getClienteByCodigo(codi);
        } catch (Exception ex) {
            Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error al leer Cliente");
            volver2();
            return;
        }
        if (cliente.getImporteMostrador() != null) {
            Double importe = cliente.getImporteMostrador();
            if (importe > 0.0) {
                JOptionPane.showMessageDialog(this, "Debe cerrar primero la Factura antes de asignar el pago");
                volver2();
                return;
            }
        }
        String codigo = cliente.getCodigo();
        CustomerTraba cuTr = null;
        ClienteTraba ct = null;
        try {
            ct = new ClienteTrabaService().getClienteByCodigo(codigo);
            cuTr = new CustomerTrabaService().getClienteByCodigo(codigo);
        } catch (Exception ex) {
            Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ct.getTraba1() != null) {
            if (ct.getTraba1()) {
                JOptionPane.showMessageDialog(this, "Cliente bloqueado para asignar el pago");
                volver2();
                return;
            }
        }
        if (cuTr.getTraba2() != null) {
            if (cuTr.getTraba2()) {
                JOptionPane.showMessageDialog(this, "Cliente bloqueado para asignar el pago");
                volver2();
                return;
            }
        }
        CobrarFrame cf = new CobrarFrame(cliente, fechaDe, fechaHasta, puede, frame);
        cf.setVisible(true);
        this.dispose();
    }

    private void llenarCamposCliente() {
        int clienteSeleccionado = comboClientes.getSelectedIndex();
        if (clienteSeleccionado > 0) {
            cliente = clientes.get(clienteSeleccionado - 1);
            String codigo = cliente.getCodigo();
            CustomerTraba cuTr = null;
            ClienteTraba ct = null;
            try {
                ct = new ClienteTrabaService().getClienteByCodigo(codigo);
                cuTr = new CustomerTrabaService().getClienteByCodigo(codigo);
            } catch (Exception ex) {
                Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ct != null) {
                if (ct.getTraba1() != null) {
                    if (ct.getTraba1()) {
                        JOptionPane.showMessageDialog(this, "Cliente bloqueado para esta OperaciÃ³n(1)");
                        return;
                    }
                }
            }
            if (cuTr != null) {
                if (cuTr.getTraba2() != null) {
                    if (cuTr.getTraba2()) {
                        JOptionPane.showMessageDialog(this, "Cliente bloqueado para esta OperaciÃ³n(2)");
                        return;
                    }
                }
            }
            codigoClienteTxt.setText(cliente.getCodigo());
            cobrarBtn.setEnabled(true);
            Date fecha = new Date();
            hastaFechaTxt.setText(sdf.format(fecha));
            Calendar calendar = Calendar.getInstance();
            calendar.add(Calendar.DATE, -30);
            desdeFechaTxt.setText(sdf.format(calendar.getTime()));
            buscarXCodigo();
            cobrarBtn.requestFocus();
        }
    }

    private void borrarTablas() {
        int lineas = tablaCtaCte.getRowCount();
        DefaultTableModel model1 = (DefaultTableModel) tablaCtaCte.getModel();
        if (lineas > 0) {
            for (int n = 0; n < lineas; n++) {
                model1.removeRow(0);
            }
            tablaCtaCte.setModel(model1);
        }
        lineas = tablaCtaCte2.getRowCount();
        DefaultTableModel model2 = (DefaultTableModel) tablaCtaCte2.getModel();
        if (lineas > 0) {
            for (int n = 0; n < lineas; n++) {
                model2.removeRow(0);
            }
            tablaCtaCte2.setModel(model2);
        }
    }

    private void buscarXCodigo() {
        if (!codigoClienteTxt.getText().isEmpty()) {
            cliente = null;
            customer = null;
            try {
                cliente = new ClienteService().getClienteByCodigo(codigoClienteTxt.getText());
                customer = new CustomerService().getCustomerByCodigo(codigoClienteTxt.getText());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error en codigo Cliente");
                Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (cliente != null) {
                String codigo = cliente.getCodigo();
                CustomerTraba cuTr = null;
                ClienteTraba ct = null;
                try {
                    ct = new ClienteTrabaService().getClienteByCodigo(codigo);
                    cuTr = new CustomerTrabaService().getClienteByCodigo(codigo);
                } catch (Exception ex) {
                    Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (ct.getTraba1() != null) {
                    if (ct.getTraba1()) {
                        JOptionPane.showMessageDialog(this, "Cliente bloqueado para esta OperaciÃ³n.(1)");
//                        System.out.println(ct.getTraba1());
//                        System.out.println(ct.getId());
//                        System.out.println(cuTr.getTraba2());
//                        System.out.println(cuTr.getId());
//                        JOptionPane.showMessageDialog(this, "VER");
                        
                        return;
                    }
                }
                if (cuTr.getTraba2() != null) {
                    if (cuTr.getTraba2()) {
                        JOptionPane.showMessageDialog(this, "Cliente bloqueado para esta OperaciÃ³n.(2)");
                        return;
                    }
                }
            }
            if (customer != null) {
                if (cliente != null) {
                    if (cliente.getAlias() != null) {
                        clienteEncontradoTxt.setText("(" + cliente.getAlias() + ") "
                                + cliente.getRazonSocial());
                    } else {
                        clienteEncontradoTxt.setText(cliente.getRazonSocial());
                    }
                    //clienteId = cliente.getId();
                    if (cliente.getSaldo() != null) {
                        saldoClienteTxt.setText(String.valueOf(df.format(cliente.getSaldo())));
                        saldo1 = cliente.getSaldo();
                        cobrarBtn.setEnabled(true);
                    } else {
                        saldo1 = 0.0;
                    }
                    if (customer.getSaldo() != null) {
                        saldo2CustomerTxt.setText(String.valueOf(df.format(customer.getSaldo())));
                        saldo2 = customer.getSaldo();
                    } else {
                        saldo2 = 0.0;
                    }
                    saldoTotalTxt.setText(String.valueOf(df.format(saldo1 + saldo2)));
                    Date fecha = new Date();
                    Calendar calendar = Calendar.getInstance();
                    if (cliente.getCodigo().equals("99999")) {
                        calendar.add(Calendar.DATE, +0);
                    } else {
                        calendar.add(Calendar.DATE, -30);
                    }
                    desdeFechaTxt.setText(sdf.format(calendar.getTime()));
                    hastaFechaTxt.setText(sdf.format(fecha));
                    buscarCtaCteByCliente();
                    cobrarBtn.requestFocus();
                } else {
                    JOptionPane.showMessageDialog(this, "Error en codigo Cliente");
                    codigoClienteTxt.requestFocus();
                }
            } else {
                if (cliente != null) {
                    JOptionPane.showMessageDialog(this, "Cliente no habilitado");
                    codigoClienteTxt.requestFocus();
                } else {
                    JOptionPane.showMessageDialog(this, "Cliente no Existe");
                    codigoClienteTxt.requestFocus();
                }
            }
        }
    }

    private void llenarCampos() {
        cobrarBtn.setEnabled(false);
        if (cliente != null) {
            codigoClienteTxt.setText(cliente.getCodigo());
            buscarXCodigo();
            if (fechaDe != null) {
                desdeFechaTxt.setText(sdf.format(fechaDe));
            } else {
                Date fecha = new Date();
                Calendar calendar = Calendar.getInstance();
                calendar.add(Calendar.DATE, -30);
                desdeFechaTxt.setText(sdf.format(calendar.getTime()));
                hastaFechaTxt.setText(sdf.format(fecha));
            }
            if (fechaHasta != null) {
                hastaFechaTxt.setText(sdf.format(fechaHasta));
            } else {
                Date fecha = new Date();
                Calendar calendar = Calendar.getInstance();
                calendar.add(Calendar.DATE, -30);
                desdeFechaTxt.setText(sdf.format(calendar.getTime()));
                hastaFechaTxt.setText(sdf.format(fecha));
            }
            //buscarCtaCteByCliente();
        }
    }

    private void volver2() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private boolean habilitado() {
        FileReader fr = null;
        try {
            fr = new FileReader("c:/ventas/permisos.txt");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedReader br = new BufferedReader(fr);
        String acceso = "";
        try {
            acceso = br.readLine();
        } catch (IOException ex) {
            Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            br.close();
        } catch (IOException ex) {
            Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (acceso.equals("1")) {
            return true;
        }
        habilitar();
        if (usuario != null) {
            return true;
        } else {
            return false;
        }
    }

    private void habilitar() {
        usuario = null;
        JTextField field = new JTextField("");
        String[] options = {"Ingresar"};
        int result = JOptionPane.showOptionDialog(
                null,
                field,
                "AutorizaciÃ³n de USUARIO",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                0);
        if (field.getText().isEmpty()) {
            usuario = null;
            return;
        }
        switch (result) {
            case 0:
                int cod = Integer.valueOf(field.getText());
                try {
                    usuario = new UsuarioService().getUsuarioByCodigo(cod);
                } catch (Exception ex) {
                    Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (usuario != null) {
                    if (usuario.getActivo()) {
                        JPasswordField field2 = new JPasswordField("");
                        String[] opts = {"Ingresar"};
                        int resulta = JOptionPane.showOptionDialog(
                                null,
                                field2,
                                "CONTRASEÃA: " + usuario.getNombre() + ", AutorizaciÃ³n",
                                JOptionPane.OK_CANCEL_OPTION,
                                JOptionPane.QUESTION_MESSAGE,
                                null,
                                opts,
                                0);
                        switch (resulta) {
                            case 0:
                                int contra = Integer.valueOf(new String(field2.getPassword()));
                                if (contra == usuario.getContrasena()) {
                                    if (usuario.getNivel() > nivel) {
                                        JOptionPane.showMessageDialog(this, "Usuario no Habilitado");
                                        usuario = null;
                                    } else {
                                        String f1 = sdf.format(usuario.getFecha());
                                        String f2 = sdf.format(new Date());
                                        if (usuario.getNivel() == 2) {
                                            if (!f1.equals(f2)) {
                                                JOptionPane.showMessageDialog(this, "Permiso de Usuario Vencido");
                                                usuario = null;
                                            }
                                        }
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "ContraseÃ±a incorrecta");
                                    usuario = null;
                                }
                                break;
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "USUARIO Inactivo");
                        usuario = null;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No existe el Usuario");
                    usuario = null;
                }
                break;
        }
    }

    private void ajustarCuentaCte() {
        JOptionPane.showMessageDialog(this, "SE AJUSTARA EL SALDO DE LA CUENTA CORRIENTE");
        List<CtaCteCliente> x_cta = null;
        try {
            x_cta = new CtaCteClienteService().getTodaCtaCteClienteByCliente(cliente);
        } catch (Exception ex) {
            Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        Double s = 0.0;
        int t = 0;
        if (x_cta != null && !x_cta.isEmpty()) {
            for (CtaCteCliente c : x_cta) {
                if (t == 0) {
                    s = c.getDebe() - c.getHaber();
                    c.setSaldo(s);
                    try {
                        c = new CtaCteClienteService().updateCtaCteCliente(c);
                    } catch (Exception ex) {
                        Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    t = 1;
                } else {
                    s += c.getDebe() - c.getHaber();
                    c.setSaldo(s);
                    try {
                        c = new CtaCteClienteService().updateCtaCteCliente(c);
                    } catch (Exception ex) {
                        Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            cliente.setSaldo(s);
            try {
                new ClienteService().updateCliente(cliente);
            } catch (Exception ex) {
                Logger.getLogger(VerCuentaCorrienteClienteFrame1.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        JOptionPane.showMessageDialog(this, "PROCESO TERMINADO");
        limpiarCampos();
        llenarCampos();
    }
}
