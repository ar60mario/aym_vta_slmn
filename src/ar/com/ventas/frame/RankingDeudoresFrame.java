/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.Customer;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.CustomerService;
import ar.com.ventas.util.UtilFrame;
import java.awt.print.PrinterException;
import static java.lang.Math.rint;
import java.text.DecimalFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class RankingDeudoresFrame extends javax.swing.JFrame {

    private DecimalFormat df = new DecimalFormat("#0.00");
    private Double limite = 500D;

    /**
     * Creates new form RankingDeudoresFrame
     */
    public RankingDeudoresFrame() {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        initComponents();
        limiteTxt.setText(limite.toString());
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaSaldos = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        imprimirBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        limiteTxt = new javax.swing.JTextField();
        actualizarBtn = new javax.swing.JButton();
        ctaCteClienteBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        tablaSaldos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nombre", "Saldo CF", "Saldo OF", "Saldo Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaSaldos);

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        imprimirBtn.setText("Imprimir");
        imprimirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Límite Importe Deudores:");

        limiteTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        limiteTxt.setText("LIMITE");

        actualizarBtn.setText("Actualizar");
        actualizarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarBtnActionPerformed(evt);
            }
        });

        ctaCteClienteBtn.setText("Cuenta Corriente");
        ctaCteClienteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctaCteClienteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 691, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(limiteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(actualizarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(imprimirBtn)
                        .addGap(18, 18, 18)
                        .addComponent(ctaCteClienteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(imprimirBtn)
                    .addComponent(jLabel1)
                    .addComponent(limiteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actualizarBtn)
                    .addComponent(ctaCteClienteBtn))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void imprimirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirBtnActionPerformed
        try {
            tablaSaldos.print();
        } catch (PrinterException ex) {
            Logger.getLogger(RankingDeudoresFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_imprimirBtnActionPerformed

    private void actualizarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarBtnActionPerformed
        llenarTabla();
    }//GEN-LAST:event_actualizarBtnActionPerformed

    private void ctaCteClienteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctaCteClienteBtnActionPerformed
        cuentaCorriente();
    }//GEN-LAST:event_ctaCteClienteBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RankingDeudoresFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RankingDeudoresFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RankingDeudoresFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RankingDeudoresFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RankingDeudoresFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizarBtn;
    private javax.swing.JButton ctaCteClienteBtn;
    private javax.swing.JButton imprimirBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField limiteTxt;
    private javax.swing.JTable tablaSaldos;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarTabla() {
        tablaSaldos = UtilFrame.limpiarTabla(tablaSaldos);
        limite = Double.valueOf(limiteTxt.getText());
        List<Cliente> clientes = null;
        try {
            clientes = new ClienteService().getClienteOrdenado();
        } catch (Exception ex) {
            Logger.getLogger(RankingDeudoresFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (clientes != null && !clientes.isEmpty()) {
            Double saldoCli = 0.00;
            Double saldoCus = 0.00;
            Double totalSaldoCli = 0.00;
            Double totalSaldoCus = 0.00;
            DefaultTableModel tbl = (DefaultTableModel) tablaSaldos.getModel();
            for (Cliente cli : clientes) {
                String codCli = cli.getCodigo();
                if (cli.getSaldo() != null) {
                    saldoCli = cli.getSaldo();
                } else {
                    saldoCli = 0.00;
                }
                Customer cus = null;
                try {
                    cus = new CustomerService().getCustomerByCodigo(codCli);
                    if (cus.getSaldo() != null) {
                        saldoCus = cus.getSaldo();
                    } else {
                        saldoCus = 0.00;
                    }
                } catch (Exception ex) {
                    saldoCus = 0.00;
                }
                if (saldoCli > limite) {
                    if (saldoCli + saldoCus > limite) {
                        Object ob[] = new Object[5];
                        ob[0] = codCli;
                        if (cli.getAlias() != null) {
                            ob[1] = cli.getRazonSocial() + " - " + cli.getAlias();
                        } else {
                            ob[1] = cli.getRazonSocial();
                        }

                        ob[2] = df.format(saldoCus);
                        ob[3] = df.format(saldoCli);
                        Double xTotal = saldoCli + saldoCus;
                        int yTotal = (int) rint(xTotal * 100);
                        ob[4] = df.format(xTotal);
                        if (yTotal != 0) {
                            tbl.addRow(ob);
                            totalSaldoCli += saldoCli;
                            totalSaldoCus += saldoCus;
                        }
                    }
                } else {
                    if (saldoCus > limite) {
                        if (saldoCli + saldoCus > limite) {
                            Object ob[] = new Object[5];
                            ob[0] = codCli;
                            if (cli.getAlias() != null) {
                                ob[1] = cli.getRazonSocial() + " - " + cli.getAlias();
                            } else {
                                ob[1] = cli.getRazonSocial();
                            }
                            ob[2] = df.format(saldoCus);
                            ob[3] = df.format(saldoCli);
                            Double xTotal = saldoCli + saldoCus;
                            int yTotal = (int) rint(xTotal * 100);
                            ob[4] = df.format(xTotal);
                            if (yTotal != 0) {
                                tbl.addRow(ob);
                                totalSaldoCli += saldoCli;
                                totalSaldoCus += saldoCus;
                            }
                        }
                    }
                }
            }
            Object ob[] = new Object[5];
            ob[0] = "*";
            ob[1] = "";
            ob[2] = "";
            ob[3] = "";
            ob[4] = "";
            tbl.addRow(ob);
            Object ob1[] = new Object[5];
            ob1[0] = "*";
            ob1[1] = "TOTALES:";
            ob1[2] = df.format(totalSaldoCus);
            ob1[3] = df.format(totalSaldoCli);
            ob1[4] = df.format(totalSaldoCus + totalSaldoCli);
            tbl.addRow(ob1);
            tablaSaldos.setModel(tbl);
        }
    }

    private void cuentaCorriente() {
        int rows = tablaSaldos.getRowCount();
        if (rows > 0) {
            int row = tablaSaldos.getSelectedRow();
            if (row < 0) {
                JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN CLIENTE PARA VER LA CTA CTE");
                return;
            }
            String codigo = tablaSaldos.getValueAt(row, 0).toString();
            if (codigo.equals("*")) {
                JOptionPane.showMessageDialog(this, "NO PUEDE SELECCIONAR ESTA LINEA, BUSQUE UN CLIENTE");
                return;
            }
            Cliente cliente = null;
            try {
                cliente = new ClienteService().getClienteByCodigo(codigo);
            } catch (Exception ex) {
                Logger.getLogger(RankingDeudoresFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(cliente != null){
                Integer frame = 3;
                VerCuentaCorrienteClienteFrame vcccf = new VerCuentaCorrienteClienteFrame(cliente, new Date(), new Date(), true, frame);
                vcccf.setVisible(true);
                this.dispose();
            }
        }
    }
}
