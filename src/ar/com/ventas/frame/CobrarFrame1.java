/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.ClienteTraba;
import ar.com.ventas.entities.Configuracion;
import ar.com.ventas.entities.CtaCteCliente;
import ar.com.ventas.entities.Customer;
import ar.com.ventas.entities.CustomerTraba;
import ar.com.ventas.entities.Inventory;
import ar.com.ventas.entities.Payment;
import ar.com.ventas.entities.Recibo;
import ar.com.ventas.entities.Routines;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.ClienteTrabaService;
import ar.com.ventas.services.ConfiguracionService;
import ar.com.ventas.services.CtaCteClienteService;
import ar.com.ventas.services.CustomerService;
import ar.com.ventas.services.CustomerTrabaService;
import ar.com.ventas.services.InventoryService;
import ar.com.ventas.services.PaymentService;
import ar.com.ventas.services.ReciboService;
import ar.com.ventas.services.RoutinesService;
import java.awt.event.KeyEvent;
import static java.lang.Math.rint;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mario
 */
public class CobrarFrame1 extends javax.swing.JFrame {

    private Date fecha;
    private Date fechaDe = null;
    private Date fechaHasta = null;
    private String filtro = "";
    private Cliente clienteSeleccionado = null;
    private Customer clienteSeleccionado2 = null;
    private Double importePagado = 0.0;
    private Double saldoDeudor1 = 0.0;
    private Double saldoDeudor2 = 0.0;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("0.00");
    private Integer numeroDeRecibo1 = 0;
    private Integer numeroDeRecibo2 = 0;
    private Configuracion conf1;
    private Routines conf2;
    private Boolean puede;
    private Integer frame = 1;

    /**
     * Creates new form CobrarFrame
     *
     * @param cli
     * @param feD
     * @param feHa
     */
    public CobrarFrame1(Cliente cli, Date feD, Date feHa, Boolean puede, Integer frame) {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        initComponents();
        this.clienteSeleccionado = cli;
        this.puede = puede;
        this.frame = frame;
        clienteSeleccionado2 = null;
        try {
            clienteSeleccionado2 = new CustomerService().getCustomerByCodigo(clienteSeleccionado.getCodigo());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: 68");
        }
        if (clienteSeleccionado2 == null) {
            clienteSeleccionado2.setCodigo(clienteSeleccionado.getCodigo());
            clienteSeleccionado2.setSaldo(0.00);
            clienteSeleccionado2.setActivo(true);
            clienteSeleccionado2.setTieneDescuento(false);
            try {
                new CustomerService().saveCustomer(clienteSeleccionado2);
            } catch (Exception ex) {
                Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.fechaDe = feD;
        this.fechaHasta = feHa;

        limpiarCampos();
        colocarNumeroRecibo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        clienteABuscarTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        saldoDeudorTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        importePagadoTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cobrarBtn = new javax.swing.JButton();
        numeroReciboTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fechaTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        nombreClienteTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        saldoUnoTxt = new javax.swing.JTextField();
        saldoDosTxt = new javax.swing.JTextField();
        confirmaAntireciboChk = new javax.swing.JCheckBox();
        devolverEfectivoBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        clienteABuscarTxt.setText("CLIENTE CODIGO");

        jLabel1.setText("Cliente Buscar:");

        saldoDeudorTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        saldoDeudorTxt.setText("SALDO CLIENTE");

        jLabel2.setText("Saldo Total:");

        importePagadoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        importePagadoTxt.setText("IMPORTE PAGADO");
        importePagadoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                importePagadoTxtKeyPressed(evt);
            }
        });

        jLabel3.setText("Importe Pagado:");

        cobrarBtn.setText("Cobrar");
        cobrarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cobrarBtnActionPerformed(evt);
            }
        });

        numeroReciboTxt.setText("NUMERO RECIBO");

        jLabel4.setText("Numero Recibo:");

        jLabel5.setText("Fecha:");

        fechaTxt.setText("FECHA");
        fechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaTxtKeyPressed(evt);
            }
        });

        jLabel6.setText("Cliente Nombre:");

        nombreClienteTxt.setText("NOMBRE CLIENTE A COBRAR");

        jLabel7.setText("Saldo 2:");

        jLabel8.setText("Saldo 1:");

        saldoUnoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        saldoUnoTxt.setText("SALDO 1");

        saldoDosTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        saldoDosTxt.setText("SALDO 2");

        confirmaAntireciboChk.setText("Confirma Antirecibo");
        confirmaAntireciboChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmaAntireciboChkActionPerformed(evt);
            }
        });

        devolverEfectivoBtn.setText("Devolver Efectivo");
        devolverEfectivoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devolverEfectivoBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(importePagadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(62, 249, Short.MAX_VALUE)
                        .addComponent(confirmaAntireciboChk)
                        .addGap(61, 61, 61))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(clienteABuscarTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(nombreClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(cobrarBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(devolverEfectivoBtn)
                                .addGap(65, 65, 65)
                                .addComponent(volverBtn)))
                        .addContainerGap(30, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numeroReciboTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saldoDeudorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saldoDosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saldoUnoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 210, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(numeroReciboTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(clienteABuscarTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(nombreClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(saldoUnoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(saldoDosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmaAntireciboChk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(saldoDeudorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(importePagadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(cobrarBtn)
                    .addComponent(devolverEfectivoBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void cobrarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cobrarBtnActionPerformed
        cobrar(clienteSeleccionado, fechaDe, fechaHasta);
    }//GEN-LAST:event_cobrarBtnActionPerformed

    private void importePagadoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_importePagadoTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (confirmaAntireciboChk.isSelected()) {
                devolverEfectivo(clienteSeleccionado, fechaDe, fechaHasta);
            } else {
                cobrar(clienteSeleccionado, fechaDe, fechaHasta);
            }
        } else {
            if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
                VerCuentaCorrienteClienteFrame vccf = new VerCuentaCorrienteClienteFrame(clienteSeleccionado, fechaDe, fechaHasta, puede, frame);
                vccf.setVisible(true);
                this.dispose();
            } else {
                if (evt.getKeyCode() != 8) {
                    if (evt.getKeyCode() != 110) {
                        if (!isNumeric(evt)) {
                            JOptionPane.showMessageDialog(this, "Solo números");
                            importePagadoTxt.setText("");
                            importePagadoTxt.requestFocus();
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_importePagadoTxtKeyPressed

    private boolean isNumeric(KeyEvent evt) {
        String cod = String.valueOf(evt.getKeyChar());
        try {
            Integer.parseInt(cod);
        } catch (NumberFormatException ex) {
            return false;
        }
        return true;
    }

    private void confirmaAntireciboChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmaAntireciboChkActionPerformed
        if (confirmaAntireciboChk.isSelected()) {
            cobrarBtn.setEnabled(false);
            devolverEfectivoBtn.setEnabled(true);
        } else {
            cobrarBtn.setEnabled(true);
            devolverEfectivoBtn.setEnabled(false);
        }
    }//GEN-LAST:event_confirmaAntireciboChkActionPerformed

    private void devolverEfectivoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devolverEfectivoBtnActionPerformed
        devolverEfectivo(clienteSeleccionado, fechaDe, fechaHasta);
    }//GEN-LAST:event_devolverEfectivoBtnActionPerformed

    private void fechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (fechaTxt.getText().isEmpty()) {
                fechaTxt.setText(sdf.format(new Date()));
                fechaTxt.requestFocus(); //mismo campo
            } else {
                int largo = fechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    fechaTxt.setText(fechaTxt.getText() + "/" + f);
                    importePagadoTxt.requestFocus();
//                  request focus prox campo
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        fechaTxt.setText(fechaTxt.getText() + an);
                        importePagadoTxt.requestFocus();
//                      request focus prox campo
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            fechaTxt.setText("");
//                          request focus mismo campo
                            fechaTxt.requestFocus();
                        } else {
                            String veinte = fechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                fechaTxt.requestFocus();
                            } else {
                                importePagadoTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_fechaTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CobrarFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CobrarFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CobrarFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CobrarFrame1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CobrarFrame1(null, null, null, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField clienteABuscarTxt;
    private javax.swing.JButton cobrarBtn;
    private javax.swing.JCheckBox confirmaAntireciboChk;
    private javax.swing.JButton devolverEfectivoBtn;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JTextField importePagadoTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField nombreClienteTxt;
    private javax.swing.JTextField numeroReciboTxt;
    private javax.swing.JTextField saldoDeudorTxt;
    private javax.swing.JTextField saldoDosTxt;
    private javax.swing.JTextField saldoUnoTxt;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        fecha = new Date();
        clienteABuscarTxt.setText("");
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        fechaTxt.setText(sdf.format(fecha));
        importePagadoTxt.setText("");
        numeroReciboTxt.setText("");
        saldoUnoTxt.setText("");
        saldoDosTxt.setText("");
        saldoDeudorTxt.setText("");
        clienteABuscarTxt.setText("");
        devolverEfectivoBtn.setEnabled(false);
        confirmaAntireciboChk.setSelected(false);
    }

    private void colocarNumeroRecibo() {
        conf1 = null;
        conf2 = null;
        try {
            conf1 = new ConfiguracionService().getFacturas(1L);
            conf2 = new RoutinesService().getFacturas(1L);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: 403");
//            Logger.getLogger(CobrarFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        numeroDeRecibo2 = conf2.getNumeroRecibo() + 1;
        numeroReciboTxt.setText(String.valueOf(numeroDeRecibo2));
        clienteABuscarTxt.setText(clienteSeleccionado.getCodigo());
        nombreClienteTxt.setText(clienteSeleccionado.getRazonSocial());
        saldoDeudor1 = clienteSeleccionado.getSaldo();
        saldoDeudor2 = clienteSeleccionado2.getSaldo();
        Double saldoTotal = saldoDeudor1 + saldoDeudor2;
        saldoUnoTxt.setText(String.valueOf(df.format(saldoDeudor1)));
        saldoDosTxt.setText(String.valueOf(df.format(saldoDeudor2)));
        saldoDeudorTxt.setText(String.valueOf(df.format(saldoTotal)));
        importePagadoTxt.requestFocus();
        puede = true;
    }

    private void cobrar2(Cliente cli, Date feD, Date feH) {
        if (!importePagadoTxt.getText().isEmpty()) {
            importePagado = Double.valueOf(importePagadoTxt.getText());
            if (importePagado > 0.0) {
                String imprt = String.valueOf(df.format(Double.valueOf(importePagadoTxt.getText())));
                int confirma = JOptionPane.showConfirmDialog(this, "PAGO REALIZADO:" + "\n" + nombreClienteTxt.getText() + "\n $ " + imprt, "PAGO", JOptionPane.YES_NO_OPTION);
                //int confirma = JOptionPane.showConfirmDialog(this, "PAGO " + nombreClienteTxt.getText() + importePagadoTxt.getText(), "PAGO", JOptionPane.YES_NO_OPTION);
                // 0 = si; 1 = no
                if (confirma == 0) {
                    Double importeDeudor1 = clienteSeleccionado.getSaldo();
                    Double importeDeudor2 = clienteSeleccionado2.getSaldo();
                    int grabaDos = 0;
                    if (importePagado > importeDeudor2) {
                        if (importeDeudor2 > 0.00) {
                            clienteSeleccionado2.setSaldo(0.00);
                            clienteSeleccionado.setSaldo(importeDeudor1 - importePagado + importeDeudor2);
                            saldoDeudor1 = saldoDeudor1 - importePagado + saldoDeudor2;
                            saldoDeudor2 = 0.00;
                            grabaDos = 1;
                        } else {
                            clienteSeleccionado.setSaldo(importeDeudor1 - importePagado);
                            saldoDeudor1 = saldoDeudor1 - importePagado;
                            grabaDos = -1;
                        }
                    } else {
                        clienteSeleccionado2.setSaldo(saldoDeudor2 - importePagado);
                        saldoDeudor2 -= importePagado;
                        grabaDos = 0;
                    }
                    try {
                        conf1 = new ConfiguracionService().getFacturas(1L);
                        conf2 = new RoutinesService().getFacturas(1L);
                    } catch (Exception ex) {
                        Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (grabaDos == 1) {
                        numeroDeRecibo1 = conf1.getNumeroRecibo();
                        numeroDeRecibo2 = conf2.getNumeroRecibo();
                        numeroDeRecibo1 += 1;
                        numeroDeRecibo2 += 2;
                        conf1.setNumeroRecibo(numeroDeRecibo1);
                        conf2.setNumeroRecibo(numeroDeRecibo2);
                    } else {
                        if (grabaDos == 0) {
                            numeroDeRecibo2 = conf2.getNumeroRecibo();
                            numeroDeRecibo2 += 2;
                            conf2.setNumeroRecibo(numeroDeRecibo2);
                        } else {
                            numeroDeRecibo1 = conf1.getNumeroRecibo();
                            numeroDeRecibo1 += 1;
                            conf1.setNumeroRecibo(numeroDeRecibo1);
                        }
                    }
                    try {
                        new ConfiguracionService().updateConfiguracion(conf1);
                        new RoutinesService().updateRoutines(conf2);
                    } catch (Exception ex) {
                        Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        new CustomerService().updateCustomer(clienteSeleccionado2);
                        new ClienteService().updateCliente(clienteSeleccionado);
                    } catch (Exception ex) {
                        Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    limpiarCampos();
                    Recibo rc = new Recibo();
                    Payment pa = new Payment();
                    rc.setFecha(fecha);
                    pa.setFecha(fecha);
                    if (grabaDos == 1) {
                        pa.setImporte(importeDeudor2);
                        pa.setNumero(numeroDeRecibo2);
                        pa.setCliente(clienteSeleccionado2);
                        rc.setImporte(importePagado - importeDeudor2);
                        rc.setNumero(numeroDeRecibo1);
                        rc.setCliente(clienteSeleccionado);
                        try {
                            rc = new ReciboService().saveRecibo(rc);
                            pa = new PaymentService().savePayment(pa);
                        } catch (Exception ex) {
                            Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        if (grabaDos == 0) {
                            pa.setImporte(importePagado);
                            pa.setNumero(numeroDeRecibo2);
                            pa.setCliente(clienteSeleccionado2);
                            try {
                                pa = new PaymentService().savePayment(pa);
                            } catch (Exception ex) {
                                Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            rc.setImporte(importePagado);
                            rc.setNumero(numeroDeRecibo1);
                            rc.setCliente(clienteSeleccionado);
                            try {
                                rc = new ReciboService().saveRecibo(rc);
                            } catch (Exception ex) {
                                Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    CtaCteCliente cta = new CtaCteCliente();
                    Inventory cuenta = new Inventory();
                    if (grabaDos == 1) {
                        cuenta.setFecha(fecha);
                        cuenta.setDebe(0.0);
                        cuenta.setHaber(pa.getImporte());
                        cuenta.setSaldo(saldoDeudor2);
                        cuenta.setCliente(clienteSeleccionado2);
                        cuenta.setTipo("RC");
                        cuenta.setRecibo(pa);
                        cuenta.setFactura(null);
                        cuenta.setNotaCredito(null);
                        try {
                            new InventoryService().saveInventory(cuenta);
                        } catch (Exception ex) {
                            Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        cta.setFecha(fecha);
                        cta.setDebe(0.0);
                        cta.setHaber(rc.getImporte());
                        cta.setSaldo(saldoDeudor1);
                        cta.setCliente(clienteSeleccionado);
                        cta.setTipo("RC");
                        cta.setRecibo(rc);
                        cta.setFactura(null);
                        cta.setNotaCredito(null);
                        try {
                            new CtaCteClienteService().saveCtaCteCliente(cta);
                        } catch (Exception ex) {
                            Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        if (grabaDos == 0) {
                            cuenta.setFecha(fecha);
                            cuenta.setDebe(0.0);
                            cuenta.setHaber(pa.getImporte());
                            cuenta.setSaldo(saldoDeudor2);
                            cuenta.setCliente(clienteSeleccionado2);
                            cuenta.setTipo("RC");
                            cuenta.setRecibo(pa);
                            cuenta.setFactura(null);
                            cuenta.setNotaCredito(null);
                            try {
                                new InventoryService().saveInventory(cuenta);
                            } catch (Exception ex) {
                                Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            cta.setFecha(fecha);
                            cta.setDebe(0.0);
                            cta.setHaber(importePagado);
                            cta.setSaldo(saldoDeudor1);
                            cta.setCliente(clienteSeleccionado);
                            cta.setTipo("RC");
                            cta.setRecibo(rc);
//                            cta.setFactura(null);
//                            cta.setNotaCredito(null);
                            try {
                                new CtaCteClienteService().saveCtaCteCliente(cta);
                            } catch (Exception ex) {
                                Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Proceso de Cobro Cancelado");
                }
            }
            VerCuentaCorrienteClienteFrame mf = new VerCuentaCorrienteClienteFrame(cli, feD, feH, puede, frame);
            mf.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un importe para realizar cobranza");
        }
    }

    private void cobrar(Cliente clienteSel, Date fechaDe, Date fechaHasta) {
        String codigo = clienteSel.getCodigo();
        try {
            clienteSeleccionado = new ClienteService().getClienteByCodigo(codigo);
            clienteSeleccionado2 = new CustomerService().getCustomerByCodigo(codigo);
        } catch (Exception ex) {
            Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 639");
            return;
        }
        String c = clienteSeleccionado.getCodigo();
        ClienteTraba ct = null;
        CustomerTraba cuTr = null;
        try {
            ct = new ClienteTrabaService().getClienteByCodigo(c);
            cuTr = new CustomerTrabaService().getClienteByCodigo(c);
        } catch (Exception ex) {
            Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ct.getTraba1() != null) {
            if (ct.getTraba1()) {
                JOptionPane.showMessageDialog(this, "Cliente Bloqueado para esta operación");
                return;
            }
        }
        if (cuTr.getTraba2() != null) {
            if (cuTr.getTraba2()) {
                JOptionPane.showMessageDialog(this, "Cliente Bloqueado para esta operación");
                return;
            }
        }
        saldoDeudor1 = rint(clienteSeleccionado.getSaldo() * 100) / 100;
        saldoDeudor2 = rint(clienteSeleccionado2.getSaldo() * 100) / 100;
        if (!importePagadoTxt.getText().isEmpty()) {
            String imprt = String.valueOf(df.format(Double.valueOf(importePagadoTxt.getText())));
            int confirma = JOptionPane.showConfirmDialog(this, "PAGO REALIZADO:" + "\n" + nombreClienteTxt.getText() + "\n $ " + imprt, "PAGO", JOptionPane.YES_NO_OPTION);
            //int confirma = JOptionPane.showConfirmDialog(this, "PAGO " + nombreClienteTxt.getText() + importePagadoTxt.getText(), "PAGO", JOptionPane.YES_NO_OPTION);
            // 0 = si; 1 = no
            if (confirma == 0) {
                Double pago = rint(Double.valueOf(importePagadoTxt.getText()) * 100) / 100;
                if (pago > 0.00) {
                    if (pago > saldoDeudor2) {
                        Double totalDeuda = saldoDeudor1 + saldoDeudor2;
                        if (pago > totalDeuda) {
                            if (saldoDeudor1 == 0.00) {
                                Double pago2 = pago;
                                clienteSeleccionado2.setSaldo(saldoDeudor2 - pago2);
                                try {
                                    new CustomerService().updateCustomer(clienteSeleccionado2);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 663");
                                    return;
                                }
                                Routines rt = null;
                                try {
                                    rt = new RoutinesService().getFacturas(1L);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 671");
                                    return;
                                }
                                int num = rt.getNumeroRecibo() + 1;
                                rt.setNumeroRecibo(num);
                                try {
                                    new RoutinesService().updateRoutines(rt);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 680");
                                    return;
                                }
                                Payment py = new Payment();
                                py.setCliente(clienteSeleccionado2);
                                py.setFecha(fecha);
                                py.setImporte(pago2);
                                py.setNumero(num);
                                try {
                                    py = new PaymentService().savePayment(py);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 692");
                                    return;
                                }
                                Inventory inv = new Inventory();
                                inv.setCliente(clienteSeleccionado2);
                                inv.setDebe(0.00);
                                inv.setFactura(null);
                                inv.setFecha(fecha);
                                inv.setHaber(pago2);
                                inv.setNotaCredito(null);
                                inv.setRecibo(py);
                                inv.setSaldo(saldoDeudor2 - pago2);
                                inv.setTipo("RC");
                                try {
                                    new InventoryService().saveInventory(inv);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 709");
                                    return;
                                }
                                JOptionPane.showMessageDialog(this, "Proceso de Cobro Realizado");
                                VerCuentaCorrienteClienteFrame mf = new VerCuentaCorrienteClienteFrame(clienteSeleccionado, fechaDe, fechaHasta, puede, frame);
                                mf.setVisible(true);
                                this.dispose();
                            } else {
                                Double pago1 = saldoDeudor1;
                                Double pago2 = pago - saldoDeudor1;
                                clienteSeleccionado.setSaldo(0.00);
                                try {
                                    new ClienteService().updateCliente(clienteSeleccionado);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 724");
                                    return;
                                }
                                Configuracion cf = null;
                                try {
                                    cf = new ConfiguracionService().getFacturas(1L);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 732");
                                    return;
                                }
                                int nume = cf.getNumeroRecibo() + 1;
                                cf.setNumeroRecibo(nume);
                                try {
                                    new ConfiguracionService().updateConfiguracion(cf);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 741");
                                    return;
                                }
                                Recibo rc = new Recibo();
                                rc.setCliente(clienteSeleccionado);
                                rc.setFecha(fecha);
                                rc.setImporte(pago1);
                                rc.setNumero(nume);
                                try {
                                    rc = new ReciboService().saveRecibo(rc);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 753");
                                    return;
                                }
                                CtaCteCliente cct = new CtaCteCliente();
                                cct.setCliente(clienteSeleccionado);
                                cct.setDebe(0.00);
                                cct.setFactura(null);
                                cct.setFecha(fecha);
                                cct.setHaber(pago1);
                                cct.setNotaCredito(null);
                                cct.setRecibo(rc);
                                cct.setSaldo(0.00);
                                cct.setTipo("RC");
                                try {
                                    new CtaCteClienteService().saveCtaCteCliente(cct);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 770");
                                    return;
                                }
                                clienteSeleccionado2.setSaldo(saldoDeudor2 - pago2);
                                try {
                                    new CustomerService().updateCustomer(clienteSeleccionado2);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 7789");
                                    return;
                                }
                                Routines rt = null;
                                try {
                                    rt = new RoutinesService().getFacturas(1L);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 786");
                                    return;
                                }
                                int num = rt.getNumeroRecibo() + 1;
                                rt.setNumeroRecibo(num);
                                try {
                                    new RoutinesService().updateRoutines(rt);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 793");
                                    return;
                                }
                                Payment py = new Payment();
                                py.setCliente(clienteSeleccionado2);
                                py.setFecha(fecha);
                                py.setImporte(pago2);
                                py.setNumero(num);
                                try {
                                    py = new PaymentService().savePayment(py);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 807");
                                    return;
                                }
                                Inventory inv = new Inventory();
                                inv.setCliente(clienteSeleccionado2);
                                inv.setDebe(0.00);
                                inv.setFactura(null);
                                inv.setFecha(fecha);
                                inv.setHaber(pago2);
                                inv.setNotaCredito(null);
                                inv.setRecibo(py);
                                inv.setSaldo(saldoDeudor2 - pago2);
                                inv.setTipo("RC");
                                try {
                                    new InventoryService().saveInventory(inv);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 824");
                                    return;
                                }
                                JOptionPane.showMessageDialog(this, "Proceso de Cobro Realizado");
                                VerCuentaCorrienteClienteFrame mf = new VerCuentaCorrienteClienteFrame(clienteSeleccionado, fechaDe, fechaHasta, puede, frame);
                                mf.setVisible(true);
                                this.dispose();
                            }
                        } else {
                            if (saldoDeudor2 == 0.00) {
                                Double pago1 = pago;
                                clienteSeleccionado.setSaldo(saldoDeudor1 - pago1);
                                try {
                                    new ClienteService().updateCliente(clienteSeleccionado);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 840");
                                    return;
                                }
                                Configuracion cf = null;
                                try {
                                    cf = new ConfiguracionService().getFacturas(1L);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 848");
                                    return;
                                }
                                int nume = cf.getNumeroRecibo() + 1;
                                cf.setNumeroRecibo(nume);
                                try {
                                    new ConfiguracionService().updateConfiguracion(cf);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 857");
                                    return;
                                }
                                Recibo rc = new Recibo();
                                rc.setCliente(clienteSeleccionado);
                                rc.setFecha(fecha);
                                rc.setImporte(pago1);
                                rc.setNumero(nume);
                                try {
                                    rc = new ReciboService().saveRecibo(rc);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 869");
                                    return;
                                }
                                CtaCteCliente cct = new CtaCteCliente();
                                cct.setCliente(clienteSeleccionado);
                                cct.setDebe(0.00);
                                cct.setFactura(null);
                                cct.setFecha(fecha);
                                cct.setHaber(pago1);
                                cct.setNotaCredito(null);
                                cct.setRecibo(rc);
                                cct.setSaldo(saldoDeudor1 - pago1);
                                cct.setTipo("RC");
                                try {
                                    new CtaCteClienteService().saveCtaCteCliente(cct);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 886");
                                    return;
                                }
                            } else {
                                Double pago1 = pago - saldoDeudor2;
                                Double pago2 = saldoDeudor2;
                                clienteSeleccionado.setSaldo(saldoDeudor1 - pago1);
                                clienteSeleccionado2.setSaldo(0.00);
                                try {
                                    new CustomerService().updateCustomer(clienteSeleccionado2);
                                    new ClienteService().updateCliente(clienteSeleccionado);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 897");
                                    return;
                                }
                                Routines rt = null;
                                try {
                                    rt = new RoutinesService().getFacturas(1L);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 905");
                                    return;
                                }
                                int num = rt.getNumeroRecibo() + 1;
                                rt.setNumeroRecibo(num);
                                try {
                                    new RoutinesService().updateRoutines(rt);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 914");
                                    return;
                                }
                                Payment py = new Payment();
                                py.setCliente(clienteSeleccionado2);
                                py.setFecha(fecha);
                                py.setImporte(pago2);
                                py.setNumero(num);
                                try {
                                    py = new PaymentService().savePayment(py);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 926");
                                    return;
                                }
                                Inventory inv = new Inventory();
                                inv.setCliente(clienteSeleccionado2);
                                inv.setDebe(0.00);
                                inv.setFactura(null);
                                inv.setFecha(fecha);
                                inv.setHaber(pago2);
                                inv.setNotaCredito(null);
                                inv.setRecibo(py);
                                inv.setSaldo(0.00);
                                inv.setTipo("RC");
                                try {
                                    new InventoryService().saveInventory(inv);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 943");
                                    return;
                                }
                                Configuracion cf = null;
                                try {
                                    cf = new ConfiguracionService().getFacturas(1L);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 959");
                                    return;
                                }
                                int nume = cf.getNumeroRecibo() + 1;
                                cf.setNumeroRecibo(nume);
                                try {
                                    new ConfiguracionService().updateConfiguracion(cf);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 968");
                                    return;
                                }
                                Recibo rc = new Recibo();
                                rc.setCliente(clienteSeleccionado);
                                rc.setFecha(fecha);
                                rc.setImporte(pago1);
                                rc.setNumero(nume);
                                try {
                                    rc = new ReciboService().saveRecibo(rc);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 980");
                                    return;
                                }
                                CtaCteCliente cct = new CtaCteCliente();
                                cct.setCliente(clienteSeleccionado);
                                cct.setDebe(0.00);
                                cct.setFactura(null);
                                cct.setFecha(fecha);
                                cct.setHaber(pago1);
                                cct.setNotaCredito(null);
                                cct.setRecibo(rc);
                                cct.setSaldo(saldoDeudor1 - pago1);
                                cct.setTipo("RC");
                                try {
                                    new CtaCteClienteService().saveCtaCteCliente(cct);
                                } catch (Exception ex) {
                                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                                    JOptionPane.showMessageDialog(this, "Error: 997");
                                    return;
                                }
                            }
                            JOptionPane.showMessageDialog(this, "Proceso de Cobro Realizado");
                            VerCuentaCorrienteClienteFrame mf = new VerCuentaCorrienteClienteFrame(clienteSeleccionado, fechaDe, fechaHasta, puede, frame);
                            mf.setVisible(true);
                            this.dispose();
                        }
                    } else {
                        clienteSeleccionado2.setSaldo(saldoDeudor2 - pago);
                        try {
                            new CustomerService().updateCustomer(clienteSeleccionado2);
                        } catch (Exception ex) {
                            Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Error: 1012");
                            return;
                        }
                        Routines rt = null;
                        try {
                            rt = new RoutinesService().getFacturas(1L);
                        } catch (Exception ex) {
                            Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Error: 1020");
                            return;
                        }
                        int num = rt.getNumeroRecibo() + 1;
                        rt.setNumeroRecibo(num);
                        try {
                            new RoutinesService().updateRoutines(rt);
                        } catch (Exception ex) {
                            Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Error: 1029");
                            return;
                        }
                        Payment py = new Payment();
                        py.setCliente(clienteSeleccionado2);
                        py.setFecha(fecha);
                        py.setImporte(pago);
                        py.setNumero(num);
                        try {
                            py = new PaymentService().savePayment(py);
                        } catch (Exception ex) {
                            Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Error: 1041");
                            return;
                        }
                        Inventory inv = new Inventory();
                        inv.setCliente(clienteSeleccionado2);
                        inv.setDebe(0.00);
                        inv.setFactura(null);
                        inv.setFecha(fecha);
                        inv.setHaber(pago);
                        inv.setNotaCredito(null);
                        inv.setRecibo(py);
                        inv.setSaldo(saldoDeudor2 - pago);
                        inv.setTipo("RC");
                        try {
                            new InventoryService().saveInventory(inv);
                        } catch (Exception ex) {
                            Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Error: 1058");
                            return;
                        }
                        JOptionPane.showMessageDialog(this, "Proceso de Cobro Realizado");
                        VerCuentaCorrienteClienteFrame mf = new VerCuentaCorrienteClienteFrame(clienteSeleccionado, fechaDe, fechaHasta, puede, frame);
                        mf.setVisible(true);
                        this.dispose();

                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se confirmo Cobranza");
                importePagadoTxt.setText("");
                importePagadoTxt.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un Importe");
            importePagadoTxt.setText("");
            importePagadoTxt.requestFocus();
        }
    }

    private void devolverEfectivo(Cliente clienteSel, Date fD, Date fH) {
        String codi = clienteSel.getCodigo();
        Cliente cliS = null;
        try {
            clienteSeleccionado2 = new CustomerService().getCustomerByCodigo(codi);
            cliS = new ClienteService().getClienteByCodigo(codi);
        } catch (Exception ex) {
            Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 1086");
            return;
        }
        ClienteTraba ct = null;
        CustomerTraba cuTr = null;
        try {
            ct = new ClienteTrabaService().getClienteByCodigo(codi);
            cuTr = new CustomerTrabaService().getClienteByCodigo(codi);
        } catch (Exception ex) {
            Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ct.getTraba1() != null) {
            if (ct.getTraba1()) {
                JOptionPane.showMessageDialog(this, "Cliente Bloqueado para esta operación");
                return;
            }
        }
        if (cuTr.getTraba2() != null) {
            if (cuTr.getTraba2()) {
                JOptionPane.showMessageDialog(this, "Cliente Bloqueado para esta operación");
                return;
            }
        }
        saldoDeudor2 = clienteSeleccionado2.getSaldo();
        if (saldoDeudor2 < 0.00) {
            if (!importePagadoTxt.getText().isEmpty()) {
                String imprt = String.valueOf(df.format(Double.valueOf(importePagadoTxt.getText())));
                int confirma = JOptionPane.showConfirmDialog(this, "DEVOLUCION A:" + "\n" + nombreClienteTxt.getText() + "\n $ " + imprt, "DEVOLUCION", JOptionPane.YES_NO_OPTION);
                if (confirma == 0) {
                    Double devuelto = Double.valueOf(importePagadoTxt.getText()) * - 1;
                    if (devuelto < saldoDeudor2) {
                        int escape = JOptionPane.showConfirmDialog(null, "Importe Devolución Mayor a Saldo - Continúa?", "Verifique!!!", JOptionPane.YES_NO_OPTION);
                        if (escape != 0) {
                            importePagadoTxt.setText("");
                            importePagadoTxt.requestFocus();
                            return;
                        }
                    }
                    saldoDeudor2 -= devuelto;
                    clienteSeleccionado2.setSaldo(saldoDeudor2);
                    try {
                        new CustomerService().updateCustomer(clienteSeleccionado2);
                    } catch (Exception ex) {
                        Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Routines rt = null;
                    try {
                        rt = new RoutinesService().getFacturas(1L);
                    } catch (Exception ex) {
                        Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "Error: 1117");
                        return;
                    }
                    int num = rt.getNumeroRecibo() + 1;
                    rt.setNumeroRecibo(num);
                    try {
                        new RoutinesService().updateRoutines(rt);
                    } catch (Exception ex) {
                        Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "Error: 1126");
                        return;
                    }
                    Payment py = new Payment();
                    py.setCliente(clienteSeleccionado2);
                    py.setFecha(fecha);
                    py.setImporte(devuelto);
                    py.setNumero(num);
                    try {
                        py = new PaymentService().savePayment(py);
                    } catch (Exception ex) {
                        Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "Error: 1138");
                        return;
                    }
                    Inventory inv = new Inventory();
                    inv.setCliente(clienteSeleccionado2);
                    inv.setDebe(-devuelto);
                    inv.setFactura(null);
                    inv.setFecha(fecha);
                    inv.setHaber(0.00);
                    inv.setNotaCredito(null);
                    inv.setRecibo(py);
                    inv.setSaldo(saldoDeudor2);
                    inv.setTipo("DV");
                    try {
                        new InventoryService().saveInventory(inv);
                    } catch (Exception ex) {
                        Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "Error: 1155");
                        return;
                    }
                    JOptionPane.showMessageDialog(this, "Proceso de Devolución Realizado");
                    VerCuentaCorrienteClienteFrame mf = new VerCuentaCorrienteClienteFrame(clienteSeleccionado, fechaDe, fechaHasta, puede, frame);
                    mf.setVisible(true);
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Devolución Rechazada");
                    importePagadoTxt.setText("");
                    importePagadoTxt.requestFocus();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar un Importe");
                importePagadoTxt.requestFocus();
            }
        } else {
            String imprt = String.valueOf(df.format(Double.valueOf(importePagadoTxt.getText())));
            int confirma = JOptionPane.showConfirmDialog(this, "DEVOLUCION A:" + "\n" + nombreClienteTxt.getText() + "\n $ " + imprt, "DEVOLUCION", JOptionPane.YES_NO_OPTION);
            if (confirma == 0) {
                Double devuelto = Double.valueOf(importePagadoTxt.getText()) * - 1;
                if (devuelto < saldoDeudor2) {
                    int escape = JOptionPane.showConfirmDialog(null, "Importe Devolución Mayor a Saldo - Continúa?", "Verifique!!!", JOptionPane.YES_NO_OPTION);
                    if (escape != 0) {
                        importePagadoTxt.setText("");
                        importePagadoTxt.requestFocus();
                        return;
                    }
                }
                saldoDeudor2 -= devuelto;
                clienteSeleccionado2.setSaldo(saldoDeudor2);
                try {
                    new CustomerService().updateCustomer(clienteSeleccionado2);
                } catch (Exception ex) {
                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                }
                Routines rt = null;
                try {
                    rt = new RoutinesService().getFacturas(1L);
                } catch (Exception ex) {
                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error: 1201");
                    return;
                }
                int num = rt.getNumeroRecibo() + 1;
                rt.setNumeroRecibo(num);
                try {
                    new RoutinesService().updateRoutines(rt);
                } catch (Exception ex) {
                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error: 1210");
                    return;
                }
                Payment py = new Payment();
                py.setCliente(clienteSeleccionado2);
                py.setFecha(fecha);
                py.setImporte(devuelto);
                py.setNumero(num);
                try {
                    py = new PaymentService().savePayment(py);
                } catch (Exception ex) {
                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error: 1222");
                    return;
                }
                Inventory inv = new Inventory();
                inv.setCliente(clienteSeleccionado2);
                inv.setDebe(-devuelto);
                inv.setFactura(null);
                inv.setFecha(fecha);
                inv.setHaber(0.00);
                inv.setNotaCredito(null);
                inv.setRecibo(py);
                inv.setSaldo(saldoDeudor2);
                inv.setTipo("DV");
                try {
                    new InventoryService().saveInventory(inv);
                } catch (Exception ex) {
                    Logger.getLogger(CobrarFrame1.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Error: 1239");
                    return;
                }
                JOptionPane.showMessageDialog(this, "Proceso de Devolución Realizado");
                VerCuentaCorrienteClienteFrame mf = new VerCuentaCorrienteClienteFrame(clienteSeleccionado, fechaDe, fechaHasta, puede, frame);
                mf.setVisible(true);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Devolución Rechazada");
                importePagadoTxt.setText("");
                importePagadoTxt.requestFocus();
            }
        }
    }

    private void volver() {
        VerCuentaCorrienteClienteFrame mf = new VerCuentaCorrienteClienteFrame(clienteSeleccionado, fechaDe, fechaHasta, puede, frame);
        mf.setVisible(true);
        this.dispose();
    }
}
