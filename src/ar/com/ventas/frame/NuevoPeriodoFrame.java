/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Periodo;
import ar.com.ventas.services.PeriodoService;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mario
 */
public class NuevoPeriodoFrame extends javax.swing.JFrame {

    private Periodo periodo;
    private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

    /**
     * Creates new form NuevoPeriodoFrame
     *
     * @param periodo
     */
    public NuevoPeriodoFrame(Periodo periodo) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        this.periodo = periodo;
        if (periodo != null) {
            llenarCampos();
        } else {
            limpiarCampos();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        abiertoChk = new javax.swing.JRadioButton();
        cerradoChk = new javax.swing.JRadioButton();
        desdeFechaTxt = new javax.swing.JTextField();
        hastaFechaTxt = new javax.swing.JTextField();
        detalleTxt = new javax.swing.JTextField();
        guardarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Detalle:");

        jLabel2.setText("Desde Fecha:");

        jLabel3.setText("Hasta Fecha:");

        abiertoChk.setText("Abierto");
        abiertoChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abiertoChkActionPerformed(evt);
            }
        });

        cerradoChk.setText("Cerrado");
        cerradoChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerradoChkActionPerformed(evt);
            }
        });

        desdeFechaTxt.setText("jTextField1");
        desdeFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                desdeFechaTxtKeyPressed(evt);
            }
        });

        hastaFechaTxt.setText("jTextField2");
        hastaFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hastaFechaTxtKeyPressed(evt);
            }
        });

        detalleTxt.setText("jTextField3");
        detalleTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                detalleTxtKeyPressed(evt);
            }
        });

        guardarBtn.setText("Guardar");
        guardarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(guardarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(abiertoChk)
                                    .addGap(18, 18, 18)
                                    .addComponent(cerradoChk))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18)
                                    .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(detalleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 38, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(detalleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(abiertoChk)
                    .addComponent(cerradoChk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarBtn)
                    .addComponent(volverBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBtnActionPerformed
        guardar();
        volver();
    }//GEN-LAST:event_guardarBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void abiertoChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abiertoChkActionPerformed
        abiertoChk.setSelected(true);
        cerradoChk.setSelected(false);
    }//GEN-LAST:event_abiertoChkActionPerformed

    private void cerradoChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerradoChkActionPerformed
        abiertoChk.setSelected(false);
        cerradoChk.setSelected(true);
    }//GEN-LAST:event_cerradoChkActionPerformed

    private void detalleTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_detalleTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!detalleTxt.getText().isEmpty()) {
                desdeFechaTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_detalleTxtKeyPressed

    private void desdeFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_desdeFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (desdeFechaTxt.getText().isEmpty()) {
                desdeFechaTxt.setText(sdf.format(new Date()));
                desdeFechaTxt.requestFocus();
            } else {
                int largo = desdeFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    desdeFechaTxt.setText(desdeFechaTxt.getText() + "/" + f);
                    hastaFechaTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        desdeFechaTxt.setText(desdeFechaTxt.getText() + an);
                        hastaFechaTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            desdeFechaTxt.setText("");
//                          request focus mismo campo
                            desdeFechaTxt.requestFocus();
                        } else {
                            String veinte = desdeFechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                desdeFechaTxt.requestFocus();
                            } else {
                                hastaFechaTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_desdeFechaTxtKeyPressed

    private void hastaFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hastaFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (hastaFechaTxt.getText().isEmpty()) {
                hastaFechaTxt.setText(sdf.format(new Date()));
                hastaFechaTxt.requestFocus();
            } else {
                int largo = hastaFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    hastaFechaTxt.setText(hastaFechaTxt.getText() + "/" + f);
                    guardar();
                    volver();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        hastaFechaTxt.setText(hastaFechaTxt.getText() + an);
                        guardar();
                        volver();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            hastaFechaTxt.setText("");
//                          request focus mismo campo
                            hastaFechaTxt.requestFocus();
                        } else {
                            String veinte = hastaFechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                hastaFechaTxt.requestFocus();
                            } else {
                                guardar();
                                volver();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_hastaFechaTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NuevoPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NuevoPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NuevoPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NuevoPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NuevoPeriodoFrame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton abiertoChk;
    private javax.swing.JRadioButton cerradoChk;
    private javax.swing.JTextField desdeFechaTxt;
    private javax.swing.JTextField detalleTxt;
    private javax.swing.JButton guardarBtn;
    private javax.swing.JTextField hastaFechaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarCampos() {
        detalleTxt.setText(periodo.getDetalle());
        desdeFechaTxt.setText(sdf.format(periodo.getDesdeFecha()));
        hastaFechaTxt.setText(sdf.format(periodo.getHastaFecha()));
        if (periodo.getCerrado()) {
            abiertoChk.setSelected(false);
            cerradoChk.setSelected(true);
        } else {
            abiertoChk.setSelected(true);
            cerradoChk.setSelected(false);
        }
    }

    private void limpiarCampos() {
        detalleTxt.setText("");
        desdeFechaTxt.setText("");
        hastaFechaTxt.setText("");
        abiertoChk.setSelected(true);
        cerradoChk.setSelected(false);
    }

    private void guardar() {
        if (validar()) {
            Boolean nuevo = false;
            if (periodo == null) {
                periodo = new Periodo();
                nuevo = true;
            }
            periodo.setDetalle(detalleTxt.getText());
            Date f = new Date();
            try {
                f = sdf.parse(desdeFechaTxt.getText());
            } catch (ParseException ex) {
                Logger.getLogger(NuevoPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            periodo.setDesdeFecha(f);
            try {
                f = sdf.parse(hastaFechaTxt.getText());
            } catch (ParseException ex) {
                Logger.getLogger(NuevoPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            periodo.setHastaFecha(f);
            if (cerradoChk.isSelected()) {
                periodo.setCerrado(true);
            } else {
                periodo.setCerrado(false);
            }
            Calendar cal = Calendar.getInstance();
            cal.setTime(f);
            int m = cal.get(Calendar.MONTH);
            int y = cal.get(Calendar.YEAR);
            periodo.setAnio(y);
            periodo.setMes(m);
            int op = JOptionPane.showConfirmDialog(this, "Confirma Guardar el Período?", "Atención", JOptionPane.YES_NO_OPTION);
            if (op == 0) {
                if (nuevo) {
                    try {
                        new PeriodoService().savePeriodo(periodo);
                    } catch (Exception ex) {
                        Logger.getLogger(NuevoPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    try {
                        new PeriodoService().updatePeriodo(periodo);
                    } catch (Exception ex) {
                        Logger.getLogger(NuevoPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    private void volver() {
        AbmPeriodosFrame apf = new AbmPeriodosFrame();
        apf.setVisible(true);
        this.dispose();
    }

    private boolean validar() {
        return true;
    }
}
