/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ComprobanteCompras;
import ar.com.ventas.entities.ConfiguracionProveedor;
import ar.com.ventas.entities.CuentaCorrienteProveedor;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.entities.RcCo;
import ar.com.ventas.entities.ReciboProveedor;
import ar.com.ventas.services.ComprobanteComprasService;
import ar.com.ventas.services.ConfiguracionProveedorService;
import ar.com.ventas.services.CuentaCorrienteProveedorService;
import ar.com.ventas.services.ProveedorService;
import ar.com.ventas.services.RcCoService;
import ar.com.ventas.services.ReciboProveedorService;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mario
 */
public class IngresarPagoAntiguedadFrame extends javax.swing.JFrame {

    private Proveedor proveedor;
    private DecimalFormat df = new DecimalFormat("#0.00");
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private Integer menu;

    /**
     * Creates new form IngresarPagoAntiguedadFrame
     */
    public IngresarPagoAntiguedadFrame(Proveedor p, Integer menu) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        this.proveedor = p;
        this.menu = menu;
        llenarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nombreProveedorTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        saldoTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        importeTxt = new javax.swing.JTextField();
        aplicarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        fechaTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Ingresar Pago Proveedor");

        jLabel1.setText("Proveedor:");

        nombreProveedorTxt.setText("PROVEEDOR");

        jLabel2.setText("Saldo:");

        saldoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        saldoTxt.setText("SALDO");

        jLabel3.setText("Importe del Pago:");

        importeTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        importeTxt.setText("PAGO");
        importeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                importeTxtKeyPressed(evt);
            }
        });

        aplicarBtn.setText("Aplicar");
        aplicarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Fecha:");

        fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaTxt.setText("FECHA");
        fechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaTxtKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(aplicarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(saldoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(nombreProveedorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(importeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nombreProveedorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(saldoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(importeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aplicarBtn)
                    .addComponent(volverBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aplicarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarBtnActionPerformed
        if (importeTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DEBE INGRESAR UN IMPORTE PARA APLICAR EL PAGO");
            return;
        }
        Double d = Double.valueOf(importeTxt.getText());
        if (d < 0.01) {
            JOptionPane.showMessageDialog(this, "INGRESE UN IMPORTE MAYOR PARA APLICAR EL PAGO");
            return;
        }
        List<ReciboProveedor> recibos = null;
        List<ComprobanteCompras> notasDeCredito = null;
        try {
            recibos = new ReciboProveedorService().getRecibosPorProveedorNoImputados(proveedor);
        } catch (Exception ex) {
            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (recibos != null && !recibos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tiene Comprobantes para Imputar");
            return;
        }
        try {
            notasDeCredito = new ComprobanteComprasService().getNotasCreditoImpagosByProveedor(proveedor);
        } catch (Exception ex) {
            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (notasDeCredito != null && !notasDeCredito.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tiene Comprobantes para Imputar");
            return;
        }
        int escape = JOptionPane.showConfirmDialog(null,
                "Confirma el pago de $" + importeTxt.getText(),
                "Atencion", JOptionPane.YES_NO_OPTION);
        if (escape == 0) {
            aplicar2();
        } else {
            importeTxt.setText("");
            importeTxt.requestFocus();
        }
    }//GEN-LAST:event_aplicarBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void importeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_importeTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (importeTxt.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "DEBE INGRESAR UN IMPORTE PARA APLICAR EL PAGO");
                return;
            }
            Double d = Double.valueOf(importeTxt.getText());
            if (d < 0.01) {
                JOptionPane.showMessageDialog(this, "INGRESE UN IMPORTE MAYOR PARA APLICAR EL PAGO");
                return;
            }
            List<ReciboProveedor> recibos = null;
            List<ComprobanteCompras> notasDeCredito = null;
            try {
                recibos = new ReciboProveedorService().getRecibosPorProveedorNoImputados(proveedor);
            } catch (Exception ex) {
                Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (recibos != null && !recibos.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Tiene Comprobantes para Imputar");
                return;
            }
            try {
                notasDeCredito = new ComprobanteComprasService().getNotasCreditoImpagosByProveedor(proveedor);
            } catch (Exception ex) {
                Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (notasDeCredito != null && !notasDeCredito.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Tiene Comprobantes para Imputar");
                return;
            }
            int escape = JOptionPane.showConfirmDialog(null,
                    "Confirma el pago de $" + importeTxt.getText(),
                    "Atencion", JOptionPane.YES_NO_OPTION);
            if (escape == 0) {
                aplicar();
            } else {
                importeTxt.setText("");
                importeTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_importeTxtKeyPressed

    private void fechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (fechaTxt.getText().isEmpty()) {
                fechaTxt.setText(sdf.format(new Date()));
                fechaTxt.requestFocus();
            } else {
                int largo = fechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    fechaTxt.setText(fechaTxt.getText() + "/" + f);
                    importeTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        fechaTxt.setText(fechaTxt.getText() + an);
                        importeTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            fechaTxt.setText("");
//                          request focus mismo campo
                            fechaTxt.requestFocus();
                        } else {
                            String veinte = fechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                fechaTxt.requestFocus();
                            } else {
                                importeTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_fechaTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IngresarPagoAntiguedadFrame(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aplicarBtn;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JTextField importeTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField nombreProveedorTxt;
    private javax.swing.JTextField saldoTxt;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarCampos() {
        nombreProveedorTxt.setText(proveedor.getRazonSocial());
        saldoTxt.setText(df.format(proveedor.getSaldo()));
        nombreProveedorTxt.setEditable(false);
        saldoTxt.setEditable(false);
        fechaTxt.setText(sdf.format(new Date()));
        importeTxt.setText("");
        importeTxt.requestFocus();
    }

    private void aplicar() {
        Date fecha = new Date();
        try {
            fecha = sdf.parse(fechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        ConfiguracionProveedor co = null;
        try {
            co = new ConfiguracionProveedorService().getFacturas(1l);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        int nrec = co.getNumeroReciboCompras() + 1;
        co.setNumeroReciboCompras(nrec);
        try {
            new ConfiguracionProveedorService().updateConfiguracion(co);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        String str1 = df.format(Double.valueOf(importeTxt.getText()));
        String str2 = df.format(Double.valueOf(saldoTxt.getText().replace(",", ".")));
        Double d1 = Double.valueOf(str1.replace(",", "."));
        Double d2 = Double.valueOf(str2.replace(",", "."));
        if (str1.equals(str2)) {
            proveedor.setSaldo(0.0);
            try {
                new ProveedorService().updateProveedor(proveedor);
            } catch (Exception ex) {
                Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            ReciboProveedor rp = new ReciboProveedor();
            rp.setProveedor(proveedor);
            rp.setImporte(d1);
            rp.setImporteImputado(d1);
            rp.setNumero(nrec);
            rp.setImputado(true);
            rp.setFecha(fecha);
            try {
                rp = new ReciboProveedorService().saveRecibo(rp);
            } catch (Exception ex) {
                Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            List<ComprobanteCompras> facturas = null;
            try {
                facturas = new ComprobanteComprasService().getComprobantesImpagosByProveedor(proveedor);
            } catch (Exception ex) {
                Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (facturas != null && !facturas.isEmpty()) {
                for (ComprobanteCompras fc : facturas) {
                    Double temp = 0.0;
                    if (fc.getPagado() != null) {
                        temp = fc.getTotal() - fc.getPagado();
                    } else {
                        temp = fc.getTotal();
                    }
                    fc.setEstaPago(true);
                    fc.setPagado(fc.getTotal());
                    try {
                        new ComprobanteComprasService().updateComprobante(fc);
                    } catch (Exception ex) {
                        Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    RcCo rco = new RcCo();
                    rco.setAnulado(false);
                    rco.setComprobanteCompras(fc);
                    rco.setImporteFc(temp);
                    rco.setImporteNc(0.0);
                    rco.setImporteRc(d1);
                    rco.setReciboProveedor(rp);
                    rco.setImputadoFc(temp);
                    rco.setImputadoNc(0.0);
                    rco.setImputadoRc(temp);
                    try {
                        new RcCoService().saveRecibo(rco);
                    } catch (Exception ex) {
                        Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                CuentaCorrienteProveedor ccp = new CuentaCorrienteProveedor();
                ccp.setProveedor(proveedor);
                ccp.setReciboProveedor(rp);
                ccp.setDebe(0.0);
                ccp.setFecha(fecha);
                ccp.setHaber(d1);
                ccp.setSaldo(0.0);
                try {
                    new CuentaCorrienteProveedorService().saveCtaCteProveedor(ccp);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            Calendar cal = Calendar.getInstance();
            cal.setTime(fecha);
            cal.add(Calendar.DATE, -365);
            Date fecha1 = cal.getTime();
            Date fecha2 = new Date();
            List<CuentaCorrienteProveedor> ccp1 = null;
            try {
                ccp1 = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(proveedor, fecha1, fecha2);
            } catch (Exception ex) {
                Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            Double sa = 0.0;
            int x = 0;
            for (CuentaCorrienteProveedor cc1 : ccp1) {
                if (x == 0) {
                    sa = cc1.getSaldo();
                    x = 1;
                } else {
                    sa += cc1.getDebe() - cc1.getHaber();
                    cc1.setSaldo(sa);
                    try {
                        new CuentaCorrienteProveedorService().updateCtaCteProveedor(cc1);
                    } catch (Exception ex) {
                        Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            JOptionPane.showMessageDialog(this, "Pago aplicado");
            CuentaCorrienteProveedorFrame ccpf = new CuentaCorrienteProveedorFrame(proveedor, menu);
            ccpf.setVisible(true);
            this.dispose();
        } else {
            if (d1 < d2) {
                // IMPORTE del pago MENOR AL SALDO
                proveedor.setSaldo(proveedor.getSaldo() - d1);
                try {
                    new ProveedorService().updateProveedor(proveedor);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                ReciboProveedor rp = new ReciboProveedor();
                rp.setFecha(fecha);
                rp.setImporte(d1);
                rp.setImporteImputado(d1);
                rp.setImputado(true);
                rp.setNumero(nrec);
                rp.setProveedor(proveedor);
                try {
                    rp = new ReciboProveedorService().saveRecibo(rp);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                CuentaCorrienteProveedor ccp = new CuentaCorrienteProveedor();
                ccp.setProveedor(proveedor);
                ccp.setReciboProveedor(rp);
                ccp.setDebe(0.0);
                ccp.setFecha(fecha);
                ccp.setHaber(d1);
                ccp.setSaldo(0.0);
                try {
                    new CuentaCorrienteProveedorService().saveCtaCteProveedor(ccp);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                Double cancelarHasta = d1;
                List<ComprobanteCompras> facturas = null;
                try {
                    new ConfiguracionProveedorService().updateConfiguracion(co);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    facturas = new ComprobanteComprasService().getComprobantesImpagosByProveedor(proveedor);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (facturas != null && !facturas.isEmpty()) {
                    for (ComprobanteCompras fc : facturas) {
                        Double df1 = 0.0;
                        if (fc.getPagado() != null) {
                            if (fc.getPagado() > 0.00) {
                                df1 = fc.getTotal() - fc.getPagado();
                            } else {
                                df1 = fc.getTotal();
                            }
                        } else {
                            df1 = fc.getTotal();
                        }
                        String pa1 = df.format(cancelarHasta);
                        String pa2 = df.format(df1);
                        Double dpa1 = Double.valueOf(pa1.replace(",", "."));
                        Double dpa2 = Double.valueOf(pa2.replace(",", "."));
                        if (pa1.equals(pa2)) {
                            fc.setPagado(fc.getTotal());
                            fc.setEstaPago(true);
                            try {
                                new ComprobanteComprasService().updateComprobante(fc);
                            } catch (Exception ex) {
                                Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            RcCo rcco = new RcCo();
                            rcco.setAnulado(false);
                            rcco.setComprobanteCompras(fc);
                            rcco.setImporteFc(df1);
                            rcco.setImporteNc(0.0);
                            rcco.setImporteRc(d1);
                            rcco.setReciboProveedor(rp);
                            rcco.setImputadoFc(df1);
                            rcco.setImputadoNc(0.0);
                            rcco.setImputadoRc(df1);
                            try {
                                new RcCoService().saveRecibo(rcco);
                            } catch (Exception ex) {
                                Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
//                            JOptionPane.showMessageDialog(this, "Pago aplicado");
                            break;
                        } else {
                            if (dpa1 > dpa2) {
                                fc.setPagado(fc.getTotal());
                                fc.setEstaPago(true);
                                try {
                                    new ComprobanteComprasService().updateComprobante(fc);
                                } catch (Exception ex) {
                                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                RcCo rcco = new RcCo();
                                rcco.setAnulado(false);
                                rcco.setComprobanteCompras(fc);
                                rcco.setImporteFc(fc.getTotal());
                                rcco.setImporteNc(0.0);
                                rcco.setImporteRc(d1);
                                rcco.setReciboProveedor(rp);
                                rcco.setImputadoFc(df1);
                                rcco.setImputadoNc(0.0);
                                rcco.setImputadoRc(df1);
                                try {
                                    new RcCoService().saveRecibo(rcco);
                                } catch (Exception ex) {
                                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                cancelarHasta -= df1;
                            } else {
                                fc.setPagado(dpa1);
                                fc.setEstaPago(false);
                                try {
                                    new ComprobanteComprasService().updateComprobante(fc);
                                } catch (Exception ex) {
                                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                RcCo rcco = new RcCo();
                                rcco.setAnulado(false);
                                rcco.setComprobanteCompras(fc);
                                rcco.setImporteFc(fc.getTotal());
                                rcco.setImporteNc(0.0);
                                rcco.setImporteRc(d1);
                                rcco.setReciboProveedor(rp);
                                rcco.setImputadoFc(dpa1);
                                rcco.setImputadoNc(0.0);
                                rcco.setImputadoRc(dpa1);
                                try {
                                    new RcCoService().saveRecibo(rcco);
                                } catch (Exception ex) {
                                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
//                                JOptionPane.showMessageDialog(this, "Pago aplicado");
                                break;
                            }
                        }
                    }
                }
            } else {
                // IMPORTE del pago MAYOR AL SALDO
                JOptionPane.showMessageDialog(this, "INGRESE PAGO JUSTO Y LUEGO GENERE UN ADELANTO");
                return;
            }
            Calendar cal = Calendar.getInstance();
            cal.setTime(fecha);
            cal.add(Calendar.DATE, -900);
            Date fecha1 = cal.getTime();
            Date fecha2 = new Date();
            List<CuentaCorrienteProveedor> ccp1 = null;
            try {
                ccp1 = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(proveedor, fecha1, fecha2);
            } catch (Exception ex) {
                Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            Double sa = 0.0;
            int x = 0;
            for (CuentaCorrienteProveedor cc1 : ccp1) {
                if (x == 0) {
                    sa = cc1.getSaldo();
                    x = 1;
                } else {
                    sa += cc1.getDebe() - cc1.getHaber();
                    cc1.setSaldo(sa);
                    try {
                        new CuentaCorrienteProveedorService().updateCtaCteProveedor(cc1);
                    } catch (Exception ex) {
                        Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            JOptionPane.showMessageDialog(this, "Pago aplicado");
            CuentaCorrienteProveedorFrame ccpf = new CuentaCorrienteProveedorFrame(proveedor, menu);
            ccpf.setVisible(true);
            this.dispose();
        }
    }

    private void volver() {
        CuentaCorrienteProveedorFrame ccpf = new CuentaCorrienteProveedorFrame(proveedor, menu);
        ccpf.setVisible(true);
        this.dispose();
    }

    private void aplicar2() {
        Date fecha;
        try {
            fecha = sdf.parse(fechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        ConfiguracionProveedor co;
        try {
            co = new ConfiguracionProveedorService().getFacturas(1L);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        int nrec = co.getNumeroReciboCompras() + 1;
        co.setNumeroReciboCompras(nrec);
//        try {
//            new ConfiguracionProveedorService().updateConfiguracion(co);
//        } catch (Exception ex) {
//            Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
        String str1 = df.format(Double.valueOf(importeTxt.getText().replace(",", ".")));
        String str2 = df.format(Double.valueOf(saldoTxt.getText().replace(",", ".")));
        Double d1 = Double.valueOf(str1.replace(",", "."));
        Double d2 = Double.valueOf(str2.replace(",", "."));
        if (str1.equals(str2)) {
//                                            SALDO COMPLETO
            proveedor.setSaldo(0.0);

            ReciboProveedor rp = new ReciboProveedor();
            rp.setProveedor(proveedor);
            rp.setImporte(d1);
            rp.setImporteImputado(d1);
            rp.setNumero(nrec);
            rp.setImputado(true);
            rp.setFecha(fecha);

            List<ComprobanteCompras> facturas;
            try {
                facturas = new ComprobanteComprasService().getComprobantesImpagosByProveedor(proveedor);
            } catch (Exception ex) {
                Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "VERIFIQUE NO ENCUENTRO FACTURAS PARA APLICAR PAGO");
                return;
            }
            List<RcCo> rco_list = new ArrayList<>();
            if (facturas != null && !facturas.isEmpty()) {
                for (ComprobanteCompras fc : facturas) {
                    Double temp;
                    if (fc.getPagado() != null) {
                        temp = fc.getTotal() - fc.getPagado();
                    } else {
                        temp = fc.getTotal();
                    }
                    fc.setEstaPago(true);
                    fc.setPagado(fc.getTotal());

                    RcCo rco = new RcCo();
                    rco.setAnulado(false);
                    rco.setComprobanteCompras(fc);
                    rco.setImporteFc(temp);
                    rco.setImporteNc(0.0);
                    rco.setImporteRc(d1);
                    rco.setReciboProveedor(rp);
                    rco.setImputadoFc(temp);
                    rco.setImputadoNc(0.0);
                    rco.setImputadoRc(temp);
                    rco_list.add(rco);
                }

            }
            CuentaCorrienteProveedor ccp = new CuentaCorrienteProveedor();
            ccp.setProveedor(proveedor);
            ccp.setReciboProveedor(rp);
            ccp.setDebe(0.0);
            ccp.setFecha(fecha);
            ccp.setHaber(d1);
            ccp.setSaldo(0.0);

            Boolean hay_lista = false;

            Date fecha2 = new Date();
            List<CuentaCorrienteProveedor> ccp1 = null;
            try {
                ccp1 = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(proveedor, fecha, fecha2);
            } catch (Exception ex) {
                Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            Double sa_ant;
            Double sa_act = 0.0;
            int x = 0;
//                                            Arreglar

            if (ccp1 != null && !ccp1.isEmpty()) {
                Date fe1 = ccp1.get(0).getFecha();
                hay_lista = true;
                for (CuentaCorrienteProveedor cc1 : ccp1) {
                    String f_1 = sdf.format(fe1);
                    String f_2 = sdf.format(cc1.getFecha());
                    if (!f_1.equals(f_2)) {
                        if (x == 0) {
                            sa_ant = cc1.getSaldo() - cc1.getDebe() + cc1.getHaber();
                            sa_act = sa_ant - d1;
                            ccp.setSaldo(sa_act);
                            x = 1;
                        } else {
                            sa_act += cc1.getDebe() - cc1.getHaber();
                            cc1.setSaldo(sa_act);
                        }
                    }
                }
            }
            try {
                if (x == 0) {
                    new CuentaCorrienteProveedorService().saveMovimientoCompletoCtaCteProveedorPorAntiguedadSL(ccp, rp, proveedor, co, rco_list, facturas);
                } else {
                    if (hay_lista) {
                        new CuentaCorrienteProveedorService()
                                .saveMovimientoCompletoCtaCteProveedorPorAntiguedad(ccp, 
                                        ccp1, rp, proveedor, co, rco_list, facturas);
                    } else {
                        new CuentaCorrienteProveedorService()
                                .saveMovimientoCompletoCtaCteProveedorPorAntiguedadSL(ccp, 
                                        rp, proveedor, co, rco_list, facturas);
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR CARGANDO EL PAGO");
                return;
            }
            JOptionPane.showMessageDialog(this, "Pago aplicado");
            CuentaCorrienteProveedorFrame ccpf = new CuentaCorrienteProveedorFrame(proveedor, menu);
            ccpf.setVisible(true);
            this.dispose();
        } else {
            if (d1 < d2) {
                // IMPORTE del pago MENOR AL SALDO
                Double saldoCalculado = proveedor.getSaldo() - d1;
                proveedor.setSaldo(saldoCalculado);
                ReciboProveedor rp = new ReciboProveedor();
                rp.setFecha(fecha);
                rp.setImporte(d1);
                rp.setImporteImputado(d1);
                rp.setImputado(true);
                rp.setNumero(nrec);
                rp.setProveedor(proveedor);
                CuentaCorrienteProveedor ccp = new CuentaCorrienteProveedor();
                ccp.setProveedor(proveedor);
                ccp.setReciboProveedor(rp);
                ccp.setDebe(0.0);
                ccp.setFecha(fecha);
                ccp.setHaber(d1);
                ccp.setSaldo(0.0);
                Double cancelarHasta = d1;
                List<ComprobanteCompras> facturas;
                try {
                    facturas = new ComprobanteComprasService().getComprobantesImpagosByProveedor(proveedor);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }
                List<RcCo> listaRcCo = new ArrayList<>();
                if (facturas != null && !facturas.isEmpty()) {
                    for (ComprobanteCompras fc : facturas) {
                        Double df1 = 0.0;
                        if (fc.getPagado() != null) {
                            if (fc.getPagado() > 0.00) {
                                if (cancelarHasta > (fc.getTotal() - fc.getPagado())) {
                                    df1 = fc.getTotal() - fc.getPagado();
                                    cancelarHasta -= df1;
                                } else {
                                    df1 = (fc.getTotal() - fc.getPagado()) - cancelarHasta;
                                    cancelarHasta = 0.0;
                                }
                            } else {
                                df1 = fc.getTotal();
                            }
                        } else {
                            if (cancelarHasta > fc.getTotal()) {
                                df1 = fc.getTotal();
                                cancelarHasta -= fc.getTotal();
                            } else {
                                df1 = fc.getTotal() - cancelarHasta;
                                cancelarHasta = 0.0;
                            }
                        }
                        String pa1 = df.format(cancelarHasta);
                        String pa2 = df.format(df1);
                        Double dpa1 = Double.valueOf(pa1.replace(",", "."));
                        Double dpa2 = Double.valueOf(pa2.replace(",", "."));
                        if (pa1.equals(pa2)) {
                            fc.setPagado(fc.getTotal());
                            fc.setEstaPago(true);
                            RcCo rcco = new RcCo();
                            rcco.setAnulado(false);
                            rcco.setComprobanteCompras(fc);
                            rcco.setImporteFc(df1);
                            rcco.setImporteNc(0.0);
                            rcco.setImporteRc(d1);
                            rcco.setReciboProveedor(rp);
                            rcco.setImputadoFc(df1);
                            rcco.setImputadoNc(0.0);
                            rcco.setImputadoRc(df1);
                            listaRcCo.add(rcco);
                            break;
                        } else {
                            if (dpa1 > dpa2) {
                                fc.setPagado(fc.getTotal());
                                fc.setEstaPago(true);
                                RcCo rcco = new RcCo();
                                rcco.setAnulado(false);
                                rcco.setComprobanteCompras(fc);
                                rcco.setImporteFc(fc.getTotal());
                                rcco.setImporteNc(0.0);
                                rcco.setImporteRc(d1);
                                rcco.setReciboProveedor(rp);
                                rcco.setImputadoFc(df1);
                                rcco.setImputadoNc(0.0);
                                rcco.setImputadoRc(df1);
                                listaRcCo.add(rcco);
                            } else {
                                fc.setPagado(dpa1);
                                fc.setEstaPago(false);
                                try {
                                    new ComprobanteComprasService().updateComprobante(fc);
                                } catch (Exception ex) {
                                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                RcCo rcco = new RcCo();
                                rcco.setAnulado(false);
                                rcco.setComprobanteCompras(fc);
                                rcco.setImporteFc(fc.getTotal());
                                rcco.setImporteNc(0.0);
                                rcco.setImporteRc(d1);
                                rcco.setReciboProveedor(rp);
                                rcco.setImputadoFc(dpa1);
                                rcco.setImputadoNc(0.0);
                                rcco.setImputadoRc(dpa1);
                                listaRcCo.add(rcco);
                                break;
                            }
                        }
                    }
                }
                Boolean hay_lista = false;
                Date fecha2 = new Date();
                List<CuentaCorrienteProveedor> ccp1 = null;
                try {
                    ccp1 = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(proveedor, fecha, fecha2);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                Double sa_ant;
                Double sa_act = 0.0;
                int x = 0;
                if (ccp1 != null && !ccp1.isEmpty()) {
                    Date fe1 = ccp1.get(0).getFecha();
                    hay_lista = true;
                    for (CuentaCorrienteProveedor cc1 : ccp1) {
                        String f_1 = sdf.format(fe1);
                        String f_2 = sdf.format(cc1.getFecha());
                        if (!f_1.equals(f_2)) {
                            if (x == 0) {
                                sa_ant = cc1.getSaldo() - cc1.getDebe() + cc1.getHaber();
                                sa_act = sa_ant - d1;
                                ccp.setSaldo(sa_act);
                                x = 1;
                            } else {
                                sa_act += cc1.getDebe() - cc1.getHaber();
                                cc1.setSaldo(sa_act);
                            }
                        }
                    }
                }
                try {
                    if (x == 0) {
                        ccp.setSaldo(saldoCalculado);
                        new CuentaCorrienteProveedorService()
                                .saveMovimientoCompletoCtaCteProveedorPorAntiguedadSL(ccp,
                                        rp, proveedor, co, listaRcCo, facturas);
                    } else {
                        if (hay_lista) {
                            new CuentaCorrienteProveedorService()
                                    .saveMovimientoCompletoCtaCteProveedorPorAntiguedad(ccp,
                                            ccp1, rp, proveedor, co, listaRcCo, facturas);
                        } else {
                            ccp.setSaldo(saldoCalculado);
                            new CuentaCorrienteProveedorService()
                                    .saveMovimientoCompletoCtaCteProveedorPorAntiguedadSL(ccp,
                                            rp, proveedor, co, listaRcCo, facturas);
                        }
                    }
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoAntiguedadFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR CARGANDO EL PAGO");
                    return;
                }
            } else {
                // IMPORTE del pago MAYOR AL SALDO
                JOptionPane.showMessageDialog(this, "INGRESE PAGO JUSTO Y LUEGO GENERE UN ADELANTO");
                return;
            }
            JOptionPane.showMessageDialog(this, "Pago aplicado");
            CuentaCorrienteProveedorFrame ccpf = new CuentaCorrienteProveedorFrame(proveedor, menu);
            ccpf.setVisible(true);
            this.dispose();
        }
    }
}
