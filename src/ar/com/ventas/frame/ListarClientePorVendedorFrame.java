/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.Vendedor;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.VendedorService;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class ListarClientePorVendedorFrame extends javax.swing.JFrame {

    private List<Vendedor> vendedores = null;
    private List<Cliente> clientes = null;
    private Vendedor v;

    /**
     * Creates new form ListarClientePorVendedorFrame
     */
    public ListarClientePorVendedorFrame(Vendedor v) {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        initComponents();
        this.v = v;
        llenarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboVendedores = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaClientesPorVendedor = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        cargarClientesBtn = new javax.swing.JButton();
        comisionesBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CLIENTES POR VENDEDOR");

        jLabel1.setText("Vendedor:");

        comboVendedores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboVendedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboVendedoresActionPerformed(evt);
            }
        });

        tablaClientesPorVendedor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Razón Social", "Activo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaClientesPorVendedor);
        if (tablaClientesPorVendedor.getColumnModel().getColumnCount() > 0) {
            tablaClientesPorVendedor.getColumnModel().getColumn(0).setPreferredWidth(60);
            tablaClientesPorVendedor.getColumnModel().getColumn(1).setPreferredWidth(300);
            tablaClientesPorVendedor.getColumnModel().getColumn(2).setPreferredWidth(40);
        }

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        cargarClientesBtn.setText("Cargar Clientes");
        cargarClientesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarClientesBtnActionPerformed(evt);
            }
        });

        comisionesBtn.setText("Comisiones");
        comisionesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comisionesBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboVendedores, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(cargarClientesBtn)
                        .addGap(18, 18, 18)
                        .addComponent(comisionesBtn)
                        .addGap(18, 18, 18)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboVendedores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cargarClientesBtn)
                    .addComponent(comisionesBtn)
                    .addComponent(volverBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboVendedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboVendedoresActionPerformed

    }//GEN-LAST:event_comboVendedoresActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void cargarClientesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarClientesBtnActionPerformed
        llenarTablaClientes();
    }//GEN-LAST:event_cargarClientesBtnActionPerformed

    private void comisionesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comisionesBtnActionPerformed
        comisiones();
    }//GEN-LAST:event_comisionesBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListarClientePorVendedorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListarClientePorVendedorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListarClientePorVendedorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListarClientePorVendedorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListarClientePorVendedorFrame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cargarClientesBtn;
    private javax.swing.JComboBox<String> comboVendedores;
    private javax.swing.JButton comisionesBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaClientesPorVendedor;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarCombo() {
        vendedores = null;
        try {
            vendedores = new VendedorService().getAllVendedores();
        } catch (Exception ex) {
            Logger.getLogger(ListarClientePorVendedorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (vendedores != null && !vendedores.isEmpty()) {
            comboVendedores.removeAllItems();
            comboVendedores.addItem("");
            for (Vendedor ve : vendedores) {
                comboVendedores.addItem(ve.getNombre());
            }
        }
        System.out.println(v);
        int a = 1;
        if (v != null) {
            for (Vendedor ve : vendedores) {
                if (ve.getId().equals(v.getId())) {
                    comboVendedores.setSelectedIndex(a);
                    break;
                }
                a += 1;
            }
            llenarTablaClientes();
        }
    }

    private void llenarTablaClientes() {
        int row = comboVendedores.getSelectedIndex() - 1;
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un vendedor");
            return;
        }
        Vendedor vendedor = vendedores.get(row);
        clientes = null;
        try {
            clientes = new ClienteService().getByVendedor(vendedor);
        } catch (Exception ex) {
            Logger.getLogger(ListarClientePorVendedorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (clientes != null && !clientes.isEmpty()) {
            limpiarTabla();
            DefaultTableModel tbl = (DefaultTableModel) tablaClientesPorVendedor.getModel();
            for (Cliente cli : clientes) {
                Object ob[] = new Object[3];
                ob[0] = cli.getCodigo();
                ob[1] = cli.getRazonSocial();
                if (cli.getActivo() != null) {
                    if (cli.getActivo()) {
                        ob[2] = "Activo";
                    } else {
                        ob[2] = "Inactivo";
                    }
                }
                tbl.addRow(ob);
            }
            tablaClientesPorVendedor.setModel(tbl);
        }
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void comisiones() {
        int row = comboVendedores.getSelectedIndex() - 1;
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un vendedor");
            return;
        }
        Vendedor vendedor = vendedores.get(row);
        ComisionesFrame cf = new ComisionesFrame(vendedor);
        cf.setVisible(true);
        this.dispose();
    }

    private void limpiarTabla() {
        int b = tablaClientesPorVendedor.getRowCount();
        if (b > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tablaClientesPorVendedor.getModel();
            for(int i = 0;i<b;i++){
                tbl.removeRow(0);
            }
            tablaClientesPorVendedor.setModel(tbl);
        }
    }
}
