/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ActivityRow;
import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.RenglonFactura;
import ar.com.ventas.entities.RenglonNotaCredito;
import ar.com.ventas.entities.Rental;
import ar.com.ventas.entities.StockVenta;
import ar.com.ventas.entities.SubRubro;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ActivityRowService;
import ar.com.ventas.services.ProductoService;
import ar.com.ventas.services.RenglonFacturaService;
import ar.com.ventas.services.RenglonNotaCreditoService;
import ar.com.ventas.services.RentalService;
import ar.com.ventas.services.SubRubroService;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Mario
 */
public class InformeStockComprasFrame extends javax.swing.JFrame {

    private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private List<SubRubro> rubros = null;
    private final DecimalFormat df = new DecimalFormat("#0.0");
    private List<StockVenta> listaStock = new ArrayList<>();

    /**
     * Creates new form InformeStockComprasFrame
     */
    public InformeStockComprasFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        limpiarCampos();
        llenarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        volverBtn = new javax.swing.JButton();
        buscarBtn = new javax.swing.JButton();
        filtroTxt = new javax.swing.JTextField();
        combo = new javax.swing.JComboBox<>();
        desdeTxt = new javax.swing.JTextField();
        hastaTxt = new javax.swing.JTextField();
        excelBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        quitarBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("INFORME STOCK PARA COMPRAS");

        jLabel1.setText("Nombre:");

        jLabel2.setText("Subrubro:");

        jLabel3.setText("De fecha:");

        jLabel4.setText("A fecha:");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        filtroTxt.setText("NOMBRE");

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        desdeTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        desdeTxt.setText("DESDE");
        desdeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                desdeTxtKeyPressed(evt);
            }
        });

        hastaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hastaTxt.setText("HASTA");
        hastaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hastaTxtKeyPressed(evt);
            }
        });

        excelBtn.setText("Excel");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO", "DETALLE", "STOCK", "TOTAL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(1).setPreferredWidth(300);
        }

        quitarBtn.setText("Quitar");
        quitarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(desdeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(hastaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                                .addComponent(quitarBtn)
                                .addGap(18, 18, 18)
                                .addComponent(buscarBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(combo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(volverBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(excelBtn, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(volverBtn)
                    .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(buscarBtn)
                    .addComponent(desdeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hastaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(excelBtn)
                    .addComponent(quitarBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        buscar();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void desdeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_desdeTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            desde();
        }
    }//GEN-LAST:event_desdeTxtKeyPressed

    private void hastaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hastaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            hasta();
        }
    }//GEN-LAST:event_hastaTxtKeyPressed

    private void quitarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitarBtnActionPerformed
        quitar();
    }//GEN-LAST:event_quitarBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InformeStockComprasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InformeStockComprasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InformeStockComprasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InformeStockComprasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InformeStockComprasFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarBtn;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JTextField desdeTxt;
    private javax.swing.JButton excelBtn;
    private javax.swing.JTextField filtroTxt;
    private javax.swing.JTextField hastaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton quitarBtn;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void buscar() {
        limpiarTabla();
        listaStock = new ArrayList<>();
        Date fd, fa = new Date();
        try {
            fd = sdf.parse(desdeTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
            desdeTxt.requestFocus();
            return;
        }
        try {
            fa = sdf.parse(hastaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CuentaCorrienteProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
            hastaTxt.requestFocus();
            return;
        }
        if (!filtroTxt.getText().isEmpty()) {
            int row = combo.getSelectedIndex();
            if (row > 0) {
                llenarTabla(fd, fa);
            } else {
                llenarTabla1(fd, fa);
            }
        }else{
            llenarTabla2(fd, fa);
        }
    }

    private void excel() {
        String rutaArchivo = "c:/informes/informe_stock_compras.xls";
        File archivo = new File(rutaArchivo);
        if (archivo.exists()) {
            archivo.delete();
        }
        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableWorkbook libro = null;
        try {
            libro = Workbook.createWorkbook(archivo);
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableSheet hoja1 = libro.createSheet("STOCK", 0);
        try {
            hoja1.addCell(new jxl.write.Label(0, 0, "Distribuidora A&M - INFORME STOCK COMPRAS " + sdf.format(new Date())));
            hoja1.addCell(new jxl.write.Label(0, 1, "CODIGO"));
            hoja1.addCell(new jxl.write.Label(1, 1, "DETALLE"));
            hoja1.addCell(new jxl.write.Label(2, 1, "STOCK"));
            hoja1.addCell(new jxl.write.Label(3, 1, "TOTAL"));
            int y = 2;
            for (StockVenta s : listaStock) {
                hoja1.addCell(new jxl.write.Label(0, y, s.getCodigo().toString()));
                hoja1.addCell(new jxl.write.Label(1, y, s.getDetalle()));
                hoja1.addCell(new jxl.write.Number(2, y, s.getStock()));
                hoja1.addCell(new jxl.write.Number(3, y, s.getCantidad()));
                y += 1;
            }
        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error configurando Excel");
        }
        try {
            libro.write();
            libro.close();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 379");
        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 380");
        }
        JOptionPane.showMessageDialog(this, "Excel creado correctamente");
        JOptionPane.showMessageDialog(this, "Buscarlo en C:/informes/informe_stock_compras.xls");
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void hasta() {
        if (hastaTxt.getText().isEmpty()) {
            hastaTxt.setText(sdf.format(new Date()));
            hastaTxt.requestFocus();
        } else {
            int largo = hastaTxt.getText().length();
            if (largo == 2) {
                Calendar cal = Calendar.getInstance();
                int mes = cal.get(Calendar.MONTH) + 1;
                int anio = cal.get(Calendar.YEAR);
                String an = String.valueOf(anio);
                String f = "0" + String.valueOf(mes);
                if (f.length() > 2) {
                    f = f.substring(1, 3);
                }
                f = f + "/" + an;
                hastaTxt.setText(hastaTxt.getText() + "/" + f);
                buscar();
            } else {
                if (largo == 5) {
                    Calendar cal = Calendar.getInstance();
                    int anio = cal.get(Calendar.YEAR);
                    String an = "/" + String.valueOf(anio);
                    hastaTxt.setText(hastaTxt.getText() + an);
                    buscar();
                } else {
                    if (largo != 10) {
                        JOptionPane.showMessageDialog(this, "Error en fecha");
                        hastaTxt.setText("");
//                          request focus mismo campo
                        hastaTxt.requestFocus();
                    } else {
                        String veinte = hastaTxt.getText().substring(6, 8);
                        if (!veinte.equals("20")) {
                            JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                            hastaTxt.requestFocus();
                        } else {
                            buscar();
                        }
                    }
                }
            }

        }
    }

    private void desde() {
        if (desdeTxt.getText().isEmpty()) {
            desdeTxt.setText(sdf.format(new Date()));
            desdeTxt.requestFocus();
        } else {
            int largo = desdeTxt.getText().length();
            if (largo == 2) {
                Calendar cal = Calendar.getInstance();
                int mes = cal.get(Calendar.MONTH) + 1;
                int anio = cal.get(Calendar.YEAR);
                String an = String.valueOf(anio);
                String f = "0" + String.valueOf(mes);
                if (f.length() > 2) {
                    f = f.substring(1, 3);
                }
                f = f + "/" + an;
                desdeTxt.setText(desdeTxt.getText() + "/" + f);
                hastaTxt.requestFocus();
            } else {
                if (largo == 5) {
                    Calendar cal = Calendar.getInstance();
                    int anio = cal.get(Calendar.YEAR);
                    String an = "/" + String.valueOf(anio);
                    desdeTxt.setText(desdeTxt.getText() + an);
                    hastaTxt.requestFocus();
                } else {
                    if (largo != 10) {
                        JOptionPane.showMessageDialog(this, "Error en fecha");
                        desdeTxt.setText("");
//                          request focus mismo campo
                        desdeTxt.requestFocus();
                    } else {
                        String veinte = desdeTxt.getText().substring(6, 8);
                        if (!veinte.equals("20")) {
                            JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                            desdeTxt.requestFocus();
                        } else {
                            hastaTxt.requestFocus();
                        }
                    }
                }
            }
        }
    }

    private void limpiarCampos() {
        filtroTxt.setText("");
        desdeTxt.setText("");
        hastaTxt.setText("");
        combo.removeAllItems();
        combo.addItem("");
    }

    private void limpiarTabla() {
        int row = tabla.getRowCount();
        if (row > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int i = 0; i < row; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }

    private void llenarTabla(Date fd, Date fa) {
        List<Producto> productos = null;
        String filtro = filtroTxt.getText();
        int row = combo.getSelectedIndex();
        SubRubro rub = rubros.get(row - 1);
        try {
            productos = new ProductoService().getProductosActivosByFiltroAndSubRubro(filtro, rub);
        } catch (Exception ex) {
            Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (productos != null && !productos.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (Producto p : productos) {
                StockVenta sv = new StockVenta();
                List<RenglonFactura> rf = null;
                try {
                    rf = new RenglonFacturaService().getRenglonesFcByFechasAndProducto(fd, fa, p);
                } catch (Exception ex) {
                    Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                Float tov = 0.0F;
                int ye = 0;
                if (rf != null && !rf.isEmpty()) {
                    for (RenglonFactura r : rf) {
                        tov += r.getCantidad();
                        ye = 1;
                    }
                }
                List<ActivityRow> ar = null;
                try {
                    ar = new ActivityRowService().getRowByFechaAndProducto(fd, fa, p);
                } catch (Exception ex) {
                    Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (ar != null && !ar.isEmpty()) {
                    for (ActivityRow a : ar) {
                        tov += a.getCantidad();
                        ye = 1;
                    }
                }
                List<RenglonNotaCredito> rn = null;
                try {
                    rn = new RenglonNotaCreditoService().getRenglonesNCByFechasAndProducto(fd, fa, p);
                } catch (Exception ex) {
                    Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (rn != null && !rn.isEmpty()) {
                    for (RenglonNotaCredito rnc : rn) {
                        tov -= rnc.getCantidad();
                        ye = 1;
                    }
                }
                List<Rental> rd = null; // renglon devolución
                try {
                    rd = new RentalService().getRenglonesDevolByFechasAndProducto(fd, fa, p);
                } catch (Exception ex) {
                    Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (rd != null && !rd.isEmpty()) {
                    for (Rental rt : rd) {
                        tov -= rt.getCantidad();
                        ye = 1;
                    }
                }
                if (ye > 0) {
                    sv.setCodigo(p.getCodigo());
                    sv.setDetalle(p.getDetalle());
                    sv.setCantidad(tov);
                    sv.setStock(p.getStock());
                    listaStock.add(sv);
                    Object o[] = new Object[4];
                    o[0] = sv.getCodigo();
                    o[1] = sv.getDetalle();
                    o[2] = sv.getStock();
                    o[3] = sv.getCantidad();
                    tbl.addRow(o);
                }
            }
            tabla.setModel(tbl);
        }
    }

    private void llenarCombo() {
        try {
            rubros = new SubRubroService().getAllSubRubros();
        } catch (Exception ex) {
            Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (rubros != null && !rubros.isEmpty()) {
            for (SubRubro r : rubros) {
                combo.addItem(r.getDetalle());
            }
        }
    }

    private void quitar() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            return;
        }
        listaStock.remove(row);
        llenar2();
    }

    private void llenar2() {
        limpiarTabla();
        if (!listaStock.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (StockVenta s : listaStock) {
                Object o[] = new Object[4];
                o[0] = s.getCodigo();
                o[1] = s.getDetalle();
                o[2] = s.getStock();
                o[3] = s.getCantidad();
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void llenarTabla1(Date fd, Date fa) {
        List<Producto> productos = null;
        String filtro = filtroTxt.getText();
        try {
            productos = new ProductoService().getProductosActivosByFiltroDetalle(filtro);
        } catch (Exception ex) {
            Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (productos != null && !productos.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (Producto p : productos) {
                StockVenta sv = new StockVenta();
                List<RenglonFactura> rf = null;
                try {
                    rf = new RenglonFacturaService().getRenglonesFcByFechasAndProducto(fd, fa, p);
                } catch (Exception ex) {
                    Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                Float tov = 0.0F;
                int ye = 0;
                if (rf != null && !rf.isEmpty()) {
                    for (RenglonFactura r : rf) {
                        tov += r.getCantidad();
                        ye = 1;
                    }
                }
                List<ActivityRow> ar = null;
                try {
                    ar = new ActivityRowService().getRowByFechaAndProducto(fd, fa, p);
                } catch (Exception ex) {
                    Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (ar != null && !ar.isEmpty()) {
                    for (ActivityRow a : ar) {
                        tov += a.getCantidad();
                        ye = 1;
                    }
                }
                List<RenglonNotaCredito> rn = null;
                try {
                    rn = new RenglonNotaCreditoService().getRenglonesNCByFechasAndProducto(fd, fa, p);
                } catch (Exception ex) {
                    Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (rn != null && !rn.isEmpty()) {
                    for (RenglonNotaCredito rnc : rn) {
                        tov -= rnc.getCantidad();
                        ye = 1;
                    }
                }
                List<Rental> rd = null; // renglon devolución
                try {
                    rd = new RentalService().getRenglonesDevolByFechasAndProducto(fd, fa, p);
                } catch (Exception ex) {
                    Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (rd != null && !rd.isEmpty()) {
                    for (Rental rt : rd) {
                        tov -= rt.getCantidad();
                        ye = 1;
                    }
                }
                if (ye > 0) {
                    sv.setCodigo(p.getCodigo());
                    sv.setDetalle(p.getDetalle());
                    sv.setCantidad(tov);
                    sv.setStock(p.getStock());
                    listaStock.add(sv);
                    Object o[] = new Object[4];
                    o[0] = sv.getCodigo();
                    o[1] = sv.getDetalle();
                    o[2] = sv.getStock();
                    o[3] = sv.getCantidad();
                    tbl.addRow(o);
                }
            }
            tabla.setModel(tbl);
        }
    }

    private void llenarTabla2(Date fd, Date fa) {
        List<Producto> productos = null;
        int row = combo.getSelectedIndex();
        SubRubro rub = rubros.get(row - 1);
        try {
            productos = new ProductoService().getProductosActivosBySubRubro(rub);
        } catch (Exception ex) {
            Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (productos != null && !productos.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (Producto p : productos) {
                StockVenta sv = new StockVenta();
                List<RenglonFactura> rf = null;
                try {
                    rf = new RenglonFacturaService().getRenglonesFcByFechasAndProducto(fd, fa, p);
                } catch (Exception ex) {
                    Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                Float tov = 0.0F;
                int ye = 0;
                if (rf != null && !rf.isEmpty()) {
                    for (RenglonFactura r : rf) {
                        tov += r.getCantidad();
                        ye = 1;
                    }
                }
                List<ActivityRow> ar = null;
                try {
                    ar = new ActivityRowService().getRowByFechaAndProducto(fd, fa, p);
                } catch (Exception ex) {
                    Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (ar != null && !ar.isEmpty()) {
                    for (ActivityRow a : ar) {
                        tov += a.getCantidad();
                        ye = 1;
                    }
                }
                List<RenglonNotaCredito> rn = null;
                try {
                    rn = new RenglonNotaCreditoService().getRenglonesNCByFechasAndProducto(fd, fa, p);
                } catch (Exception ex) {
                    Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (rn != null && !rn.isEmpty()) {
                    for (RenglonNotaCredito rnc : rn) {
                        tov -= rnc.getCantidad();
                        ye = 1;
                    }
                }
                List<Rental> rd = null; // renglon devolución
                try {
                    rd = new RentalService().getRenglonesDevolByFechasAndProducto(fd, fa, p);
                } catch (Exception ex) {
                    Logger.getLogger(InformeStockComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (rd != null && !rd.isEmpty()) {
                    for (Rental rt : rd) {
                        tov -= rt.getCantidad();
                        ye = 1;
                    }
                }
                if (ye > 0) {
                    sv.setCodigo(p.getCodigo());
                    sv.setDetalle(p.getDetalle());
                    sv.setCantidad(tov);
                    sv.setStock(p.getStock());
                    listaStock.add(sv);
                    Object o[] = new Object[4];
                    o[0] = sv.getCodigo();
                    o[1] = sv.getDetalle();
                    o[2] = sv.getStock();
                    o[3] = sv.getCantidad();
                    tbl.addRow(o);
                }
            }
            tabla.setModel(tbl);
        }
    }
}
