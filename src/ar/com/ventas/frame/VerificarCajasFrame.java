/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Activity;
import ar.com.ventas.entities.CtaCteCliente;
import ar.com.ventas.entities.Inventory;
import ar.com.ventas.entities.IvaVentas;
import ar.com.ventas.entities.Routines;
import ar.com.ventas.entities.Stores;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ActivityService;
import ar.com.ventas.services.CtaCteClienteService;
import ar.com.ventas.services.InventoryService;
import ar.com.ventas.services.IvaVentasService;
import ar.com.ventas.services.RoutinesService;
import ar.com.ventas.services.StoreService;
import java.awt.Rectangle;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class VerificarCajasFrame extends javax.swing.JFrame {

    private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private final DecimalFormat df = new DecimalFormat("#0.00");
    private List<Stores> cajas = null;
    private Date de4;
    private Date al4;
    private Integer row4;

    /**
     * Creates new form VerificarCajasFrame
     *
     * @param de4
     * @param al4
     * @param row4
     */
    public VerificarCajasFrame(Date de4, Date al4, Integer row4) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        this.de4 = de4;
        this.al4 = al4;
        this.row4 = row4;
        limpiarCampos();
        if (de4 != null) {
            deTxt.setText(sdf.format(de4));
            alTxt.setText(sdf.format(al4));
            buscar2();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        deTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        alTxt = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        insertarBtn = new javax.swing.JButton();
        fechaTxt = new javax.swing.JTextField();
        editarBtn = new javax.swing.JButton();
        eliminarCierreBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("VERIFICAR CAJAS");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Fecha Anter.", "Fc CF", "Fc OF", "Deu CF Ant.", "Deu OF Ant.", "Subt. Arriba", "Inicial", "Deu CF Hoy", "Deu OF Hoy", "Dep Efect", "Vales", "Subt. Abajo", "Diferencia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Desde:");

        deTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deTxt.setText("DESDE");
        deTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Hasta:");

        alTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alTxt.setText("HASTA");
        alTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                alTxtKeyPressed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });
        buscarBtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                buscarBtnKeyPressed(evt);
            }
        });

        insertarBtn.setText("Insertar Fecha");
        insertarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertarBtnActionPerformed(evt);
            }
        });

        fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaTxt.setText("FECHA");
        fechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaTxtKeyPressed(evt);
            }
        });

        editarBtn.setText("Editar");
        editarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarBtnActionPerformed(evt);
            }
        });

        eliminarCierreBtn.setText("Eliminar Cierre");
        eliminarCierreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarCierreBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buscarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(insertarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarCierreBtn)
                        .addGap(18, 18, 18)
                        .addComponent(editarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 236, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(jLabel1)
                    .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarBtn)
                    .addComponent(insertarBtn)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editarBtn)
                    .addComponent(eliminarCierreBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        buscar();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void deTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (deTxt.getText().isEmpty()) {
                deTxt.setText(sdf.format(new Date()));
                deTxt.requestFocus();
            } else {
                int largo = deTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    deTxt.setText(deTxt.getText() + "/" + f);
                    alTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        deTxt.setText(deTxt.getText() + an);
                        alTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            deTxt.setText("");
                            deTxt.requestFocus();
                        } else {
                            String veinte = deTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
                                deTxt.requestFocus();
                            } else {
                                alTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_deTxtKeyPressed

    private void alTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (alTxt.getText().isEmpty()) {
                alTxt.setText(sdf.format(new Date()));
                alTxt.requestFocus();
            } else {
                int largo = alTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    alTxt.setText(alTxt.getText() + "/" + f);
                    buscarBtn.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        alTxt.setText(alTxt.getText() + an);
                        buscarBtn.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            alTxt.setText("");
                            alTxt.requestFocus();
                        } else {
                            String veinte = alTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
                                alTxt.requestFocus();
                            } else {
                                buscarBtn.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_alTxtKeyPressed

    private void buscarBtnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_buscarBtnKeyPressed
        if (evt.getKeyCode() == 10) {
            buscar();
        }
    }//GEN-LAST:event_buscarBtnKeyPressed

    private void fechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (fechaTxt.getText().isEmpty()) {
                fechaTxt.setText(sdf.format(new Date()));
                insertarBtn.requestFocus();
            } else {
                int largo = fechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    fechaTxt.setText(fechaTxt.getText() + "/" + f);
                    insertarBtn.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        fechaTxt.setText(fechaTxt.getText() + an);
                        insertarBtn.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            fechaTxt.setText("");
                            fechaTxt.requestFocus();
                        } else {
                            String veinte = fechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
                                fechaTxt.requestFocus();
                            } else {
                                insertarBtn.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_fechaTxtKeyPressed

    private void insertarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertarBtnActionPerformed
        if (!fechaTxt.getText().isEmpty()) {
            insertar();
        }
    }//GEN-LAST:event_insertarBtnActionPerformed

    private void editarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarBtnActionPerformed
        editar();
    }//GEN-LAST:event_editarBtnActionPerformed

    private void eliminarCierreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarCierreBtnActionPerformed
        eliminarCierre();
    }//GEN-LAST:event_eliminarCierreBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerificarCajasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerificarCajasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerificarCajasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerificarCajasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VerificarCajasFrame(null, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alTxt;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JTextField deTxt;
    private javax.swing.JButton editarBtn;
    private javax.swing.JButton eliminarCierreBtn;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JButton insertarBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void buscar() {
        cajas = null;
        limpiarTabla();
        Date f1 = new Date();
        Date f2 = new Date();
        try {
            f1 = sdf.parse(deTxt.getText());
            f2 = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(VerificarCajasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            cajas = new StoreService().getCajasEntreFechas(f1, f2);
        } catch (Exception ex) {
            Logger.getLogger(VerificarCajasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        de4 = f1;
        al4 = f2;
        if (cajas != null && !cajas.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (Stores ca : cajas) {
                Object o[] = new Object[14];
                o[0] = sdf.format(ca.getFecha());
                o[1] = sdf.format(ca.getFechaAnterior());
                o[2] = df.format(ca.getTotalFacturadoCf());
                o[3] = df.format(ca.getTotalFacturadoOf());
                o[4] = df.format(ca.getSaldoDeudorAnteriorCf());
                o[5] = df.format(ca.getSaldoDeudorAnteriorOf());
                o[6] = df.format(ca.getSubtotalArriba());
                o[7] = df.format(ca.getCajaInicial());
                o[8] = df.format(ca.getTotalDeudoresHoyCf());
                o[9] = df.format(ca.getTotalDeudoresHoyOf());
                o[10] = df.format(ca.getTotalDeposito());
                o[11] = df.format(ca.getTotalVales());
                o[12] = df.format(ca.getSubtotalAbajo());
                o[13] = df.format(ca.getDiferencia());
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void insertar() {
        Stores st = new Stores();
        Date f = new Date();
        try {
            f = sdf.parse(fechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(VerificarCajasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            st.setFecha(f);
            st.setFechaAnterior(sdf.parse(fechaTxt.getText()));
        } catch (ParseException ex) {
            Logger.getLogger(VerificarCajasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        List<Inventory> i = null;
        try {
            i = new InventoryService().getCtaCtePorFecha(f);

        } catch (Exception ex) {
            Logger.getLogger(VerificarCajasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Double d = 0.0;
        if (i != null && !i.isEmpty()) {
            int contar = 0;
            Long c = 0L;
            Double sal = 0.0;
            Double to = 0.0;
            for (Inventory in : i) {
                if (contar == 0) {
                    c = in.getCliente().getId();
                    sal = in.getSaldo();
                    contar += 1;
                } else {
                    if (in.getCliente().getId().equals(c)) {
                        sal = in.getSaldo();
                    } else {
                        to += sal;
                        sal = in.getSaldo();
                        c = in.getCliente().getId();
                    }
                }
            }
            to += sal;
            st.setTotalDeudoresHoyCf(to);
        }
        List<CtaCteCliente> cta = null;
        try {
            cta = new CtaCteClienteService().getCtaCteClienteByFecha(f);
        } catch (Exception ex) {
            Logger.getLogger(VerificarCajasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        d = 0.0;
        if (cta != null && !cta.isEmpty()) {
            int contar = 0;
            Long c = 0L;
            Double sal = 0.0;
            Double to = 0.0;
            for (CtaCteCliente in : cta) {
                if (contar == 0) {
                    c = in.getCliente().getId();
                    sal = in.getSaldo();
                    contar += 1;
                } else {
                    if (in.getCliente().getId().equals(c)) {
                        sal = in.getSaldo();
                    } else {
                        to += sal;
                        sal = in.getSaldo();
                        c = in.getCliente().getId();
                    }
                }
            }
            to += sal;
            st.setTotalDeudoresHoyOf(to);
        }
        List<IvaVentas> fc = null;
        try {
            fc = new IvaVentasService().getFactByFecha(f);
        } catch (Exception ex) {
            Logger.getLogger(VerificarCajasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Double to = 0.0;
        if (fc != null && !fc.isEmpty()) {
            for (IvaVentas fa : fc) {
                to += fa.getTotal();
            }
        }
        st.setTotalFacturadoOf(to);
        to = 0.0;
        List<Activity> ac = null;
        try {
            ac = new ActivityService().getFcByFecha(f);
        } catch (Exception ex) {
            Logger.getLogger(VerificarCajasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (Activity act : ac) {
            to += act.getTotal();
        }
        st.setTotalFacturadoCf(to);
        st.setSaldoDeudorAnteriorCf(0.0);
        st.setSaldoDeudorAnteriorOf(0.0);
        st.setSubtotalArriba(0.0);
        st.setSubtotalAbajo(0.0);
        st.setDiferencia(0.0);
        st.setCajaInicial(0.0);
        st.setTotalDeposito(0.0);
        st.setTotalVales(0.0);
        //    GRABAR
        try {
            new StoreService().saveMovimientoCaja(st);
        } catch (Exception ex) {
            Logger.getLogger(VerificarCajasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void limpiarCampos() {
        deTxt.setText("");
        alTxt.setText("");
        fechaTxt.setText("");
        deTxt.requestFocus();
    }

    private void editar() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "SELECCIONE UNA CAJA PARA EDITAR");
            return;
        }
        Stores sto = cajas.get(row);
        row4 = row;
        EditarCajaFrame ecf = new EditarCajaFrame(sto, de4, al4, row4);
        ecf.setVisible(true);
        this.dispose();
    }

    private void limpiarTabla() {
        int rows = tabla.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }

    private void buscar2() {
        cajas = null;
        limpiarTabla();
        Date f1 = de4;
        Date f2 = al4;
        try {
            cajas = new StoreService().getCajasEntreFechas(f1, f2);
        } catch (Exception ex) {
            Logger.getLogger(VerificarCajasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (cajas != null && !cajas.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (Stores ca : cajas) {
                Object o[] = new Object[14];
                o[0] = sdf.format(ca.getFecha());
                o[1] = sdf.format(ca.getFechaAnterior());
                o[2] = df.format(ca.getTotalFacturadoCf());
                o[3] = df.format(ca.getTotalFacturadoOf());
                o[4] = df.format(ca.getSaldoDeudorAnteriorCf());
                o[5] = df.format(ca.getSaldoDeudorAnteriorOf());
                o[6] = df.format(ca.getSubtotalArriba());
                o[7] = df.format(ca.getCajaInicial());
                o[8] = df.format(ca.getTotalDeudoresHoyCf());
                o[9] = df.format(ca.getTotalDeudoresHoyOf());
                o[10] = df.format(ca.getTotalDeposito());
                o[11] = df.format(ca.getTotalVales());
                o[12] = df.format(ca.getSubtotalAbajo());
                o[13] = df.format(ca.getDiferencia());
                tbl.addRow(o);
            }
            int nro = tabla.getRowCount();
            Rectangle rect = tabla.getCellRect(nro - 1, 0, true);
            tabla.scrollRectToVisible(rect);
            tabla.clearSelection();
            if (row4 != null) {
                if (row4 > nro) {
                    nro = row4 - 2;
                }
                tabla.setRowSelectionInterval(row4, row4);
            } else {
                row4 = 0;
            }
            tabla.setModel(tbl);
        }
    }

    private void eliminarCierre() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una caja para ELIMINAR CIERRE");
            return;
        }
        int a = JOptionPane.showConfirmDialog(this, "CONFIRME ELIMINAR CAJA",
                "Atención", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            Stores caja = cajas.get(row);
            Routines config = null;
            try {
                config = new RoutinesService().getFacturas(1L);
            } catch (Exception ex) {
                Logger.getLogger(VerificarCajasFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (config != null) {
                Date uf1 = config.getUltimaFechaCierre();
                Date uf2 = caja.getFecha();
                Date uf3 = caja.getFechaAnterior();
                String f1 = sdf.format(uf1);
                String f2 = sdf.format(uf2);
                System.out.println(uf1);
                System.out.println(uf2);
                System.out.println(uf3);
                System.out.println(f1.equals(f2));
                //System.exit(0);
                if(f1.equals(f2)){
                    config.setUltimaFechaCierre(uf3);
                    try {
                        new RoutinesService().updateRoutines(config);
                    } catch (Exception ex) {
                        Logger.getLogger(VerificarCajasFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                try {
                    new StoreService().deleteMovimientoCaja(caja);
                    buscar2();
                } catch (Exception ex) {
                    Logger.getLogger(VerificarCajasFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR PROCESANDO CAJAS");
                }
            }
        }
    }
}
