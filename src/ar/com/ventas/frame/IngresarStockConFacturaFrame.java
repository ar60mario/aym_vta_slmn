/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ContadorCpbteStock;
import ar.com.ventas.entities.CtaCteStock;
import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.ProductoStock;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.entities.Usuario;
import ar.com.ventas.frame.AbmStockFrame;
import ar.com.ventas.services.ContadorCpbteStockService;
import ar.com.ventas.services.CtaCteStockService;
import ar.com.ventas.services.ProductoService;
import ar.com.ventas.services.ProveedorService;
import ar.com.ventas.services.UsuarioService;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class IngresarStockConFacturaFrame extends javax.swing.JFrame {

    private Producto producto;
    private Proveedor proveedor = null;
    private final DecimalFormat df = new DecimalFormat("#0.0");
    private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private List<Proveedor> proveedores = null;
    private List<Producto> productos = null;
    private List<ProductoStock> stock = new ArrayList<>();
    private Integer linea = 0;
    private Usuario usuario;
    private final Integer nivel = 1;
    private final String fil;
    private final Boolean xNombre;

    /**
     * Creates new form IngresarStockFrame
     *
     *
     * @param u
     * @param fil
     * @param xNom
     */
    public IngresarStockConFacturaFrame(Usuario u, String fil, Boolean xNom) {
        initComponents();
        this.usuario = u;
        this.fil = fil;
        this.xNombre = xNom;
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        limpiarCampos();
        bloquearProducto();
        //habilitar();
        filtroTxt.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        codigoTxt = new javax.swing.JTextField();
        descripcionTxt = new javax.swing.JTextField();
        actualTxt = new javax.swing.JTextField();
        minimoTxt = new javax.swing.JTextField();
        cantidadTxt = new javax.swing.JTextField();
        ingresarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        filtroTxt = new javax.swing.JTextField();
        combo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        codigoProveedorTxt = new javax.swing.JTextField();
        nombreTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        sucursalTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        numeroTxt = new javax.swing.JTextField();
        nuevaBtn = new javax.swing.JButton();
        comboP = new javax.swing.JComboBox<>();
        busqProvBtn = new javax.swing.JButton();
        busqProdBtn = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        fechaTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        comboLetra = new javax.swing.JComboBox<>();
        cancelarBtn = new javax.swing.JButton();
        borrarItemBtn = new javax.swing.JButton();
        leerCantidadBtn = new javax.swing.JButton();
        nuevaCantidadTxt = new javax.swing.JTextField();
        guardarCantidadBtn = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        totalTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("INGRESAR A STOCK");

        codigoTxt.setText("CODIGO");
        codigoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoTxtKeyPressed(evt);
            }
        });

        descripcionTxt.setText("DESCRIPCION");

        actualTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        actualTxt.setText("ACTUAL");

        minimoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minimoTxt.setText("MINIMO");

        cantidadTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cantidadTxt.setText("CANTIDAD");
        cantidadTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cantidadTxtKeyPressed(evt);
            }
        });

        ingresarBtn.setText("Ingresar");
        ingresarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Bus.X Nombre:");

        jLabel2.setText("Descripción:");

        jLabel3.setText("Actual:");

        jLabel4.setText("Mínimo:");

        jLabel5.setText("Cantidad en Fc:");

        jLabel6.setText("Prov.Nombre:");

        filtroTxt.setText("FILTRO");
        filtroTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filtroTxtKeyPressed(evt);
            }
        });

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboActionPerformed(evt);
            }
        });
        combo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboKeyPressed(evt);
            }
        });

        jLabel7.setText("Nombre:");

        jLabel8.setText("Código:");

        codigoProveedorTxt.setText("CODIGO");

        nombreTxt.setText("NOMBRE");

        jLabel9.setText("Fc. Letra:");

        jLabel10.setText("Sucursal:");

        sucursalTxt.setText("SUC");
        sucursalTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sucursalTxtKeyPressed(evt);
            }
        });

        jLabel11.setText("Número:");

        numeroTxt.setText("NUM");
        numeroTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                numeroTxtKeyPressed(evt);
            }
        });

        nuevaBtn.setText("TERMINAR FACTURA");
        nuevaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevaBtnActionPerformed(evt);
            }
        });

        comboP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPActionPerformed(evt);
            }
        });
        comboP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboPKeyPressed(evt);
            }
        });

        busqProvBtn.setText("Buscar x Nombre");
        busqProvBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busqProvBtnActionPerformed(evt);
            }
        });

        busqProdBtn.setText("Buscar x Nombre");
        busqProdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                busqProdBtnActionPerformed(evt);
            }
        });

        jLabel12.setText("Fecha Comprobante:");

        fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaTxt.setText("FECHA");
        fechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaTxtKeyPressed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ORDEN", "COD", "DESCRIPCION", "CANTIDAD", "STOCK", "TOTAL", "MINIMO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        comboLetra.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "A", "C", "M", "B", "X" }));
        comboLetra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboLetraKeyPressed(evt);
            }
        });

        cancelarBtn.setText("CANCELAR FACTURA");
        cancelarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarBtnActionPerformed(evt);
            }
        });

        borrarItemBtn.setText("Borrar Item");
        borrarItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarItemBtnActionPerformed(evt);
            }
        });

        leerCantidadBtn.setText("Leer Cantidad");
        leerCantidadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leerCantidadBtnActionPerformed(evt);
            }
        });

        nuevaCantidadTxt.setText("Nue Can");
        nuevaCantidadTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nuevaCantidadTxtKeyPressed(evt);
            }
        });

        guardarCantidadBtn.setText("Guardar Cantidad");
        guardarCantidadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarCantidadBtnActionPerformed(evt);
            }
        });

        jLabel13.setText("Total:");

        totalTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totalTxt.setText("TOTAL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(35, 35, 35)
                                .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(busqProdBtn)
                                .addGap(18, 18, 18)
                                .addComponent(comboP, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(actualTxt)
                                            .addComponent(cantidadTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(ingresarBtn)
                                                .addGap(18, 18, 18)
                                                .addComponent(nuevaBtn)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cancelarBtn)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(borrarItemBtn)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel13))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(minimoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(leerCantidadBtn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(nuevaCantidadTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(guardarCantidadBtn))))
                                    .addComponent(descripcionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(totalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(codigoProveedorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(busqProvBtn))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(comboLetra, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sucursalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel11)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(numeroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(35, 35, 35)
                                        .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(volverBtn)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(busqProvBtn)
                    .addComponent(volverBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(codigoProveedorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(sucursalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(numeroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboLetra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(comboP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(busqProdBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(descripcionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(borrarItemBtn)
                    .addComponent(jLabel13)
                    .addComponent(totalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(actualTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(minimoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leerCantidadBtn)
                    .addComponent(nuevaCantidadTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guardarCantidadBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cantidadTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ingresarBtn)
                    .addComponent(nuevaBtn)
                    .addComponent(cancelarBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ingresarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresarBtnActionPerformed
        if (!cantidadTxt.getText().isEmpty()) {
            borrarTabla();
            ingresar0();
            llenarTabla();
        }
    }//GEN-LAST:event_ingresarBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void cantidadTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cantidadTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!cantidadTxt.getText().isEmpty()) {
                borrarTabla();
                ingresar0();
                llenarTabla();
            }
        }
    }//GEN-LAST:event_cantidadTxtKeyPressed

    private void filtroTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            buscarProve();
        }
    }//GEN-LAST:event_filtroTxtKeyPressed

    private void comboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboKeyPressed
        if (evt.getKeyCode() == 10) {
            cargarProveedor();
        }
    }//GEN-LAST:event_comboKeyPressed

    private void sucursalTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sucursalTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!sucursalTxt.getText().isEmpty()) {
                if (combo.getSelectedIndex() < 1) {
                    combo.requestFocus();
                }
                numeroTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_sucursalTxtKeyPressed

    private void numeroTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numeroTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!numeroTxt.getText().isEmpty()) {
                int r = comboLetra.getSelectedIndex();
                if (r > 0) {
//                    bloquearProveedor();
//                    desbloquearProducto();
                    fechaTxt.requestFocus();
//                    codigoTxt.requestFocus();
                } else {
                    comboLetra.requestFocus();
                }
            }
        }
    }//GEN-LAST:event_numeroTxtKeyPressed

    private void codigoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            llenarComboProductos();
        }
    }//GEN-LAST:event_codigoTxtKeyPressed

    private void busqProvBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busqProvBtnActionPerformed
        buscarProve();
    }//GEN-LAST:event_busqProvBtnActionPerformed

    private void comboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboActionPerformed
        if (evt.getModifiers() == 16) {
            int r = combo.getSelectedIndex();
            if (r > 0) {
                cargarProveedor();
            }
        }
    }//GEN-LAST:event_comboActionPerformed

    private void comboPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboPKeyPressed
        if (evt.getKeyCode() == 10) {
            llenarFrame();
        }
    }//GEN-LAST:event_comboPKeyPressed

    private void comboPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPActionPerformed
        if (evt.getModifiers() == 16) {
            int r = comboP.getSelectedIndex();
            if (r > 0) {
                llenarFrame();
            }
        }
    }//GEN-LAST:event_comboPActionPerformed

    private void nuevaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevaBtnActionPerformed
        if (!stock.isEmpty()) {
            ingresar();
        }
    }//GEN-LAST:event_nuevaBtnActionPerformed

    private void cancelarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarBtnActionPerformed
        cancelar();
    }//GEN-LAST:event_cancelarBtnActionPerformed

    private void comboLetraKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboLetraKeyPressed
        if (evt.getKeyCode() == 10) {
            int r = comboLetra.getSelectedIndex();
            if (r > 0) {
                sucursalTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_comboLetraKeyPressed

    private void leerCantidadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leerCantidadBtnActionPerformed
        int r = tabla.getSelectedRow();
        if (r < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un producto");
            return;
        }
        ProductoStock p = stock.get(r);
        nuevaCantidadTxt.setText(df.format(p.getCantidad()));
        nuevaCantidadTxt.requestFocus();
    }//GEN-LAST:event_leerCantidadBtnActionPerformed

    private void nuevaCantidadTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nuevaCantidadTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            nuevaCan();
        }
    }//GEN-LAST:event_nuevaCantidadTxtKeyPressed

    private void guardarCantidadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarCantidadBtnActionPerformed
        nuevaCan();
    }//GEN-LAST:event_guardarCantidadBtnActionPerformed

    private void borrarItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarItemBtnActionPerformed
        borrar();
    }//GEN-LAST:event_borrarItemBtnActionPerformed

    private void fechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!fechaTxt.getText().isEmpty()) {
                int r = comboLetra.getSelectedIndex();
                if (r > 0) {
                    bloquearProveedor();
                    desbloquearProducto();
                    codigoTxt.requestFocus();
                } else {
                    comboLetra.requestFocus();
                }
            }
        }
    }//GEN-LAST:event_fechaTxtKeyPressed

    private void busqProdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_busqProdBtnActionPerformed
        llenarComboProductos();
    }//GEN-LAST:event_busqProdBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IngresarStockConFacturaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IngresarStockConFacturaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IngresarStockConFacturaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngresarStockConFacturaFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IngresarStockConFacturaFrame(null, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField actualTxt;
    private javax.swing.JButton borrarItemBtn;
    private javax.swing.JButton busqProdBtn;
    private javax.swing.JButton busqProvBtn;
    private javax.swing.JButton cancelarBtn;
    private javax.swing.JTextField cantidadTxt;
    private javax.swing.JTextField codigoProveedorTxt;
    private javax.swing.JTextField codigoTxt;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JComboBox<String> comboLetra;
    private javax.swing.JComboBox<String> comboP;
    private javax.swing.JTextField descripcionTxt;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JTextField filtroTxt;
    private javax.swing.JButton guardarCantidadBtn;
    private javax.swing.JButton ingresarBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton leerCantidadBtn;
    private javax.swing.JTextField minimoTxt;
    private javax.swing.JTextField nombreTxt;
    private javax.swing.JButton nuevaBtn;
    private javax.swing.JTextField nuevaCantidadTxt;
    private javax.swing.JTextField numeroTxt;
    private javax.swing.JTextField sucursalTxt;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField totalTxt;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarFrame() {
        int r = comboP.getSelectedIndex();
        if (r > 0) {
            producto = productos.get(r - 1);
        } else {
            return;
        }

        if (producto != null) {
            codigoTxt.setText(producto.getCodigo().toString());
            descripcionTxt.setText(producto.getDetalle());
            if (producto.getStock() != null) {
                actualTxt.setText(df.format(producto.getStock()));
            } else {
                actualTxt.setText(df.format(0.0));
            }
            if (producto.getStockMinimo() != null) {
                minimoTxt.setText(df.format(producto.getStockMinimo()));
            } else {
                minimoTxt.setText(df.format(0.0));
            }
            cantidadTxt.setText("");
            cantidadTxt.requestFocus();
            actualTxt.setEditable(false);
            codigoTxt.setEditable(false);
            descripcionTxt.setEditable(false);
            minimoTxt.setEditable(false);
        }
    }

    private void ingresar() {
        if (!stock.isEmpty()) {
            int op = JOptionPane.showConfirmDialog(null, "Confirma ingresar Stock?",
                    "ACTUALIZAR STOCK",
                    JOptionPane.YES_NO_OPTION);
            if (op == 0) {
                Integer co = 1;
                ContadorCpbteStock con = null;
                try {
                    con = new ContadorCpbteStockService().getFacturas(co);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarStockConFacturaFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                long nf = 0L;
                if (con != null) {
                    if (con.getComprobante() != null) {
                        nf = con.getComprobante() + 1;
                    } else {
                        nf += 1;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "ERROR por favor REINTENTE");
                    cantidadTxt.requestFocus();
                    return;
                }
                con.setComprobante(nf);
                try {
                    new ContadorCpbteStockService().updateConfiguracion(con);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarStockConFacturaFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR por favor REINTENTE");
                    cantidadTxt.requestFocus();
                    return;
                }
                for (ProductoStock ps : stock) {
                    Float c = ps.getCantidad();
                    Float a;
                    Producto pr = null;
                    CtaCteStock ccs = new CtaCteStock();
                    try {
                        ccs.setFecha(sdf.parse(fechaTxt.getText()));
                    } catch (ParseException ex) {
                        Logger.getLogger(IngresarStockConFacturaFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    ccs.setFechaSistema(new Date());
                    try {
                        pr = new ProductoService().getProductoByCodigo(ps.getCodigo());
                    } catch (Exception ex) {
                        Logger.getLogger(IngresarStockConFacturaFrame.class.getName()).log(Level.SEVERE, null, ex);
                        return;
                    }
                    if (ps.getStock() != null) {
                        a = ps.getStock();
                    } else {
                        a = 0F;
                    }
                    if (pr.getStock() != null) {
                        a = pr.getStock();
                    } else {
                        a = 0F;
                    }
                    a += c;
                    pr.setStock(a);
                    ccs.setCantidad(c);
                    ccs.setLetra(comboLetra.getSelectedItem().toString());
                    ccs.setSucursal(Integer.valueOf(sucursalTxt.getText()));
                    ccs.setNumero(Integer.valueOf(numeroTxt.getText()));
                    ccs.setProducto(pr);
                    ccs.setProveedor(proveedor);
                    ccs.setComprobante(nf);
                    ccs.setUsuario(usuario);
                    try {
                        new ProductoService().updateProducto(pr);
                        new CtaCteStockService().saveCtaCteStock(ccs);
                    } catch (Exception ex) {
                        Logger.getLogger(IngresarStockConFacturaFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                JOptionPane.showMessageDialog(this, "Stock actualizado");
                limpiarProd();
                habilitarProveedor();
                bloquearProducto();
                borrarTabla();
                stock = new ArrayList<ProductoStock>();
                limpiarCampos();
                filtroTxt.requestFocus();
            } else {
                codigoTxt.requestFocus();
            }
        }
    }

    private void volver() {
        AbmStockFrame mf = new AbmStockFrame(usuario, fil, xNombre);
        mf.setVisible(true);
        this.dispose();
    }

    private void limpiarCampos() {
        filtroTxt.setText("");
        fechaTxt.setText(sdf.format(new Date()));
        codigoProveedorTxt.setText("");
        nombreTxt.setText("");
        sucursalTxt.setText("");
        numeroTxt.setText("");
        codigoTxt.setText("");
        descripcionTxt.setText("");
        actualTxt.setText("");
        minimoTxt.setText("");
        cantidadTxt.setText("");
        nuevaCantidadTxt.setText("");
        totalTxt.setText("");
        combo.removeAllItems();
        combo.addItem("");
        comboP.removeAllItems();
        comboP.addItem("");
    }

    private void buscarProve() {
        if (usuario == null) {
            //habilitar();
        }
        if (usuario == null) {
            volver();
            return;
        }
        proveedores = null;
        String filtro = filtroTxt.getText();
        combo.removeAllItems();
        combo.addItem("");
        if (!filtro.isEmpty()) {
            try {
                proveedores = new ProveedorService().getProveedoresByFiltro(filtro);
            } catch (Exception ex) {
                Logger.getLogger(IngresarStockConFacturaFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (proveedores != null && !proveedores.isEmpty()) {
                for (Proveedor p : proveedores) {
                    combo.addItem(p.getCodigo() + " " + p.getRazonSocial());
                }
                combo.requestFocus();
                combo.addFocusListener(null);
                combo.showPopup();
            }

        }
    }

    private void cargarProveedor() {
        int row = combo.getSelectedIndex();
        if (row > 0) {
            proveedor = proveedores.get(row - 1);
            codigoProveedorTxt.setText(proveedor.getCodigo().toString());
            nombreTxt.setText(proveedor.getRazonSocial());
            comboLetra.requestFocus();
        }
    }

    private void llenarComboProductos() {
        if (codigoTxt.getText().isEmpty()) {
            return;
        }
        productos = null;
        try {
            productos = new ProductoService().getProductosByFiltro(codigoTxt.getText());
        } catch (Exception ex) {
            Logger.getLogger(IngresarStockConFacturaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (productos != null && !productos.isEmpty()) {
            comboP.removeAllItems();
            comboP.addItem("");
            for (Producto p : productos) {
                comboP.addItem(p.getCodigo() + " " + p.getDetalle());
            }
            comboP.requestFocus();
            comboP.addFocusListener(null);
            comboP.showPopup();
        }
    }

    private void limpiarProd() {
        codigoTxt.setText("");
        comboP.removeAllItems();
        comboP.addItem("");
        descripcionTxt.setText("");
        actualTxt.setText("");
        minimoTxt.setText("");
        cantidadTxt.setText("");
        nuevaCantidadTxt.setText("");
        comboLetra.setSelectedIndex(0);
        codigoTxt.setEditable(true);
    }

    private void bloquearProveedor() {
        volverBtn.setEnabled(false);
        filtroTxt.setEditable(false);
        codigoProveedorTxt.setEditable(false);
        nombreTxt.setEditable(false);
        comboLetra.setEnabled(false);
        sucursalTxt.setEditable(false);
        numeroTxt.setEditable(false);
        fechaTxt.setEditable(false);
    }

    private void habilitarProveedor() {
        filtroTxt.setEditable(true);
        volverBtn.setEnabled(true);
        codigoProveedorTxt.setEditable(true);
        nombreTxt.setEditable(true);
        comboLetra.setEnabled(true);
        sucursalTxt.setEditable(true);
        numeroTxt.setEditable(true);
        fechaTxt.setEditable(true);
    }

    private void bloquearProducto() {
        codigoTxt.setEditable(false);
        descripcionTxt.setEditable(false);
        minimoTxt.setEditable(false);
        actualTxt.setEditable(false);
        cantidadTxt.setEditable(false);
        ingresarBtn.setEnabled(false);
        nuevaBtn.setEnabled(false);
        cancelarBtn.setEnabled(false);
        leerCantidadBtn.setEnabled(false);
        guardarCantidadBtn.setEnabled(false);
        nuevaCantidadTxt.setEditable(false);
    }

    private void desbloquearProducto() {
        codigoTxt.setEditable(true);
        cantidadTxt.setEditable(true);
        ingresarBtn.setEnabled(true);
        nuevaBtn.setEnabled(true);
        cancelarBtn.setEnabled(true);
        leerCantidadBtn.setEnabled(true);
        guardarCantidadBtn.setEnabled(true);
        nuevaCantidadTxt.setEditable(true);
    }

    private void borrarTabla() {
        int row = tabla.getRowCount();
        if (row > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int i = 0; i < row; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }

    private void llenarTabla() {
        if (!stock.isEmpty()) {
            int ro = 0;
            Float t = 0.0F;
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (ProductoStock ps : stock) {
                Object o[] = new Object[7];
                ro += 1;
                ps.setOrden(ro);
                o[0] = ps.getOrden();
                o[1] = ps.getCodigo();
                o[2] = ps.getDetalle();
                o[3] = df.format(ps.getCantidad());
                t += ps.getCantidad();
                if (ps.getStock() != null) {
                    o[4] = df.format(ps.getStock());
                }
                if (ps.getTotal() != null) {
                    o[5] = df.format(ps.getTotal());
                }
                if (ps.getMinimo() != null) {
                    o[6] = df.format(ps.getMinimo());
                }
                tbl.addRow(o);
            }
            totalTxt.setText(df.format(t));
            tabla.setModel(tbl);
        }
    }

    private void ingresar0() {
        linea += 1;
        ProductoStock ps = new ProductoStock();
        ps.setOrden(linea);
        ps.setCodigo(producto.getCodigo());
        ps.setDetalle(producto.getDetalle());
        ps.setCantidad(Float.valueOf(cantidadTxt.getText()));
        ps.setStock(producto.getStock());
        if (producto.getStock() != null) {
            ps.setTotal(Float.valueOf(cantidadTxt.getText()) + producto.getStock());
        } else {
            ps.setTotal(Float.valueOf(cantidadTxt.getText()));
        }

        ps.setMinimo(producto.getStockMinimo());
        stock.add(ps);
        limpiarProd();
        codigoTxt.requestFocus();
    }

    private void cancelar() {
        int op = JOptionPane.showConfirmDialog(null, "Confirma ABANDONAR lo CARGADO?",
                "ANULAR STOCK",
                JOptionPane.YES_NO_OPTION);
        if (op == 0) {
//            AbmStockFrame abs = new AbmStockFrame();
//            abs.setVisible(true);
//            this.dispose();
            limpiarProd();
            habilitarProveedor();
            bloquearProducto();
            borrarTabla();
            stock = new ArrayList<ProductoStock>();
            limpiarCampos();
            filtroTxt.requestFocus();
        } else {
            codigoTxt.requestFocus();
        }
    }

    private void nuevaCan() {
        if (!nuevaCantidadTxt.getText().isEmpty()) {
            int r = tabla.getSelectedRow();
            ProductoStock ps = stock.get(r);
            Float nc = Float.valueOf(nuevaCantidadTxt.getText());
            ps.setCantidad(nc);
            Float to;
            if (ps.getStock() != null) {
                to = nc + ps.getStock();
            } else {
                to = 0F;
            }
            ps.setTotal(to);
            stock.set(r, ps);
            borrarTabla();
            llenarTabla();
            limpiarProd();
            codigoTxt.requestFocus();
        }
    }

    private void borrar() {
        int r = tabla.getSelectedRow();
        if (r < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Item");
            return;
        }
        int a = JOptionPane.showConfirmDialog(this, "Seguro eliminar el Item?", "Atención", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            stock.remove(r);
            borrarTabla();
            llenarTabla();
            limpiarProd();
            codigoTxt.requestFocus();
        }
    }

    private void habilitar() {
        usuario = null;
        JTextField field = new JTextField("");
        String[] options = {"Ingresar"};
        int result = JOptionPane.showOptionDialog(
                null,
                field,
                "Autorización de USUARIO",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                0);
        if (field.getText().isEmpty()) {
            usuario = null;
            JOptionPane.showMessageDialog(this, "No existe el Usuario");
            return;
        }
        switch (result) {
            case 0:
                int cod = Integer.valueOf(field.getText());
                try {
                    usuario = new UsuarioService().getUsuarioByCodigo(cod);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarStockConFacturaFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (usuario != null) {
                    int cla = usuario.getNivel();
                    if (usuario.getActivo()) {
//                        if (cla > nivel) {
//                            return;
//                        }
                        JPasswordField field2 = new JPasswordField("");
                        String[] opts = {"Ingresar"};
                        int resulta = JOptionPane.showOptionDialog(
                                null,
                                field2,
                                "CONTRASEÑA: " + usuario.getNombre() + ", Autorización",
                                JOptionPane.OK_CANCEL_OPTION,
                                JOptionPane.QUESTION_MESSAGE,
                                null,
                                opts,
                                0);
                        switch (resulta) {
                            case 0:
                                int contra = Integer.valueOf(new String(field2.getPassword()));
                                if (contra == usuario.getContrasena()) {
                                    if (usuario.getNivel() > nivel) {
                                        JOptionPane.showMessageDialog(this, "Usuario no Habilitado");
                                        usuario = null;
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "Contraseña incorrecta");
                                    usuario = null;
                                }
                                break;
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "USUARIO Inactivo");
                        usuario = null;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No existe el Usuario");
                    usuario = null;
                }
                break;
        }
    }
}
