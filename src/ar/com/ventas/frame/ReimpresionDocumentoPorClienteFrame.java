/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Activity;
import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.Customer;
import ar.com.ventas.entities.IvaVentas;
import ar.com.ventas.entities.Pedido;
import ar.com.ventas.entities.Request;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ActivityService;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.CustomerService;
import ar.com.ventas.services.IvaVentasService;
import ar.com.ventas.services.PedidoService;
import ar.com.ventas.services.RequestService;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class ReimpresionDocumentoPorClienteFrame extends javax.swing.JFrame {

    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private List<Request> pedidos = null;
    private List<Pedido> pedidosB = null;
    private List<Activity> presupuestos = null;
    private List<IvaVentas> facturas = null;
    private List<Cliente> clientes = null;
    private Cliente cl;

    /**
     * Creates new form ReimpresionFacturaFrame
     */
    public ReimpresionDocumentoPorClienteFrame(Cliente cl) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        this.setLocationRelativeTo(null);
        this.cl = cl;
        limpiarCampos();
        if (cl != null) {
            codigoClienteTxt.setText(cl.getCodigo());
            buscarClientePorCodigo();
        } else {
            codigoClienteTxt.requestFocus();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        codigoClienteTxt = new javax.swing.JTextField();
        volverBtn = new javax.swing.JButton();
        pedidoRb = new javax.swing.JCheckBox();
        presupuestoRb = new javax.swing.JCheckBox();
        buscarClientePorCodigoBtn = new javax.swing.JButton();
        nombreClienteTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        buscarClientePorNombreBtn = new javax.swing.JButton();
        comboClientes = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDocumentos = new javax.swing.JTable();
        verDocSeleccionadoBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        deFechaTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        aFechaTxt = new javax.swing.JTextField();
        devolucionRb = new javax.swing.JCheckBox();
        pedidoBcoRb = new javax.swing.JCheckBox();
        facturaBcoRb = new javax.swing.JCheckBox();
        notaCredBcoRb = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaDocBco = new javax.swing.JTable();
        verDocBcoBtn = new javax.swing.JButton();
        notaDebitoRb = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("REIMPRESION COMPROBANTES");

        jLabel1.setText("Código Cliente:");

        codigoClienteTxt.setText("COD CLIENTE");
        codigoClienteTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoClienteTxtKeyPressed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        pedidoRb.setText("Pedido");
        pedidoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pedidoRbActionPerformed(evt);
            }
        });

        presupuestoRb.setText("Presupuesto");
        presupuestoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presupuestoRbActionPerformed(evt);
            }
        });

        buscarClientePorCodigoBtn.setText("Buscar");
        buscarClientePorCodigoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarClientePorCodigoBtnActionPerformed(evt);
            }
        });

        nombreClienteTxt.setText("NOMB CLIENTE");
        nombreClienteTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreClienteTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Nombre Cliente:");

        buscarClientePorNombreBtn.setText("Buscar");
        buscarClientePorNombreBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarClientePorNombreBtnActionPerformed(evt);
            }
        });

        comboClientes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboClientesActionPerformed(evt);
            }
        });
        comboClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboClientesKeyPressed(evt);
            }
        });

        tablaDocumentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo Doc", "Número", "Total", "Fecha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaDocumentos);

        verDocSeleccionadoBtn.setText("Ver");
        verDocSeleccionadoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verDocSeleccionadoBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Desde fecha:");

        deFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deFechaTxt.setText("DE FECH");
        deFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deFechaTxtKeyPressed(evt);
            }
        });

        jLabel4.setText("Hasta fecha:");

        aFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        aFechaTxt.setText("A FECH");
        aFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aFechaTxtKeyPressed(evt);
            }
        });

        devolucionRb.setText("Devolución");
        devolucionRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devolucionRbActionPerformed(evt);
            }
        });

        pedidoBcoRb.setText("Pedido");
        pedidoBcoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pedidoBcoRbActionPerformed(evt);
            }
        });

        facturaBcoRb.setText("Factura");
        facturaBcoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facturaBcoRbActionPerformed(evt);
            }
        });

        notaCredBcoRb.setText("Nota Crédito");
        notaCredBcoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notaCredBcoRbActionPerformed(evt);
            }
        });

        tablaDocBco.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo Doc", "Número", "Total", "Fecha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaDocBco);

        verDocBcoBtn.setText("Ver");
        verDocBcoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verDocBcoBtnActionPerformed(evt);
            }
        });

        notaDebitoRb.setText("Nota Débito");
        notaDebitoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notaDebitoRbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(deFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(aFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(295, 295, 295)
                                        .addComponent(pedidoRb)
                                        .addGap(18, 18, 18)
                                        .addComponent(presupuestoRb)
                                        .addGap(18, 18, 18)
                                        .addComponent(devolucionRb)))
                                .addGap(111, 111, 111))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(verDocSeleccionadoBtn)
                                    .addComponent(verDocBcoBtn)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(codigoClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buscarClientePorCodigoBtn)
                                .addGap(69, 69, 69)
                                .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(buscarClientePorNombreBtn)
                                .addGap(0, 58, Short.MAX_VALUE)))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nombreClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(pedidoBcoRb)
                        .addGap(18, 18, 18)
                        .addComponent(facturaBcoRb)
                        .addGap(18, 18, 18)
                        .addComponent(notaCredBcoRb)
                        .addGap(18, 18, 18)
                        .addComponent(notaDebitoRb)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(volverBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(deFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(aFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(codigoClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarClientePorCodigoBtn)
                    .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarClientePorNombreBtn))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(nombreClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pedidoBcoRb)
                                    .addComponent(facturaBcoRb)
                                    .addComponent(notaCredBcoRb)
                                    .addComponent(notaDebitoRb))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(verDocBcoBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pedidoRb)
                            .addComponent(presupuestoRb)
                            .addComponent(devolucionRb))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(verDocSeleccionadoBtn)
                        .addComponent(volverBtn)))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void codigoClienteTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoClienteTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!codigoClienteTxt.getText().isEmpty()) {
                buscarClientePorCodigo();
            } else {
                nombreClienteTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_codigoClienteTxtKeyPressed

    private void buscarClientePorCodigoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarClientePorCodigoBtnActionPerformed
        buscarClientePorCodigo();
    }//GEN-LAST:event_buscarClientePorCodigoBtnActionPerformed

    private void nombreClienteTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreClienteTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!nombreClienteTxt.getText().isEmpty()) {
                buscarClientePorNombre();
            } else {
                codigoClienteTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_nombreClienteTxtKeyPressed

    private void buscarClientePorNombreBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarClientePorNombreBtnActionPerformed
        buscarClientePorNombre();
    }//GEN-LAST:event_buscarClientePorNombreBtnActionPerformed

    private void presupuestoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presupuestoRbActionPerformed
        pedidoRb.setSelected(false);
        presupuestoRb.setSelected(true);
        devolucionRb.setSelected(false);
        buscarClientePorCodigo();
    }//GEN-LAST:event_presupuestoRbActionPerformed

    private void pedidoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pedidoRbActionPerformed
        pedidoRb.setSelected(true);
        presupuestoRb.setSelected(false);
        devolucionRb.setSelected(false);
        buscarClientePorCodigo();
    }//GEN-LAST:event_pedidoRbActionPerformed

    private void verDocSeleccionadoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verDocSeleccionadoBtnActionPerformed
        int row = tablaDocumentos.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una linea para Visualizar");
            return;
        }
        if (pedidoRb.isSelected()) {
            //VerPedidoFrame
            Request re = pedidos.get(row);
            DuplicadoPedidoFrame vff = new DuplicadoPedidoFrame(re);
            vff.setVisible(true);
            this.dispose();
        } else {
            if (presupuestoRb.isSelected()) {
                Activity presup = presupuestos.get(row);
                VerFacturaFrame vff = new VerFacturaFrame(presup, cl);
                vff.setVisible(true);
                this.dispose();
            } else {
                //Ver Devolucion Frame
                Activity presup = presupuestos.get(row);
                VerDevolucionFrame vdf = new VerDevolucionFrame(presup, cl);
                vdf.setVisible(true);
                this.dispose();
            }
        }
    }//GEN-LAST:event_verDocSeleccionadoBtnActionPerformed

    private void facturaBcoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facturaBcoRbActionPerformed
        notaDebitoRb.setSelected(false);
        facturaBcoRb.setSelected(true);
        pedidoBcoRb.setSelected(false);
        notaCredBcoRb.setSelected(false);
        buscarClientePorCodigo();
    }//GEN-LAST:event_facturaBcoRbActionPerformed

    private void notaCredBcoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notaCredBcoRbActionPerformed
        notaDebitoRb.setSelected(false);
        facturaBcoRb.setSelected(false);
        pedidoBcoRb.setSelected(false);
        notaCredBcoRb.setSelected(true);
        buscarClientePorCodigo();
    }//GEN-LAST:event_notaCredBcoRbActionPerformed

    private void pedidoBcoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pedidoBcoRbActionPerformed
        notaDebitoRb.setSelected(false);
        facturaBcoRb.setSelected(false);
        pedidoBcoRb.setSelected(true);
        notaCredBcoRb.setSelected(false);
        buscarClientePorCodigo();
    }//GEN-LAST:event_pedidoBcoRbActionPerformed

    private void devolucionRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devolucionRbActionPerformed
        pedidoRb.setSelected(false);
        presupuestoRb.setSelected(false);
        devolucionRb.setSelected(true);
        buscarClientePorCodigo();
    }//GEN-LAST:event_devolucionRbActionPerformed

    private void verDocBcoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verDocBcoBtnActionPerformed
        int row = tablaDocBco.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar Documento para Ver");
        } else {
            if (pedidoBcoRb.isSelected()) {
                // Ver pedido
                Pedido pe = pedidosB.get(row);
                VerPedidoFrame vpf = new VerPedidoFrame(pe, cl);
                vpf.setVisible(true);
                this.dispose();
            } else {
                if (facturaBcoRb.isSelected()) {
                    IvaVentas iv = facturas.get(row);
                    VerFacturaBcoFrame vfbf = new VerFacturaBcoFrame(iv, cl);
                    vfbf.setVisible(true);
                    this.dispose();
                } else {
                    if (notaDebitoRb.isSelected()) {
                        IvaVentas iv = facturas.get(row);
                        VerNotaDebitoFrame vncf = new VerNotaDebitoFrame(iv, cl);
                        vncf.setVisible(true);
                        this.dispose();
                    } else {
                        //ver nota credito
                        IvaVentas iv = facturas.get(row);
                        VerNotaCreditoFrame vncf = new VerNotaCreditoFrame(iv, cl);
                        vncf.setVisible(true);
                        this.dispose();
                    }
                }
            }
        }
    }//GEN-LAST:event_verDocBcoBtnActionPerformed

    private void comboClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboClientesActionPerformed
        if (evt.getModifiers() == 16) {
            if (comboClientes.getSelectedIndex() > 0) {
                int itemSeleccionado = comboClientes.getSelectedIndex() - 1;
                if (itemSeleccionado > -1) {
                    codigoClienteTxt.setText(clientes.get(itemSeleccionado).getCodigo());
                    nombreClienteTxt.setText(clientes.get(itemSeleccionado).getRazonSocial());
                    buscarClientePorCodigo();
                }
            }
        }
    }//GEN-LAST:event_comboClientesActionPerformed

    private void comboClientesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboClientesKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (comboClientes.getSelectedIndex() > 0) {
                int itemSeleccionado = comboClientes.getSelectedIndex() - 1;
                if (itemSeleccionado > -1) {
                    codigoClienteTxt.setText(clientes.get(itemSeleccionado).getCodigo());
                    nombreClienteTxt.setText(clientes.get(itemSeleccionado).getRazonSocial());
                    buscarClientePorCodigo();
                }
            }
        }
    }//GEN-LAST:event_comboClientesKeyPressed

    private void deFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (deFechaTxt.getText().isEmpty()) {
                deFechaTxt.setText(sdf.format(new Date()));
                deFechaTxt.requestFocus();
            } else {
                int largo = deFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    deFechaTxt.setText(deFechaTxt.getText() + "/" + f);
                    aFechaTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        deFechaTxt.setText(deFechaTxt.getText() + an);
                        aFechaTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            deFechaTxt.setText("");
//                          request focus mismo campo
                            deFechaTxt.requestFocus();
                        } else {
                            String veinte = deFechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                deFechaTxt.requestFocus();
                            } else {
                                aFechaTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_deFechaTxtKeyPressed

    private void aFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (aFechaTxt.getText().isEmpty()) {
                aFechaTxt.setText(sdf.format(new Date()));
                aFechaTxt.requestFocus();
            } else {
                int largo = aFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    aFechaTxt.setText(aFechaTxt.getText() + "/" + f);
                    codigoClienteTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        aFechaTxt.setText(aFechaTxt.getText() + an);
                        codigoClienteTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            aFechaTxt.setText("");
//                          request focus mismo campo
                            aFechaTxt.requestFocus();
                        } else {
                            String veinte = aFechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                aFechaTxt.requestFocus();
                            } else {
                                codigoClienteTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_aFechaTxtKeyPressed

    private void notaDebitoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notaDebitoRbActionPerformed
        notaDebitoRb.setSelected(true);
        facturaBcoRb.setSelected(false);
        pedidoBcoRb.setSelected(false);
        notaCredBcoRb.setSelected(false);
        buscarClientePorCodigo();
    }//GEN-LAST:event_notaDebitoRbActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReimpresionDocumentoPorClienteFrame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aFechaTxt;
    private javax.swing.JButton buscarClientePorCodigoBtn;
    private javax.swing.JButton buscarClientePorNombreBtn;
    private javax.swing.JTextField codigoClienteTxt;
    private javax.swing.JComboBox comboClientes;
    private javax.swing.JTextField deFechaTxt;
    private javax.swing.JCheckBox devolucionRb;
    private javax.swing.JCheckBox facturaBcoRb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nombreClienteTxt;
    private javax.swing.JCheckBox notaCredBcoRb;
    private javax.swing.JCheckBox notaDebitoRb;
    private javax.swing.JCheckBox pedidoBcoRb;
    private javax.swing.JCheckBox pedidoRb;
    private javax.swing.JCheckBox presupuestoRb;
    private javax.swing.JTable tablaDocBco;
    private javax.swing.JTable tablaDocumentos;
    private javax.swing.JButton verDocBcoBtn;
    private javax.swing.JButton verDocSeleccionadoBtn;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void buscarClientePorCodigo() {
        limpiarTablas();
        if (codigoClienteTxt.getText().isEmpty()) {
            return;
        }
        String cod = codigoClienteTxt.getText();
        Customer cliente = null;
        Cliente cli = null;
        try {
            cliente = new CustomerService().getCustomerByCodigo(cod);
            cli = new ClienteService().getClienteByCodigo(cod);
        } catch (Exception ex) {
            Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (cli != null) {
            if (cliente != null) {
                nombreClienteTxt.setText(cli.getRazonSocial());
                cl = cli;
                if (pedidoRb.isSelected()) {
                    Date fechaDe = new Date();
                    Date fechaA = new Date();
                    try {
                        fechaDe = sdf.parse(deFechaTxt.getText());
                    } catch (ParseException ex) {
                        Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        fechaA = sdf.parse(aFechaTxt.getText());
                    } catch (ParseException ex) {
                        Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        pedidos = new RequestService().getAllRequestsByCodigoYFecha(cliente, fechaDe, fechaA);
                    } catch (Exception ex) {
                        Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    DefaultTableModel tbl = (DefaultTableModel) tablaDocumentos.getModel();
                    int nro = 0;
                    if (pedidos != null && !pedidos.isEmpty()) {
                        for (Request pedido : pedidos) {
                            Object ob[] = new Object[4];
                            ob[0] = "PE";
                            ob[1] = pedido.getNumeroPedido();
                            ob[2] = df.format(pedido.getTotal());
                            ob[3] = sdf.format(pedido.getFecha());
                            tbl.addRow(ob);
                            nro += 1;
                        }
                        Rectangle rect = tablaDocumentos.getCellRect(nro - 1, 0, true);
                        tablaDocumentos.scrollRectToVisible(rect);
                        tablaDocumentos.clearSelection();
                        tablaDocumentos.setRowSelectionInterval(nro - 1, nro - 1);
                        tablaDocumentos.setModel(tbl);
                        verDocSeleccionadoBtn.setEnabled(true);
                    }
                } else {
                    if (presupuestoRb.isSelected()) {
                        Date fechaDe = new Date();
                        Date fechaA = new Date();
                        try {
                            fechaDe = sdf.parse(deFechaTxt.getText());
                        } catch (ParseException ex) {
                            Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            fechaA = sdf.parse(aFechaTxt.getText());
                        } catch (ParseException ex) {
                            Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            presupuestos = new ActivityService().getAllPresupuestosByCodigoYFecha(cliente, fechaDe, fechaA);
                        } catch (Exception ex) {
                            Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        DefaultTableModel tbl = (DefaultTableModel) tablaDocumentos.getModel();
                        int nro = 0;
                        if (presupuestos != null && !presupuestos.isEmpty()) {
                            for (Activity presup : presupuestos) {
                                Object ob[] = new Object[4];
                                ob[0] = "PR";
                                ob[1] = presup.getNumeroFactura();
                                ob[2] = df.format(presup.getTotal());
                                ob[3] = sdf.format(presup.getFecha());
                                tbl.addRow(ob);
                                nro += 1;
                            }
                            Rectangle rect = tablaDocumentos.getCellRect(nro - 1, 0, true);
                            tablaDocumentos.scrollRectToVisible(rect);
                            tablaDocumentos.clearSelection();
                            tablaDocumentos.setRowSelectionInterval(nro - 1, nro - 1);
                            tablaDocumentos.setModel(tbl);
                            verDocSeleccionadoBtn.setEnabled(true);
                        }
                    } else {
                        // es devolucion
                        Date fechaDe = new Date();
                        Date fechaA = new Date();
                        try {
                            fechaDe = sdf.parse(deFechaTxt.getText());
                        } catch (ParseException ex) {
                            Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            fechaA = sdf.parse(aFechaTxt.getText());
                        } catch (ParseException ex) {
                            Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            presupuestos = new ActivityService().getAllDevolucionesByCodigoYFecha(cliente, fechaDe, fechaA);
                        } catch (Exception ex) {
                            Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        DefaultTableModel tbl = (DefaultTableModel) tablaDocumentos.getModel();
                        int nro = 0;
                        if (presupuestos != null && !presupuestos.isEmpty()) {
                            for (Activity presup : presupuestos) {
                                Object ob[] = new Object[4];
                                ob[0] = "DEV";
                                ob[1] = presup.getNumeroFactura();
                                ob[2] = df.format(presup.getTotal());
                                ob[3] = sdf.format(presup.getFecha());
                                tbl.addRow(ob);
                                nro += 1;
                            }
                            Rectangle rect = tablaDocumentos.getCellRect(nro - 1, 0, true);
                            tablaDocumentos.scrollRectToVisible(rect);
                            tablaDocumentos.clearSelection();
                            tablaDocumentos.setRowSelectionInterval(nro - 1, nro - 1);
                            tablaDocumentos.setModel(tbl);
                            verDocSeleccionadoBtn.setEnabled(true);
                        }
                    }
                }
                if (facturaBcoRb.isSelected()) {
                    Date fechaDe = new Date();
                    Date fechaA = new Date();
                    try {
                        fechaDe = sdf.parse(deFechaTxt.getText());
                    } catch (ParseException ex) {
                        Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        fechaA = sdf.parse(aFechaTxt.getText());
                    } catch (ParseException ex) {
                        Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    facturas = null;
                    try {
                        facturas = new IvaVentasService().getFcByCodigoYFecha(cli, fechaDe, fechaA);
                    } catch (Exception ex) {
                        Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (facturas != null && !facturas.isEmpty()) {
                        DefaultTableModel tbl = (DefaultTableModel) tablaDocBco.getModel();
                        int nro = 0;
                        for (IvaVentas fc : facturas) {
                            Object ob[] = new Object[4];
                            ob[0] = "FC";
                            ob[1] = fc.getNumeroFactura();
                            ob[2] = df.format(fc.getTotal());
                            ob[3] = sdf.format(fc.getFecha());
                            tbl.addRow(ob);
                            nro += 1;
                        }
                        Rectangle rect = tablaDocBco.getCellRect(nro - 1, 0, true);
                        tablaDocBco.scrollRectToVisible(rect);
                        tablaDocBco.clearSelection();
                        tablaDocBco.setRowSelectionInterval(nro - 1, nro - 1);
                        tablaDocBco.setModel(tbl);
                        verDocBcoBtn.setEnabled(true);
                    }
                } else {
                    if (pedidoBcoRb.isSelected()) {
                        Date fechaDe = new Date();
                        Date fechaA = new Date();
                        try {
                            fechaDe = sdf.parse(deFechaTxt.getText());
                        } catch (ParseException ex) {
                            Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            fechaA = sdf.parse(aFechaTxt.getText());
                        } catch (ParseException ex) {
                            Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        try {
                            pedidosB = new PedidoService().getAllPedidosByCodigoYFecha(cli, fechaDe, fechaA);
                        } catch (Exception ex) {
                            Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        if (pedidosB != null && !pedidosB.isEmpty()) {
                            DefaultTableModel tbl = (DefaultTableModel) tablaDocBco.getModel();
                            int nro = 0;
                            for (Pedido pe : pedidosB) {
                                Object ob[] = new Object[4];
                                ob[0] = "PE";
                                ob[1] = pe.getNumeroPedido();
                                ob[2] = df.format(pe.getTotal());
                                ob[3] = sdf.format(pe.getFecha());
                                tbl.addRow(ob);
                                nro += 1;
                            }
                            Rectangle rect = tablaDocBco.getCellRect(nro - 1, 0, true);
                            tablaDocBco.scrollRectToVisible(rect);
                            tablaDocBco.clearSelection();
                            tablaDocBco.setRowSelectionInterval(nro - 1, nro - 1);
                            tablaDocBco.setModel(tbl);
                            verDocBcoBtn.setEnabled(true);
                        }
                    } else {
                        if (notaCredBcoRb.isSelected()) {
                            Date fechaDe = new Date();
                            Date fechaA = new Date();
                            try {
                                fechaDe = sdf.parse(deFechaTxt.getText());
                            } catch (ParseException ex) {
                                Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            try {
                                fechaA = sdf.parse(aFechaTxt.getText());
                            } catch (ParseException ex) {
                                Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            facturas = null;
                            try {
                                facturas = new IvaVentasService().getNcByCodigoYFecha(cli, fechaDe, fechaA);
                            } catch (Exception ex) {
                                Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            if (facturas != null && !facturas.isEmpty()) {
                                DefaultTableModel tbl = (DefaultTableModel) tablaDocBco.getModel();
                                int nro = 0;
                                for (IvaVentas fc : facturas) {
                                    Object ob[] = new Object[4];
                                    ob[0] = "NC";
                                    ob[1] = fc.getNumeroFactura();
                                    ob[2] = df.format(fc.getTotal());
                                    ob[3] = sdf.format(fc.getFecha());
                                    tbl.addRow(ob);
                                    nro += 1;
                                }
                                Rectangle rect = tablaDocBco.getCellRect(nro - 1, 0, true);
                                tablaDocBco.scrollRectToVisible(rect);
                                tablaDocBco.clearSelection();
                                tablaDocBco.setRowSelectionInterval(nro - 1, nro - 1);
                                tablaDocBco.setModel(tbl);
                                verDocBcoBtn.setEnabled(true);
                            }
                        } else {
                            // es nota de drébito
                            Date fechaDe = new Date();
                            Date fechaA = new Date();
                            try {
                                fechaDe = sdf.parse(deFechaTxt.getText());
                            } catch (ParseException ex) {
                                Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            try {
                                fechaA = sdf.parse(aFechaTxt.getText());
                            } catch (ParseException ex) {
                                Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            facturas = null;
                            try {
                                facturas = new IvaVentasService().getNdByCliente(cli, fechaDe, fechaA);
                            } catch (Exception ex) {
                                Logger.getLogger(ReimpresionDocumentoPorClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            if (facturas != null && !facturas.isEmpty()) {
                                DefaultTableModel tbl = (DefaultTableModel) tablaDocBco.getModel();
                                int nro = 0;
                                for (IvaVentas fc : facturas) {
                                    Object ob[] = new Object[4];
                                    ob[0] = "NC";
                                    ob[1] = fc.getNumeroFactura();
                                    ob[2] = df.format(fc.getTotal());
                                    ob[3] = sdf.format(fc.getFecha());
                                    tbl.addRow(ob);
                                    nro += 1;
                                }
                                Rectangle rect = tablaDocBco.getCellRect(nro - 1, 0, true);
                                tablaDocBco.scrollRectToVisible(rect);
                                tablaDocBco.clearSelection();
                                tablaDocBco.setRowSelectionInterval(nro - 1, nro - 1);
                                tablaDocBco.setModel(tbl);
                                verDocBcoBtn.setEnabled(true);
                            }
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "El Cliente no esta Habilitado");
            }
        } else {
            JOptionPane.showMessageDialog(this, "El Cliente no Existe");
        }
    }

    private void buscarClientePorNombre() {
        borrarCombo();
        if (nombreClienteTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe Ingresar mínimo una letra para buscar cliente");
        } else {
            clientes = null;
            try {
                clientes = new ClienteService().getClientesByFiltro(nombreClienteTxt.getText());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al buscar clientes BTN");
                Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (clientes != null) {
                for (Cliente cli : clientes) {
                    comboClientes.addItem(cli.getRazonSocial());
                }
                comboClientes.requestFocus();
                comboClientes.addFocusListener(null);
                comboClientes.showPopup();
            } else {
                JOptionPane.showMessageDialog(this, "No se encontro ningun cliente con esa solicitud");
            }
        }
    }

    private void limpiarCampos() {
        codigoClienteTxt.setText("");
        nombreClienteTxt.setText("");
        pedidoRb.setSelected(false);
        presupuestoRb.setSelected(true);
        devolucionRb.setSelected(false);
        pedidoBcoRb.setSelected(false);
        facturaBcoRb.setSelected(true);
        notaCredBcoRb.setSelected(false);
        comboClientes.removeAllItems();
        comboClientes.addItem("");
        Date fecha = new Date();
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -30);
        deFechaTxt.setText(sdf.format(cal.getTime()));
        aFechaTxt.setText(sdf.format(fecha));
        verDocBcoBtn.setEnabled(false);
        verDocSeleccionadoBtn.setEnabled(false);
    }

    private void limpiarTablas() {
        int rows = tablaDocBco.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tablaDocBco.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tablaDocBco.setModel(tbl);
        }
        rows = 0;
        rows = tablaDocumentos.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tablaDocumentos.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tablaDocumentos.setModel(tbl);
        }
    }

    private void borrarCombo() {
        comboClientes.removeAllItems();
        comboClientes.addItem("");
        clientes = null;
    }
}
