/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ComprobanteCompras;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.entities.RcCo;
import ar.com.ventas.entities.ReciboProveedor;
import ar.com.ventas.services.ComprobanteComprasService;
import ar.com.ventas.services.RcCoService;
import ar.com.ventas.services.ReciboProveedorService;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class AplicarCreditoFrame extends javax.swing.JFrame {

    private Proveedor proveedor = null;
    private List<ComprobanteCompras> facturas;
    private List<ReciboProveedor> recibos;
    private List<ComprobanteCompras> notasDeCredito;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private DecimalFormat dfs = new DecimalFormat("0000");
    private DecimalFormat dfn = new DecimalFormat("00000000");
    private Integer menu;
    /**
     * Creates new form AplicarCreditoFrame
     */
    public AplicarCreditoFrame(Proveedor p, Integer menu) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        this.proveedor = p;
        this.menu = menu;
        proveedorTxt.setText(proveedor.getRazonSocial());
        llenarTablas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        proveedorTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla3 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        aplicarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("APLICAR CREDITO");

        jLabel1.setText("Proveedor:");

        proveedorTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        proveedorTxt.setText("PROVEEDOR");

        tabla1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Nro Comprobante", "Importe"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla1);

        tabla2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Nro Comprobante", "Importe"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabla2);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("COMPROBANTES COMPRAS");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("NOTA DE CREDITO");

        tabla3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Nro Comprobante", "Importe"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tabla3);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("RECIBOS");

        aplicarBtn.setText("Aplicar");
        aplicarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(proveedorTxt)
                                .addGap(18, 18, 18)
                                .addComponent(aplicarBtn)
                                .addGap(18, 18, 18)
                                .addComponent(volverBtn)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(proveedorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aplicarBtn)
                    .addComponent(volverBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void aplicarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarBtnActionPerformed
        //aplicar();
        aplicar2();
    }//GEN-LAST:event_aplicarBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AplicarCreditoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AplicarCreditoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AplicarCreditoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AplicarCreditoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AplicarCreditoFrame(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aplicarBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField proveedorTxt;
    private javax.swing.JTable tabla1;
    private javax.swing.JTable tabla2;
    private javax.swing.JTable tabla3;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarTablas() {
        limpiarTablas();
        facturas = null;
        try {
            facturas = new ComprobanteComprasService().getComprobantesImpagosByProveedor(proveedor);
        } catch (Exception ex) {
            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (facturas != null && !facturas.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla1.getModel();
            for (ComprobanteCompras fc : facturas) {
                Object ob[] = new Object[3];
                ob[0] = sdf.format(fc.getFechaFactura());
                String nc = fc.getLetra() + " " + dfs.format(fc.getNumeroSucursal()) + "-" + dfn.format(fc.getNumeroFactura());
                ob[1] = nc;
                ob[2] = df.format(fc.getTotal() - fc.getPagado());
                tbl.addRow(ob);
            }
            tabla1.setModel(tbl);
        }
        recibos = null;
        try {
            recibos = new ReciboProveedorService().getRecibosPorProveedorNoImputados(proveedor);
        } catch (Exception ex) {
            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (recibos != null && !recibos.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla3.getModel();
            for (ReciboProveedor rc : recibos) {
                Object ob[] = new Object[3];
                ob[0] = sdf.format(rc.getFecha());
                String nc = "R " + dfs.format(1) + "-" + dfn.format(rc.getNumero());
                ob[1] = nc;
                if (rc.getImporteImputado() != null) {
                    ob[2] = df.format(rc.getImporte() - rc.getImporteImputado());
                } else {
                    ob[2] = df.format(rc.getImporte());
                }
                tbl.addRow(ob);
            }
            tabla3.setModel(tbl);
        }
        notasDeCredito = null;
        try {
            notasDeCredito = new ComprobanteComprasService().getNotasCreditoImpagosByProveedor(proveedor);
        } catch (Exception ex) {
            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (notasDeCredito != null && !notasDeCredito.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla2.getModel();
            for (ComprobanteCompras fc : notasDeCredito) {
                Object ob[] = new Object[3];
                ob[0] = sdf.format(fc.getFechaFactura());
                String nc = fc.getLetra() + " " + dfs.format(fc.getNumeroSucursal()) + "-" + dfn.format(fc.getNumeroFactura());
                ob[1] = nc;
                if (fc.getPagado() != null) {
                    ob[2] = df.format(fc.getTotal() - fc.getPagado());
                } else {
                    ob[2] = df.format(fc.getTotal());
                }
                tbl.addRow(ob);
            }
            tabla2.setModel(tbl);
        }
    }

    private void volver() {
        CuentaCorrienteProveedorFrame ccpf = new CuentaCorrienteProveedorFrame(proveedor, menu);
        ccpf.setVisible(true);
        this.dispose();
    }

    private void aplicar() {
        int row1 = tabla1.getSelectedRow();
        if (row1 < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un comprobante para Aplicar Imputación");
            return;
        }
        int row2 = tabla2.getSelectedRow();
        int row3 = tabla3.getSelectedRow();
        if (row2 < 0 && row3 < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Rc o Nc para Aplicar Imputación");
            llenarTablas();
            return;
        } else {
            if (!(row2 < 0)) {
                if (!(row3 < 0)) {
                    JOptionPane.showMessageDialog(this, "Seleccionar solo un Rc o Nc para Aplicar");
                    return;
                }
            }
        }

        if (!(row2 < 0)) {
            ComprobanteCompras cc = facturas.get(row1);
            Double ip = cc.getTotal() - cc.getPagado();
            ComprobanteCompras nc = notasDeCredito.get(row2);
            Double ia1 = nc.getTotal() - nc.getPagado();
            String str1 = df.format(ip);
            String str2 = df.format(ia1);
            int op = JOptionPane.showConfirmDialog(this,
                    "Confirma aplicar Esta NC?",
                    "Atención", JOptionPane.YES_NO_OPTION);
            if (op == 0) {
                if (str1.equals(str2)) {
                    cc.setPagado(cc.getTotal());
                    cc.setEstaPago(true);
                    try {
                        new ComprobanteComprasService().updateComprobante(cc);
                    } catch (Exception ex) {
                        Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    nc.setPagado(nc.getTotal());
                    nc.setEstaPago(true);
                    try {
                        new ComprobanteComprasService().updateComprobante(nc);
                    } catch (Exception ex) {
                        Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    RcCo reco = new RcCo();
                    reco.setAnulado(false);
                    reco.setComprobanteCompras(cc);
                    reco.setImporteFc(cc.getTotal());
                    reco.setImporteNc(nc.getTotal());
                    reco.setImporteRc(0.0);
                    reco.setNotaCredito(nc);
                    try {
                        new RcCoService().saveRecibo(reco);
                    } catch (Exception ex) {
                        Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(this, "Imputación Aplicada");
                    llenarTablas();
                } else {
                    Double d1 = Double.valueOf(str1.replace(",", "."));
                    Double d2 = Double.valueOf(str2.replace(",", "."));
                    if (d2 < d1) {
                        cc.setPagado(cc.getPagado() + d2);
                        cc.setEstaPago(false);
                        try {
                            new ComprobanteComprasService().updateComprobante(cc);
                        } catch (Exception ex) {
                            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        nc.setPagado(nc.getTotal());
                        nc.setEstaPago(true);
                        try {
                            new ComprobanteComprasService().updateComprobante(nc);
                        } catch (Exception ex) {
                            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        RcCo reco = new RcCo();
                        reco.setAnulado(false);
                        reco.setComprobanteCompras(cc);
                        reco.setImporteFc(cc.getTotal());
                        reco.setImporteNc(nc.getTotal());
                        reco.setImporteRc(0.0);
                        reco.setNotaCredito(nc);
                        try {
                            new RcCoService().saveRecibo(reco);
                        } catch (Exception ex) {
                            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        JOptionPane.showMessageDialog(this, "Imputación Aplicada");
                        llenarTablas();
                    } else {
                        cc.setPagado(cc.getTotal());
                        cc.setEstaPago(true);
                        try {
                            new ComprobanteComprasService().updateComprobante(cc);
                        } catch (Exception ex) {
                            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        nc.setPagado(nc.getPagado() + d1);
                        nc.setEstaPago(false);
                        try {
                            new ComprobanteComprasService().updateComprobante(nc);
                        } catch (Exception ex) {
                            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        RcCo reco = new RcCo();
                        reco.setAnulado(false);
                        reco.setComprobanteCompras(cc);
                        reco.setImporteFc(d1);
                        reco.setImporteNc(d2);
                        reco.setImporteRc(0.0);
                        reco.setNotaCredito(nc);
                        try {
                            new RcCoService().saveRecibo(reco);
                        } catch (Exception ex) {
                            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        JOptionPane.showMessageDialog(this, "Imputación Aplicada");
                        llenarTablas();
                    }
                }
            }
        } else {
            ReciboProveedor rePro = recibos.get(row3);
            String str1 = "";
            String str2 = "";
            if (rePro.getImporteImputado() != null) {
                str1 = df.format(rePro.getImporte() - rePro.getImporteImputado());
            } else {
                str1 = df.format(rePro.getImporte());
            }
            ComprobanteCompras cc = facturas.get(row1);
            if (cc.getPagado() != null) {
                str2 = df.format(cc.getTotal() - cc.getPagado());
            } else {
                str2 = df.format(cc.getTotal());
            }
            if (str1.equals(str2)) {
                rePro.setImporteImputado(rePro.getImporte());
                rePro.setImputado(true);
                try {
                    new ReciboProveedorService().updateRecibo(rePro);
                } catch (Exception ex) {
                    Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                cc.setPagado(cc.getTotal());
                cc.setEstaPago(true);
                try {
                    new ComprobanteComprasService().updateComprobante(cc);
                } catch (Exception ex) {
                    Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                RcCo reco = new RcCo();
                reco.setAnulado(false);
                reco.setComprobanteCompras(cc);
                reco.setImporteFc(Double.valueOf(str2.replace(",", ".")));
                reco.setImporteNc(0.0);
                reco.setImporteRc(Double.valueOf(str1.replace(",", ".")));
                reco.setReciboProveedor(rePro);
                try {
                    new RcCoService().saveRecibo(reco);
                } catch (Exception ex) {
                    Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(this, "Imputación Aplicada");
                llenarTablas();
            } else {
                Double d1 = Double.valueOf(str1.replace(",", "."));
                Double d2 = Double.valueOf(str2.replace(",", "."));
                if (d1 > d2) {
                    if (rePro.getImporteImputado() != null) {
                        rePro.setImporteImputado(rePro.getImporteImputado() + d2);
                    } else {
                        rePro.setImporteImputado(d2);
                    }
                    cc.setPagado(cc.getTotal());
                    cc.setEstaPago(true);
                    RcCo reco = new RcCo();
                    reco.setAnulado(false);
                    reco.setComprobanteCompras(cc);
                    reco.setImporteFc(cc.getTotal());
                    reco.setImporteNc(0.0);
                    if (rePro.getImporteImputado() != null) {
                        reco.setImporteRc(rePro.getImporte());
                    } else {
                        reco.setImporteRc(rePro.getImporte());
                    }
                    reco.setReciboProveedor(rePro);
                    try {
                        new RcCoService().saveRecibo(reco);
                        new ComprobanteComprasService().updateComprobante(cc);
                        new ReciboProveedorService().updateRecibo(rePro);
                    } catch (Exception ex) {
                        Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(this, "Imputación Aplicada");
                    llenarTablas();
                } else {
                    rePro.setImporteImputado(rePro.getImporte());
                    rePro.setImputado(true);
                    try {
                        new ReciboProveedorService().updateRecibo(rePro);
                    } catch (Exception ex) {
                        Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    cc.setPagado(cc.getPagado() + d1);
                    try {
                        new ComprobanteComprasService().updateComprobante(cc);
                    } catch (Exception ex) {
                        Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    RcCo reco = new RcCo();
                    reco.setAnulado(false);
                    reco.setComprobanteCompras(cc);
                    reco.setImporteFc(cc.getTotal());
                    reco.setImporteNc(0.0);
                    reco.setImporteRc(d1);
                    reco.setReciboProveedor(rePro);
                    try {
                        new RcCoService().saveRecibo(reco);
                    } catch (Exception ex) {
                        Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(this, "Imputación Aplicada");
                    llenarTablas();
                }
            }
        }
    }

    private void limpiarTablas() {
        DefaultTableModel tbl1 = (DefaultTableModel) tabla1.getModel();
        DefaultTableModel tbl2 = (DefaultTableModel) tabla2.getModel();
        DefaultTableModel tbl3 = (DefaultTableModel) tabla3.getModel();
        int row1 = tbl1.getRowCount();
        int row2 = tbl2.getRowCount();
        int row3 = tbl3.getRowCount();
        if (row1 > 0) {
            for (int i = 0; i < row1; i++) {
                tbl1.removeRow(0);
            }
            tabla1.setModel(tbl1);
        }
        if (row2 > 0) {
            for (int i = 0; i < row2; i++) {
                tbl2.removeRow(0);
            }
            tabla2.setModel(tbl2);
        }
        if (row3 > 0) {
            for (int i = 0; i < row3; i++) {
                tbl3.removeRow(0);
            }
            tabla3.setModel(tbl3);
        }
    }

    private void aplicar2() {
        int row1 = tabla1.getSelectedRow();
        if (row1 < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un comprobante para Aplicar Imputación");
            return;
        }
        int row2 = tabla2.getSelectedRow();
        int row3 = tabla3.getSelectedRow();
        if (row2 < 0 && row3 < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Rc o Nc para Aplicar Imputación");
            llenarTablas();
            return;
        } else {
            if (!(row2 < 0)) {
                if (!(row3 < 0)) {
                    JOptionPane.showMessageDialog(this, "Seleccionar solo un Rc o Nc para Aplicar");
                    return;
                }
            }
        }
        if (!(row2 < 0)) {
            ComprobanteCompras cc = facturas.get(row1);
            Double faltaPagar = cc.getTotal() - cc.getPagado();
            ComprobanteCompras nc = notasDeCredito.get(row2);
            Double faltaAcreditar = nc.getTotal() - nc.getPagado();
            String str1 = df.format(faltaPagar);
            String str2 = df.format(faltaAcreditar);
            System.out.println("NOTA DE CREDITO");
            System.out.println("Falta Pagar     " + str1);
            System.out.println("Falta acreditar " + str2);
            int op = JOptionPane.showConfirmDialog(this,
                    "Confirma aplicar Esta NC?",
                    "Atención", JOptionPane.YES_NO_OPTION);
            if (op == 0) {
                if (str1.equals(str2)) {
                    cc.setPagado(cc.getTotal());
                    nc.setPagado(nc.getTotal());
                    cc.setEstaPago(true);
                    nc.setEstaPago(true);
                    RcCo reco = new RcCo();
                    reco.setAnulado(false);
                    reco.setComprobanteCompras(cc);
                    reco.setImporteFc(cc.getTotal());
                    reco.setImporteNc(nc.getTotal());
                    reco.setImporteRc(0.0);
                    reco.setNotaCredito(nc);
                    reco.setImputadoNc(nc.getTotal());
                    reco.setImputadoFc(cc.getTotal());
                    reco.setImporteRc(0.0);
                    try {
                        new RcCoService().saveRecibo(reco);
                        new ComprobanteComprasService().updateComprobante(cc);
                        new ComprobanteComprasService().updateComprobante(nc);
                    } catch (Exception ex) {
                        Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(this, "Imputación Aplicada");
                    llenarTablas();
                } else {
                    if (faltaAcreditar < faltaPagar) {
                        cc.setPagado(cc.getPagado() + faltaAcreditar);
                        nc.setPagado(nc.getTotal());
                        cc.setEstaPago(false);
                        nc.setEstaPago(true);
                        RcCo reco = new RcCo();
                        reco.setAnulado(false);
                        reco.setComprobanteCompras(cc);
                        reco.setImporteFc(cc.getTotal());
                        reco.setImporteNc(nc.getTotal());
                        reco.setImporteRc(0.0);
                        reco.setNotaCredito(nc);
                        reco.setImputadoFc(faltaAcreditar);
                        reco.setImputadoNc(faltaAcreditar);
                        reco.setImputadoRc(0.0);
                        try {
                            new RcCoService().saveRecibo(reco);
                            new ComprobanteComprasService().updateComprobante(cc);
                            new ComprobanteComprasService().updateComprobante(nc);
                        } catch (Exception ex) {
                            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        JOptionPane.showMessageDialog(this, "Imputación Aplicada");
                        llenarTablas();
                    } else {
                        cc.setPagado(cc.getTotal());
                        nc.setPagado(nc.getPagado() + faltaPagar);
                        cc.setEstaPago(true);
                        nc.setEstaPago(false);
                        RcCo reco = new RcCo();
                        reco.setAnulado(false);
                        reco.setComprobanteCompras(cc);
                        reco.setImporteFc(cc.getTotal());
                        reco.setImporteNc(nc.getTotal());
                        reco.setImputadoFc(faltaPagar);
                        reco.setImputadoNc(faltaPagar);
                        reco.setImputadoRc(0.0);
                        reco.setImporteRc(0.0);
                        reco.setNotaCredito(nc);
                        try {
                            new RcCoService().saveRecibo(reco);
                            new ComprobanteComprasService().updateComprobante(cc);
                            new ComprobanteComprasService().updateComprobante(nc);
                        } catch (Exception ex) {
                            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        JOptionPane.showMessageDialog(this, "Imputación Aplicada");
                        llenarTablas();
                    }
                }
            }
        } else {
            ComprobanteCompras cc = facturas.get(row1);
            Double faltaPagar = cc.getTotal() - cc.getPagado();
            ReciboProveedor rc = recibos.get(row3);
            Double faltaAcreditar = rc.getImporte() - rc.getImporteImputado();
            String str1 = df.format(faltaPagar);
            String str2 = df.format(faltaAcreditar);
            System.out.println("RECIBO");
            System.out.println("Falta Pagar     " + str1);
            System.out.println("Falta acreditar " + str2);
            int op = JOptionPane.showConfirmDialog(this,
                    "Confirma aplicar este RC?",
                    "Atención", JOptionPane.YES_NO_OPTION);
            if (op == 0) {
                if (str1.equals(str2)) {
                    cc.setPagado(cc.getTotal());
                    rc.setImporteImputado(rc.getImporte());
                    cc.setEstaPago(true);
                    rc.setImputado(true);
                    RcCo reco = new RcCo();
                    reco.setAnulado(false);
                    reco.setComprobanteCompras(cc);
                    reco.setImporteFc(cc.getTotal());
                    reco.setImporteNc(0.0);
                    reco.setImporteRc(rc.getImporte());
                    reco.setImputadoFc(faltaPagar - faltaAcreditar);
                    reco.setImputadoNc(0.0);
                    reco.setImputadoRc(faltaPagar - faltaAcreditar);
                    reco.setReciboProveedor(rc);
                    try {
                        new RcCoService().saveRecibo(reco);
                        new ComprobanteComprasService().updateComprobante(cc);
                        new ReciboProveedorService().updateRecibo(rc);
                    } catch (Exception ex) {
                        Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(this, "Imputación Aplicada");
                    llenarTablas();
                } else {
                    if (faltaAcreditar < faltaPagar) {
                        cc.setPagado(cc.getPagado() + faltaAcreditar);
                        rc.setImporteImputado(rc.getImporte());
                        cc.setEstaPago(false);
                        rc.setImputado(true);
                        RcCo reco = new RcCo();
                        reco.setAnulado(false);
                        reco.setComprobanteCompras(cc);
                        reco.setImporteFc(cc.getTotal());
                        reco.setImporteNc(0.0);
                        reco.setImporteRc(rc.getImporte());
                        reco.setReciboProveedor(rc);
                        reco.setImputadoFc(faltaAcreditar);
                        reco.setImputadoNc(0.0);
                        reco.setImputadoRc(faltaAcreditar);
                        try {
                            new RcCoService().saveRecibo(reco);
                            new ComprobanteComprasService().updateComprobante(cc);
                            new ReciboProveedorService().updateRecibo(rc);
                        } catch (Exception ex) {
                            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        JOptionPane.showMessageDialog(this, "Imputación Aplicada");
                        llenarTablas();
                    } else {
                        cc.setPagado(cc.getTotal());
                        System.out.println("imputado " + rc.getImporteImputado());
                        System.out.println("falta pagar " + faltaPagar);
                        System.out.println("falta acreditar " + faltaAcreditar);
                        rc.setImporteImputado(rc.getImporteImputado() + faltaPagar);
                        cc.setEstaPago(true);
                        rc.setImputado(false);
                        RcCo reco = new RcCo();
                        reco.setAnulado(false);
                        reco.setComprobanteCompras(cc);
                        reco.setImporteFc(cc.getTotal());
                        reco.setImporteNc(0.0);
                        reco.setImporteRc(rc.getImporte());
                        reco.setReciboProveedor(rc);
                        reco.setImputadoFc(faltaPagar);
                        reco.setImputadoNc(0.0);
                        reco.setImputadoRc(faltaPagar);
                        try {
                            new RcCoService().saveRecibo(reco);
                            new ComprobanteComprasService().updateComprobante(cc);
                            new ReciboProveedorService().updateRecibo(rc);
                        } catch (Exception ex) {
                            Logger.getLogger(AplicarCreditoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        JOptionPane.showMessageDialog(this, "Imputación Aplicada");
                        llenarTablas();
                    }
                }
            }
        }
    }
}
