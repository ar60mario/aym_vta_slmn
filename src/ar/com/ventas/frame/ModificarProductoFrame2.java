/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.HistorialPrecio;
import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.SubRubro;
import ar.com.ventas.services.HistorialPrecioService;
import ar.com.ventas.services.ProductoService;
import ar.com.ventas.services.ProveedorService;
import ar.com.ventas.services.RubroService;
import ar.com.ventas.services.SubRubroService;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Marcela
 */
public class ModificarProductoFrame2 extends javax.swing.JFrame {

    private List<Rubro> listaRubros = new ArrayList<Rubro>();
    private List<SubRubro> listaSubRubros = new ArrayList<SubRubro>();
    private List<Proveedor> proveedores;
    private final String filtro;
    private Producto productoRelacionado = null;
    private Producto producto = null;
    private List<Producto> productosRelacionados = null;
    private final DecimalFormat df = new DecimalFormat("#0.00");
    private final DecimalFormat df1 = new DecimalFormat("#0.0");
    private final DecimalFormat df2 = new DecimalFormat("#0");
    private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private List<HistorialPrecio> hps = null;
    private Float iva;

    /**
     * Creates new form NuevoProductoFrame
     *
     * @param p
     * @param filtro
     */
    public ModificarProductoFrame2(Producto p, String filtro) {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        this.producto = p;
        this.filtro = filtro;
        this.initComponents();
        this.borrarCampos();
        this.llenarComboRubro();
        this.llenarComboSubRubro();
        this.llenarCampos();
        nombreTxt.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        guardarBtn = new javax.swing.JButton();
        volerBtn = new javax.swing.JButton();
        codigoBarrasTxt = new javax.swing.JTextField();
        impuestoTxt = new javax.swing.JTextField();
        nombreTxt = new javax.swing.JTextField();
        sugeridoTxt = new javax.swing.JTextField();
        precioTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        comboRubro = new javax.swing.JComboBox();
        comboSubRubro = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        unidadChk = new javax.swing.JCheckBox();
        cantidadCajaTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        codigoRelacionTxt = new javax.swing.JTextField();
        filtroTxt = new javax.swing.JTextField();
        comboCaja = new javax.swing.JComboBox<>();
        buscarPorCodigoBtn = new javax.swing.JButton();
        buscarPorFiltroBtn = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        costoSinIvaTxt = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        margenTxt = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        costoConIvaTxt = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        cantidadPorBultoTxt = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        descuentoTxt = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        sugeridoCalculadoTxt = new javax.swing.JTextField();
        calcularBtn = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        comboI = new javax.swing.JComboBox<>();
        jLabel26 = new javax.swing.JLabel();
        ultimaFechaTxt = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        margenClienteTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        nombreProveBuscarTxt = new javax.swing.JTextField();
        comboProv = new javax.swing.JComboBox<>();
        agregaProveedorBtn = new javax.swing.JButton();
        idTxt = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        costoFinalTxt = new javax.swing.JTextField();
        precioVentaTxt = new javax.swing.JTextField();
        actualizarListaChk = new javax.swing.JCheckBox();
        actualizarWebChk = new javax.swing.JCheckBox();
        actualizarGondolaChk = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        eliminarBtn = new javax.swing.JButton();
        inactivoCb = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        impuestoCompraTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        impuestoCalculadoTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        costoNetoTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("MODIFICAR PRODUCTO V.2");

        guardarBtn.setText("Guardar");
        guardarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBtnActionPerformed(evt);
            }
        });

        volerBtn.setText("Volver");
        volerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volerBtnActionPerformed(evt);
            }
        });

        codigoBarrasTxt.setBackground(new java.awt.Color(102, 255, 255));
        codigoBarrasTxt.setText("Codigo de Barras");
        codigoBarrasTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codigoBarrasTxtActionPerformed(evt);
            }
        });
        codigoBarrasTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoBarrasTxtKeyPressed(evt);
            }
        });

        impuestoTxt.setBackground(new java.awt.Color(102, 255, 255));
        impuestoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        impuestoTxt.setText("Impuesto");
        impuestoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                impuestoTxtKeyPressed(evt);
            }
        });

        nombreTxt.setBackground(new java.awt.Color(102, 255, 255));
        nombreTxt.setText("DETALLE");
        nombreTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreTxtKeyPressed(evt);
            }
        });

        sugeridoTxt.setBackground(new java.awt.Color(102, 255, 255));
        sugeridoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sugeridoTxt.setText("Sugerido");
        sugeridoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sugeridoTxtKeyPressed(evt);
            }
        });

        precioTxt.setBackground(new java.awt.Color(102, 255, 255));
        precioTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        precioTxt.setText("Precio");
        precioTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                precioTxtKeyPressed(evt);
            }
        });

        jLabel1.setText("Código");

        jLabel4.setText("Imp. Vta:");

        jLabel5.setText("Detalle:");

        jLabel6.setText("Precio a colocar en Sistema:");

        jLabel7.setText("Sugerido");

        jLabel9.setText("Rubro:");

        jLabel10.setText("Sub Rubro:");

        comboRubro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboRubro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRubroActionPerformed(evt);
            }
        });

        comboSubRubro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Código de Barras:");

        jLabel15.setText("Cantidad caja:");

        unidadChk.setText("Es Caja");
        unidadChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unidadChkActionPerformed(evt);
            }
        });

        cantidadCajaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cantidadCajaTxt.setText("CANT");

        jLabel2.setText("Producto Relacionado:");

        jLabel16.setText("Código:");

        jLabel17.setText("Filtro:");

        codigoRelacionTxt.setBackground(new java.awt.Color(153, 255, 102));
        codigoRelacionTxt.setText("COD-RELA");

        filtroTxt.setBackground(new java.awt.Color(153, 255, 102));
        filtroTxt.setText("NOMBRE");

        comboCaja.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCajaActionPerformed(evt);
            }
        });

        buscarPorCodigoBtn.setText("Buscar");
        buscarPorCodigoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarPorCodigoBtnActionPerformed(evt);
            }
        });

        buscarPorFiltroBtn.setText("Buscar");
        buscarPorFiltroBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarPorFiltroBtnActionPerformed(evt);
            }
        });

        jLabel18.setText("Costo S/I:");

        costoSinIvaTxt.setBackground(new java.awt.Color(102, 255, 255));
        costoSinIvaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        costoSinIvaTxt.setText("COSTO");
        costoSinIvaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                costoSinIvaTxtKeyPressed(evt);
            }
        });

        jLabel19.setText("Margen AYM:");

        margenTxt.setBackground(new java.awt.Color(102, 255, 255));
        margenTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        margenTxt.setText("MARGEN");
        margenTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                margenTxtKeyPressed(evt);
            }
        });

        jLabel20.setText("Costo con Iva:");

        costoConIvaTxt.setBackground(new java.awt.Color(102, 255, 255));
        costoConIvaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        costoConIvaTxt.setText("COST c.i");
        costoConIvaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                costoConIvaTxtKeyPressed(evt);
            }
        });

        jLabel21.setText("Cantidad por Bulto para Sugerido:");

        cantidadPorBultoTxt.setBackground(new java.awt.Color(102, 255, 255));
        cantidadPorBultoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cantidadPorBultoTxt.setText("CAN X Bulto");
        cantidadPorBultoTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cantidadPorBultoTxtActionPerformed(evt);
            }
        });
        cantidadPorBultoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cantidadPorBultoTxtKeyPressed(evt);
            }
        });

        jLabel22.setText("Descuento:");

        descuentoTxt.setBackground(new java.awt.Color(102, 255, 255));
        descuentoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        descuentoTxt.setText("dto");
        descuentoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                descuentoTxtKeyPressed(evt);
            }
        });

        jLabel23.setText("Precio Venta C/I:");

        jLabel24.setText("Sugerido calculado:");

        sugeridoCalculadoTxt.setBackground(new java.awt.Color(255, 153, 102));
        sugeridoCalculadoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sugeridoCalculadoTxt.setText("SUG CALC");

        calcularBtn.setText("Calcular");
        calcularBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularBtnActionPerformed(evt);
            }
        });

        jLabel25.setText("% iva del producto:");

        comboI.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "0", "10.5", "21" }));
        comboI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboIActionPerformed(evt);
            }
        });
        comboI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboIKeyPressed(evt);
            }
        });

        jLabel26.setText("Última fecha actualización:");

        ultimaFechaTxt.setBackground(new java.awt.Color(102, 255, 255));
        ultimaFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        ultimaFechaTxt.setText("ULTIMA FECHA");
        ultimaFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ultimaFechaTxtKeyPressed(evt);
            }
        });

        jLabel27.setText("Margen Cliente:");

        margenClienteTxt.setBackground(new java.awt.Color(102, 255, 255));
        margenClienteTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        margenClienteTxt.setText("MAR CL");
        margenClienteTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                margenClienteTxtKeyPressed(evt);
            }
        });

        jLabel13.setText("Proveedor:");

        nombreProveBuscarTxt.setBackground(new java.awt.Color(153, 255, 102));
        nombreProveBuscarTxt.setText("PROVEED");
        nombreProveBuscarTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreProveBuscarTxtKeyPressed(evt);
            }
        });

        comboProv.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboProv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboProvActionPerformed(evt);
            }
        });
        comboProv.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboProvKeyPressed(evt);
            }
        });

        agregaProveedorBtn.setText("Agrega Precio");
        agregaProveedorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregaProveedorBtnActionPerformed(evt);
            }
        });

        idTxt.setBackground(new java.awt.Color(153, 255, 255));
        idTxt.setText("COD");
        idTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                idTxtKeyPressed(evt);
            }
        });

        jLabel28.setText("Calculado C/I:");

        costoFinalTxt.setBackground(new java.awt.Color(255, 153, 102));
        costoFinalTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        costoFinalTxt.setText("COST.FIN");

        precioVentaTxt.setBackground(new java.awt.Color(255, 153, 102));
        precioVentaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        precioVentaTxt.setText("PR.VTA");

        actualizarListaChk.setText("Actualizar Lista Precios");
        actualizarListaChk.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                actualizarListaChkKeyPressed(evt);
            }
        });

        actualizarWebChk.setText("Actualizar Web");
        actualizarWebChk.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                actualizarWebChkKeyPressed(evt);
            }
        });

        actualizarGondolaChk.setText("Actualizar Góndola");
        actualizarGondolaChk.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                actualizarGondolaChkKeyPressed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Proveedor", "Fecha", "Precio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        eliminarBtn.setText("Eliminar Precio");
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });

        inactivoCb.setText("Inactivo");

        jLabel8.setText("Impuesto Compra:");

        impuestoCompraTxt.setBackground(new java.awt.Color(102, 255, 255));
        impuestoCompraTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        impuestoCompraTxt.setText("Imp.Compra");
        impuestoCompraTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                impuestoCompraTxtKeyPressed(evt);
            }
        });

        jLabel11.setText("Impuesto Calculado:");

        impuestoCalculadoTxt.setEditable(false);
        impuestoCalculadoTxt.setBackground(new java.awt.Color(255, 153, 102));
        impuestoCalculadoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        impuestoCalculadoTxt.setText("imp_calc");

        jLabel12.setText("Costo Neto:");

        costoNetoTxt.setBackground(new java.awt.Color(102, 255, 102));
        costoNetoTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        costoNetoTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        costoNetoTxt.setText("C Neto");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(impuestoCompraTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(impuestoCalculadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(impuestoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(comboProv, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(13, 13, 13)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel18)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(costoSinIvaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(10, 10, 10)
                                    .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(28, 28, 28)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(codigoBarrasTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(inactivoCb))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel25)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(comboI, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel22)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(descuentoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel28)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(costoFinalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel16)
                                                    .addGap(25, 25, 25)
                                                    .addComponent(codigoRelacionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(60, 60, 60)
                                                    .addComponent(buscarPorCodigoBtn))
                                                .addComponent(comboCaja, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel17)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(buscarPorFiltroBtn))
                                        .addComponent(jLabel2)
                                        .addComponent(eliminarBtn, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel13)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(nombreProveBuscarTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(agregaProveedorBtn))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(140, 140, 140)
                                                    .addComponent(guardarBtn)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(volerBtn)))
                                            .addGap(0, 23, Short.MAX_VALUE))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel23)
                                    .addGap(18, 18, 18)
                                    .addComponent(precioVentaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(23, 23, 23)
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(precioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel12)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(costoNetoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel21)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(cantidadPorBultoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(32, 32, 32)
                                    .addComponent(jLabel19)
                                    .addGap(18, 18, 18)
                                    .addComponent(margenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel27)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(margenClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(166, 166, 166)
                            .addComponent(jLabel20)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(costoConIvaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jLabel26)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ultimaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(86, 86, 86))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(13, 13, 13)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel9)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(comboRubro, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel24)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(sugeridoCalculadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel7)
                                            .addGap(9, 9, 9)
                                            .addComponent(sugeridoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel10)
                                                .addComponent(unidadChk))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel15)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(cantidadCajaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(comboSubRubro, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(81, 81, 81)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(actualizarWebChk)
                                        .addComponent(actualizarGondolaChk)
                                        .addComponent(actualizarListaChk)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(65, 65, 65)
                                    .addComponent(calcularBtn))))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(codigoBarrasTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inactivoCb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(comboI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(costoSinIvaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel22)
                    .addComponent(costoConIvaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descuentoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28)
                    .addComponent(costoFinalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(cantidadPorBultoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(margenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27)
                    .addComponent(margenClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(impuestoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(impuestoCompraTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(impuestoCalculadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(precioTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(precioVentaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(costoNetoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(sugeridoCalculadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(sugeridoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calcularBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(ultimaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(comboRubro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actualizarGondolaChk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(comboSubRubro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actualizarWebChk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(unidadChk)
                    .addComponent(cantidadCajaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actualizarListaChk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(nombreProveBuscarTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agregaProveedorBtn)
                    .addComponent(codigoRelacionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(buscarPorCodigoBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboProv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboCaja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buscarPorFiltroBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(eliminarBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volerBtn)
                    .addComponent(guardarBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volerBtnActionPerformed
        volver();
    }//GEN-LAST:event_volerBtnActionPerformed

    private void guardarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBtnActionPerformed
        this.guardar();
    }//GEN-LAST:event_guardarBtnActionPerformed

    private void codigoBarrasTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codigoBarrasTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_codigoBarrasTxtActionPerformed

    private void comboRubroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboRubroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboRubroActionPerformed

    private void unidadChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unidadChkActionPerformed
        if (unidadChk.isSelected()) {
            cantidadCajaTxt.setEditable(false);
            codigoRelacionTxt.setEditable(false);
            filtroTxt.setEditable(false);
        } else {
            cantidadCajaTxt.setEditable(true);
            codigoRelacionTxt.setEditable(true);
            filtroTxt.setEditable(true);
        }
        cantidadCajaTxt.setText("0");
        comboCaja.removeAllItems();
        comboCaja.addItem("");
    }//GEN-LAST:event_unidadChkActionPerformed

    private void comboCajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCajaActionPerformed
        int rows = comboCaja.getItemCount();
        if (rows > 1) {
            mostrar();
        }
    }//GEN-LAST:event_comboCajaActionPerformed

    private void buscarPorCodigoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarPorCodigoBtnActionPerformed
        buscarPorCodigo();
    }//GEN-LAST:event_buscarPorCodigoBtnActionPerformed

    private void buscarPorFiltroBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarPorFiltroBtnActionPerformed
        buscarPorFiltro();
    }//GEN-LAST:event_buscarPorFiltroBtnActionPerformed

    private void costoSinIvaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_costoSinIvaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (costoSinIvaTxt.getText().isEmpty()) {
                costoConIvaTxt.requestFocus();
                return;
            }
            calcular();
            descuentoTxt.requestFocus();
        }
    }//GEN-LAST:event_costoSinIvaTxtKeyPressed

    private void costoConIvaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_costoConIvaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (costoConIvaTxt.getText().isEmpty()) {
                costoSinIvaTxt.requestFocus();
                return;
            }
            Double precioConIva = Double.valueOf(costoConIvaTxt.getText().replace(",", "."));
            Float iva;
            int r = comboI.getSelectedIndex();
            if (r == 0) {
                iva = 0F;
            } else {
                if (r == 1) {
                    iva = 10.5F;
                } else {
                    iva = 21F;
                }
            }
            Double precioSinIva = precioConIva / (1 + iva / 100);
            costoSinIvaTxt.setText(df.format(precioSinIva));
            costoConIvaTxt.setText(df.format(precioConIva));
            descuentoTxt.requestFocus();
        }
    }//GEN-LAST:event_costoConIvaTxtKeyPressed

    private void margenTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_margenTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (margenTxt.getText().isEmpty()) {
                return;
            }
            margenClienteTxt.requestFocus();
        }
    }//GEN-LAST:event_margenTxtKeyPressed

    private void descuentoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descuentoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (descuentoTxt.getText().isEmpty()) {
                descuentoTxt.setText("0.0");
            }
            calcular1();
            cantidadPorBultoTxt.requestFocus();
        }
    }//GEN-LAST:event_descuentoTxtKeyPressed

    private void cantidadPorBultoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cantidadPorBultoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (margenTxt.getText().isEmpty()) {
                if (cantidadPorBultoTxt.getText().isEmpty()) {
                    cantidadPorBultoTxt.setText("1");
                }
                margenTxt.requestFocus();
            } else {
                calcular();
                margenTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_cantidadPorBultoTxtKeyPressed

    private void calcularBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularBtnActionPerformed
        calcular();
    }//GEN-LAST:event_calcularBtnActionPerformed

    private void idTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_idTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (idTxt.getText().isEmpty()) {
                idTxt.requestFocus();
                return;
            }
            nombreTxt.requestFocus();
        }
    }//GEN-LAST:event_idTxtKeyPressed

    private void nombreTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (nombreTxt.getText().isEmpty()) {
                return;
            }
            costoSinIvaTxt.requestFocus();
        }
    }//GEN-LAST:event_nombreTxtKeyPressed

    private void margenClienteTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_margenClienteTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (margenClienteTxt.getText().isEmpty()) {
                return;
            }
            impuestoTxt.requestFocus();
//            calcular();
//            precioTxt.requestFocus();
        }
    }//GEN-LAST:event_margenClienteTxtKeyPressed

    private void nombreProveBuscarTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreProveBuscarTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (nombreProveBuscarTxt.getText().isEmpty()) {
                return;
            }
            String f = nombreProveBuscarTxt.getText();
            proveedores = null;
            try {
                proveedores = new ProveedorService().getProveedoresByFiltro(f);
            } catch (Exception ex) {
                Logger.getLogger(ModificarProductoFrame2.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (proveedores != null && !proveedores.isEmpty()) {
                comboProv.removeAllItems();
                comboProv.addItem("");
                for (Proveedor p : proveedores) {
                    comboProv.addItem(p.getCodigo() + " " + p.getRazonSocial());
                }
                comboProv.requestFocus();
                comboProv.addFocusListener(null);
                comboProv.showPopup();
            }
        }
    }//GEN-LAST:event_nombreProveBuscarTxtKeyPressed

    private void comboProvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboProvActionPerformed
        if (evt.getModifiers() == 16) {
            int r = comboProv.getSelectedIndex();
            if (r > 0) {
                agregaProveedorBtn.requestFocus();
            }
        }
    }//GEN-LAST:event_comboProvActionPerformed

    private void agregaProveedorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregaProveedorBtnActionPerformed
        agregarReferenciaPrecios();
    }//GEN-LAST:event_agregaProveedorBtnActionPerformed

    private void comboIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboIActionPerformed
        int row = comboI.getSelectedIndex();
        if (row > 0) {
            calcular();
        } else {
            comboI.requestFocus();
            return;
        }
        costoSinIvaTxt.requestFocus();
    }//GEN-LAST:event_comboIActionPerformed

    private void precioTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_precioTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (precioTxt.getText().isEmpty()) {
                precioTxt.setText(precioVentaTxt.getText());
            }
            sugeridoTxt.requestFocus();
        }
    }//GEN-LAST:event_precioTxtKeyPressed

    private void comboProvKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboProvKeyPressed
        if (evt.getKeyCode() == 10) {
            comboRubro.requestFocus();
        }
    }//GEN-LAST:event_comboProvKeyPressed

    private void sugeridoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sugeridoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (sugeridoTxt.getText().isEmpty()) {
                sugeridoTxt.setText(sugeridoCalculadoTxt.getText());
            }
            calcular();
            ultimaFechaTxt.requestFocus();
        }
    }//GEN-LAST:event_sugeridoTxtKeyPressed

    private void impuestoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_impuestoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (impuestoTxt.getText().isEmpty()) {
                impuestoTxt.setText(impuestoCalculadoTxt.getText());
            }
            calcular();
            precioTxt.requestFocus();
        }
    }//GEN-LAST:event_impuestoTxtKeyPressed

    private void cantidadPorBultoTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cantidadPorBultoTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cantidadPorBultoTxtActionPerformed

    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row < 0) {
            return;
        }
        HistorialPrecio h = hps.get(row);
        try {
            new HistorialPrecioService().deleteHistorialPrecio(h);
        } catch (Exception ex) {
            Logger.getLogger(ModificarProductoFrame2.class.getName()).log(Level.SEVERE, null, ex);
        }
        llenarTabla();
    }//GEN-LAST:event_eliminarBtnActionPerformed

    private void codigoBarrasTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoBarrasTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            nombreTxt.requestFocus();
        }
    }//GEN-LAST:event_codigoBarrasTxtKeyPressed

    private void ultimaFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ultimaFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            actualizarGondolaChk.requestFocus();
            actualizarGondolaChk.setSelected(true);
            actualizarWebChk.setSelected(true);
            actualizarListaChk.setSelected(true);
        }
    }//GEN-LAST:event_ultimaFechaTxtKeyPressed

    private void actualizarGondolaChkKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_actualizarGondolaChkKeyPressed
        if (evt.getKeyCode() == 10) {
            actualizarWebChk.requestFocus();
        }
    }//GEN-LAST:event_actualizarGondolaChkKeyPressed

    private void actualizarWebChkKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_actualizarWebChkKeyPressed
        if (evt.getKeyCode() == 10) {
            actualizarListaChk.requestFocus();
        }
    }//GEN-LAST:event_actualizarWebChkKeyPressed

    private void actualizarListaChkKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_actualizarListaChkKeyPressed
        if (evt.getKeyCode() == 10) {
            nombreProveBuscarTxt.requestFocus();
        }
    }//GEN-LAST:event_actualizarListaChkKeyPressed

    private void comboIKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboIKeyPressed
        if (evt.getKeyCode() == 10) {
            int row = comboI.getSelectedIndex();
            if(row > 0){
                calcular();
            } else {
                comboI.requestFocus();
                return;
            }
            costoSinIvaTxt.requestFocus();
        }
    }//GEN-LAST:event_comboIKeyPressed

    private void impuestoCompraTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_impuestoCompraTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            Float imp_calc = 0F;
            imp_calc = Float.valueOf(impuestoCompraTxt.getText().replace(",", "."));
            Float margenI = 0F;
            margenI = Float.valueOf(margenTxt.getText().replace(",", "."));
            imp_calc = imp_calc * (1 + margenI / 100);
            impuestoCalculadoTxt.setText(df.format(imp_calc));
            impuestoTxt.requestFocus();
        }
    }//GEN-LAST:event_impuestoCompraTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModificarProductoFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModificarProductoFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModificarProductoFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModificarProductoFrame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModificarProductoFrame2(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox actualizarGondolaChk;
    private javax.swing.JCheckBox actualizarListaChk;
    private javax.swing.JCheckBox actualizarWebChk;
    private javax.swing.JButton agregaProveedorBtn;
    private javax.swing.JButton buscarPorCodigoBtn;
    private javax.swing.JButton buscarPorFiltroBtn;
    private javax.swing.JButton calcularBtn;
    private javax.swing.JTextField cantidadCajaTxt;
    private javax.swing.JTextField cantidadPorBultoTxt;
    private javax.swing.JTextField codigoBarrasTxt;
    private javax.swing.JTextField codigoRelacionTxt;
    private javax.swing.JComboBox<String> comboCaja;
    private javax.swing.JComboBox<String> comboI;
    private javax.swing.JComboBox<String> comboProv;
    private javax.swing.JComboBox comboRubro;
    private javax.swing.JComboBox comboSubRubro;
    private javax.swing.JTextField costoConIvaTxt;
    private javax.swing.JTextField costoFinalTxt;
    private javax.swing.JTextField costoNetoTxt;
    private javax.swing.JTextField costoSinIvaTxt;
    private javax.swing.JTextField descuentoTxt;
    private javax.swing.JButton eliminarBtn;
    private javax.swing.JTextField filtroTxt;
    private javax.swing.JButton guardarBtn;
    private javax.swing.JTextField idTxt;
    private javax.swing.JTextField impuestoCalculadoTxt;
    private javax.swing.JTextField impuestoCompraTxt;
    private javax.swing.JTextField impuestoTxt;
    private javax.swing.JCheckBox inactivoCb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField margenClienteTxt;
    private javax.swing.JTextField margenTxt;
    private javax.swing.JTextField nombreProveBuscarTxt;
    private javax.swing.JTextField nombreTxt;
    private javax.swing.JTextField precioTxt;
    private javax.swing.JTextField precioVentaTxt;
    private javax.swing.JTextField sugeridoCalculadoTxt;
    private javax.swing.JTextField sugeridoTxt;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField ultimaFechaTxt;
    private javax.swing.JCheckBox unidadChk;
    private javax.swing.JButton volerBtn;
    // End of variables declaration//GEN-END:variables

    private void guardar() {
        if (validarDuplicadoCodigoBarras()) {
            if (validarCampos()) {
//            Producto producto = new Producto();
                //producto.setCodigo(Integer.valueOf(idTxt.getText()));
                producto.setDetalle(nombreTxt.getText());
                if (!codigoBarrasTxt.getText().isEmpty()) {
                    producto.setCodigoBarras(Long.valueOf(codigoBarrasTxt.getText()));
                } else {
                    producto.setCodigoBarras(null);
                }
                Float impux;
                if (!impuestoTxt.getText().isEmpty()) {
                    impux = Float.valueOf(impuestoTxt.getText().replace(",", "."));
                } else {
                    impux = 0F;
                }
                if (!impuestoTxt.getText().isEmpty()) {
                    producto.setImpuesto(Float.valueOf(impuestoTxt.getText().replace(",", ".")));
                } else {
                    producto.setImpuesto(Float.valueOf("0.00"));
                }
                Float impux2;
                if (!impuestoCompraTxt.getText().isEmpty()) {
                    impux2 = Float.valueOf(impuestoCompraTxt.getText().replace(",", "."));
                } else {
                    impux2 = 0F;
                }
                if (!impuestoCompraTxt.getText().isEmpty()) {
                    producto.setImpuestoCompra(Float.valueOf(impuestoCompraTxt.getText().replace(",", ".")));
                } else {
                    producto.setImpuestoCompra(Float.valueOf("0.00"));
                }
                if (!sugeridoTxt.getText().isEmpty()) {
                    producto.setSugerido(Double.valueOf(sugeridoTxt.getText().replace(",", ".")));
                } else {
                    producto.setSugerido(Double.valueOf("0.00"));
                }
                //producto.setPrecio(Double.valueOf(precioTxt.getText().replace(",", ".")));
                if (inactivoCb.isSelected()) {
                    producto.setInactivo(true);
                } else {
                    producto.setInactivo(false);
                }
                if (unidadChk.isSelected()) {
                    producto.setUnidad(true);
                    producto.setCantidadCaja(0);
                } else {
                    producto.setUnidad(false);
                    int can = Integer.valueOf(cantidadCajaTxt.getText());
                    producto.setCantidadCaja(can);
                    producto.setProductoCaja(productoRelacionado);
                }
                Double costo = 0.0;
                if (!costoSinIvaTxt.getText().isEmpty()) {
                    costo = Double.valueOf(costoSinIvaTxt.getText().replace(",", "."));
                }
                producto.setIvaCero(false);
                int ro = comboI.getSelectedIndex();
                producto.setIvaProducto(ro);
                Double prex0 = Double.valueOf(precioTxt.getText().replace(",", "."));
                Double prex1 = prex0 - impux;
                switch (ro) {
                    case 1:
                        producto.setPrecio(prex1);
                        producto.setIvaCero(true);
                        break;
                    case 2:
                        prex0 = prex1 / 1.105;
                        producto.setPrecio(prex0);
                        break;
                    case 3:
                        prex0 = prex1 / 1.21;
                        producto.setPrecio(prex0);
                        break;
                    default:
                        prex0 = prex1 / 1.21;
                        producto.setPrecio(prex0);
                }
                Float margenAyM = 0F;
                if (!margenTxt.getText().isEmpty()) {
                    margenAyM = Float.valueOf(margenTxt.getText().replace(",", "."));
                }
                Integer cn = 0;
                if (!cantidadPorBultoTxt.getText().isEmpty()) {
                    cn = Integer.valueOf(cantidadPorBultoTxt.getText().replace(",", "."));
                }
                Float dcto = 0F;
                if (!descuentoTxt.getText().isEmpty()) {
                    dcto = Float.valueOf(descuentoTxt.getText().replace(",", "."));
                }
                Float margenCli = 0F;
                if (!margenClienteTxt.getText().isEmpty()) {
                    margenCli = Float.valueOf(margenClienteTxt.getText().replace(",", "."));
                }
                Date fu = new Date();
                if (!ultimaFechaTxt.getText().isEmpty()) {
                    try {
                        fu = sdf.parse(ultimaFechaTxt.getText());
                    } catch (ParseException ex) {
                        Logger.getLogger(ModificarProductoFrame2.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "ERROR EN FECHA");
                        ultimaFechaTxt.requestFocus();
                        return;
                    }
                }
                producto.setCosto(costo);
                producto.setImpuestoCompra(impux2);
                producto.setCantidadPorBulto(cn);
                producto.setDcto(dcto);
                producto.setMargenAyM(margenAyM);
                producto.setMargenCli(margenCli);
                producto.setFechaUltima(fu);
                if (actualizarWebChk.isSelected()) {
                    producto.setActualizarWeb(true);
                } else {
                    producto.setActualizarWeb(false);
                }
                if (actualizarListaChk.isSelected()) {
                    producto.setActualizarListaPrecios(true);
                } else {
                    producto.setActualizarListaPrecios(false);
                }
                if (actualizarGondolaChk.isSelected()) {
                    producto.setActualizarGondola(true);
                } else {
                    producto.setActualizarGondola(false);
                }
                if (asignarRubro(producto)) {
                    if (asignarSubRubro(producto)) {
                        try {
                            producto = new ProductoService().updateProducto(producto);
                        } catch (Exception ex) {
                            //ex.printStackTrace();
                            JOptionPane.showMessageDialog(this, "Ha ocurrido un error "
                                    + "guardando el Producto");
                            idTxt.requestFocus();
                            return;
                        }
                        JOptionPane.showMessageDialog(this, "Producto guardado correctamente.");
                        volver();
                    } else {
                        JOptionPane.showMessageDialog(this, "Ha ocurrido un error (Sub Rubro) guardando el Producto.");
                        comboSubRubro.requestFocus();
                        return;
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Ha ocurrido un error (Rubro) guardando el Producto.");
                    comboRubro.requestFocus();
                    return;
                }
            } else {
                JOptionPane.showMessageDialog(this, "q");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ha ocurrido un error guardando el Producto (COD BARRAS DUPLICADO).");
            codigoBarrasTxt.requestFocus();
            return;
        }
    }

    private void borrarCampos() {
        unidadChk.setSelected(true);
        margenClienteTxt.setText("");
        nombreProveBuscarTxt.setText("");
        comboProv.removeAllItems();
        costoFinalTxt.setText("");
        precioVentaTxt.setText("");
        if (!unidadChk.isSelected()) {
            cantidadCajaTxt.setEditable(false);
            codigoRelacionTxt.setEditable(false);
            filtroTxt.setEditable(false);
        } else {
            cantidadCajaTxt.setEditable(true);
            codigoRelacionTxt.setEditable(true);
            filtroTxt.setEditable(true);
        }
        comboRubro.removeAllItems();
        comboRubro.addItem(" ");
        comboSubRubro.removeAllItems();
        comboSubRubro.addItem(" ");
        comboCaja.removeAllItems();
        comboCaja.addItem("");
        idTxt.setText("");
        codigoBarrasTxt.setText("");
        impuestoTxt.setText("");
        sugeridoTxt.setText("");
        precioTxt.setText("");
        nombreTxt.setText("");
        cantidadCajaTxt.setText("0");
        codigoRelacionTxt.setText("");
        filtroTxt.setText("");
        costoSinIvaTxt.setText("");
        costoConIvaTxt.setText("");
        margenTxt.setText("");
        cantidadPorBultoTxt.setText("");
        //precioCalculadoTxt.setText("");
        sugeridoCalculadoTxt.setText("");
        descuentoTxt.setText("");
        ultimaFechaTxt.setText(sdf.format(new Date()));
        limpiarTabla();
        comboI.setSelectedIndex(3);
        costoFinalTxt.setEditable(false);
        precioVentaTxt.setEditable(false);
        //precioCalculadoTxt.setEditable(false);
        sugeridoCalculadoTxt.setEditable(false);
        idTxt.setEditable(false);
    }

    private void llenarComboRubro() {
        try {
            listaRubros = new RubroService().getAllRubros();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "No se encuentran Rubros para llenar");
        }
        DefaultComboBoxModel model = (DefaultComboBoxModel) comboRubro.getModel();
        if (listaRubros != null && !listaRubros.isEmpty()) {
            for (Rubro rubro : listaRubros) {
                model.addElement(rubro.getNombre());
            }
            comboRubro.setModel(model);
        }
    }

    private void llenarComboSubRubro() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) comboSubRubro.getModel();
        try {
            listaSubRubros = new SubRubroService().getAllSubRubros();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "No se encuentran SubRubros para llenar");
        }
        if (listaSubRubros != null && !listaSubRubros.isEmpty()) {
            for (SubRubro subRubro : listaSubRubros) {
                model.addElement(subRubro.getDetalle());
            }
            comboSubRubro.setModel(model);
        }
    }

    private boolean validarCampos() {
        if (nombreTxt.getText().trim().length() > 39) {
            JOptionPane.showMessageDialog(this, "Largo Producto Superado - " + String.valueOf(nombreTxt.getText().trim().length()));
            nombreTxt.requestFocus();
            return false;
        }
        Double cos9 = Double.valueOf(costoSinIvaTxt.getText().replace(",", "."));
        if (cos9 < .01) {
            JOptionPane.showMessageDialog(this, "DEBE INDICAR UN COSTO");
            costoSinIvaTxt.requestFocus();
            return false;
        }
        int ro;
//        ro = comboProv.getSelectedIndex();
//        if (ro < 1) {
//            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN PROVEEDOR");
//            nombreProveBuscarTxt.requestFocus();
//            return false;
//        }
        if (costoSinIvaTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DEBE INDICAR UN COSTO");
            costoSinIvaTxt.requestFocus();
            return false;
        }
        ro = comboI.getSelectedIndex();
        if (ro < 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN PORCENTUAL DE IVA");
            comboI.requestFocus();
            return false;
        }
        if (idTxt.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(this, "Producto - Falta completar CODIGO");
            idTxt.requestFocus();
            return false;
        }
        if (nombreTxt.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(this, "Producto - Falta completar NOMBRE");
            nombreTxt.requestFocus();
            return false;
        }
        if (precioTxt.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(this, "Producto - No permitido Sin precio");
            precioTxt.requestFocus();
            return false;
        }
        if (comboRubro.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Producto - Seleccione Rubro");
            comboRubro.requestFocus();
            return false;
        }
        if (comboSubRubro.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "producto - Seleccione Sub Rubro");
            comboSubRubro.requestFocus();
            return false;
        }
        if (!unidadChk.isSelected()) {
            if (codigoRelacionTxt.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "DEBE INDICAR PRODUCTO RELACIONADO");
                codigoRelacionTxt.requestFocus();
                return false;
            }
            if (filtroTxt.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "DEBE INDICAR PRODUCTO RELACIONADO");
                codigoRelacionTxt.requestFocus();
                return false;
            }
        }
        return true;
    }

    private boolean asignarRubro(Producto prod) {
        int itemSeleccionado = comboRubro.getSelectedIndex();
        if (itemSeleccionado >= 1) {
            prod.setRubro(listaRubros.get(itemSeleccionado - 1));
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Rubro de la lista.");
            return false;
        }
    }

    private boolean asignarSubRubro(Producto prod) {
        int itemSeleccionado = comboSubRubro.getSelectedIndex();
        if (itemSeleccionado >= 1) {
            prod.setSubRubro(listaSubRubros.get(itemSeleccionado - 1));
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un SubRubro de la lista.");
            return false;
        }
    }

    private void mostrar() {
        int row = comboCaja.getSelectedIndex();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN PRODUCTO DE LA LISTA");
            comboCaja.requestFocus();
            return;
        }
        productoRelacionado = null;
        productoRelacionado = productosRelacionados.get(row - 1);
        codigoRelacionTxt.setText(productoRelacionado.getCodigo().toString());
        filtroTxt.setText(productoRelacionado.getDetalle());
        guardarBtn.requestFocus();
    }

    private void buscarPorCodigo() {
        if (codigoRelacionTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "INDIQUE UN CODIGO VALIDO");
            codigoRelacionTxt.requestFocus();
            return;
        }
        int codigo = Integer.valueOf(codigoRelacionTxt.getText());
        productoRelacionado = null;
        try {
            productoRelacionado = new ProductoService().getProductoByCodigo(codigo);
        } catch (Exception ex) {
            Logger.getLogger(ModificarProductoFrame2.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (productoRelacionado != null) {
            filtroTxt.setText(productoRelacionado.getDetalle());
            guardarBtn.requestFocus();
        } else {
            JOptionPane.showMessageDialog(this, "CODIGO INEXISTENTE");
            codigoRelacionTxt.requestFocus();
            return;
        }
    }

    private void buscarPorFiltro() {
        if (filtroTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "INGRESE UN DETALLE A BUSCAR");
            filtroTxt.requestFocus();
            return;
        }
        String filtro2 = filtroTxt.getText();
        productosRelacionados = null;
        try {
            productosRelacionados = new ProductoService().getProductosByFiltroActivosSinDepo(filtro2);
        } catch (Exception ex) {
            Logger.getLogger(ModificarProductoFrame2.class.getName()).log(Level.SEVERE, null, ex);
        }
        comboCaja.removeAllItems();
        comboCaja.addItem("");
        if (productosRelacionados != null && !productosRelacionados.isEmpty()) {
            for (Producto p : productosRelacionados) {
                comboCaja.addItem(p.getDetalle());
            }
        }
        comboCaja.requestFocus();
        comboCaja.addFocusListener(null);
        comboCaja.showPopup();
    }

    private void calcular() {
        int r = comboI.getSelectedIndex();
        if (r < 1) {
            comboI.requestFocus();
            return;
        }
        Double ps;
        Double pc;
        Float ma;
        Float mc;
        Float ds;
        Double imps;
        Double ds1;
        Double pf;
        Float imp_calc;
        int cxb;
        if (r == 1) {
            iva = 0F;
        } else {
            if (r == 2) {
                iva = 10.5F;
            } else {
                if (r == 3) {
                    iva = 21F;
                } else {
                    iva = 21F;
                }
            }
        }
        if (costoSinIvaTxt.getText().isEmpty()) {
            if (costoConIvaTxt.getText().isEmpty()) {
                costoSinIvaTxt.requestFocus();
                return;
            } else {
                pc = Double.valueOf(costoConIvaTxt.getText().replace(",", "."));
                ps = pc / (1 + iva / 100);
                costoSinIvaTxt.setText(df.format(ps));
                costoConIvaTxt.setText(df.format(pc));
            }
        } else {
            ps = Double.valueOf(costoSinIvaTxt.getText().replace(",", "."));
            pc = ps * (1 + iva / 100);
            costoSinIvaTxt.setText(df.format(ps));
            costoConIvaTxt.setText(df.format(pc));
        }
        if (descuentoTxt.getText().isEmpty()) {
            descuentoTxt.requestFocus();
            return;
        }
        ds = Float.valueOf(descuentoTxt.getText().replace(",", "."));
        ds1 = pc * ds / 100;
        pf = pc - ds1;
        costoFinalTxt.setText(df.format(pf));
        if (cantidadPorBultoTxt.getText().isEmpty()) {
            cantidadPorBultoTxt.requestFocus();
            return;
        }
        cxb = Integer.valueOf(cantidadPorBultoTxt.getText().replace(",", "."));
        if (margenTxt.getText().isEmpty()) {
            margenTxt.requestFocus();
            return;
        }
        ma = Float.valueOf(margenTxt.getText().replace(",", "."));
        if (margenClienteTxt.getText().isEmpty()) {
            margenClienteTxt.requestFocus();
            return;
        }
        mc = Float.valueOf(margenClienteTxt.getText().replace(",", "."));
        if (impuestoCompraTxt.getText().isEmpty()) {
            impuestoCompraTxt.requestFocus();
            return;
        }
        imp_calc = Float.valueOf(impuestoCompraTxt.getText().replace(",", "."));
        imp_calc = imp_calc * (1 + ma / 100) * (1 - ds / 100);
        impuestoCalculadoTxt.setText(df.format(imp_calc));
        imps = Double.valueOf(impuestoCalculadoTxt.getText().replace(",", "."));
        Double tmp0 = pf * ma / 100;
        Double tmp1 = pf + tmp0;
        precioVentaTxt.setText(df.format(tmp1 + imps));
        Double tmp2 = (tmp1 + imps) * (1 + mc / 100);
        Double tmp3 = (tmp2 / cxb);
        sugeridoCalculadoTxt.setText(df.format(tmp3));
        calcular1();
    }

    private void agregarReferenciaPrecios() {
        int row = comboProv.getSelectedIndex();
        if (row > 0) {
            String nom = proveedores.get(row - 1).getId().toString();
            Double costo = Double.valueOf(costoNetoTxt.getText().replace(",", "."));
            HistorialPrecio h1 = new HistorialPrecio();
            Date fe;
            try {
                fe = sdf.parse(ultimaFechaTxt.getText());
            } catch (ParseException ex) {
                Logger.getLogger(ModificarProductoFrame2.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error en fecha");
                ultimaFechaTxt.requestFocus();
                return;
            }
            h1.setFecha(fe);
            h1.setNombre(nom);
            h1.setPrecio(costo);
            h1.setProducto(producto);
            try {
                new HistorialPrecioService().saveHistorialPrecio(h1);
            } catch (Exception ex) {
                Logger.getLogger(ModificarProductoFrame2.class.getName()).log(Level.SEVERE, null, ex);
            }
            llenarTabla();
        }
    }

    private void calcular1() {
        Float dto = Float.valueOf(descuentoTxt.getText().replace(",", "."));
        Double pc = Double.valueOf(costoConIvaTxt.getText().replace(",", "."));
        Double costoFinal = pc * (1 - dto / 100);
        costoFinalTxt.setText(df.format(costoFinal));
        Double ic = Double.valueOf(impuestoCompraTxt.getText().replace(",", "."));
        ic = ic * (1 - dto / 100);
        costoNetoTxt.setText(df.format(costoFinal + ic));
    }

    private void llenarCampos() {
        idTxt.setText(producto.getCodigo().toString());
        idTxt.setEditable(false);
        nombreTxt.setText(producto.getDetalle());
        if (producto.getCodigoBarras() != null) {
            codigoBarrasTxt.setText(producto.getCodigoBarras().toString());
        }
        if (producto.getCosto() != null) {
            costoSinIvaTxt.setText(df.format(producto.getCosto()));
        } else {
            costoSinIvaTxt.setText(df.format(0.0));
        }
        if (producto.getIvaProducto() != null) {
            comboI.setSelectedIndex(producto.getIvaProducto());
        } else {
            comboI.setSelectedIndex(0);
        }
        actualizarGondolaChk.setSelected(false);
        if (producto.getActualizarGondola() != null) {
            if (producto.getActualizarGondola()) {
                actualizarGondolaChk.setSelected(true);
            }
        }
        actualizarWebChk.setSelected(false);
        if (producto.getActualizarWeb() != null) {
            if (producto.getActualizarWeb()) {
                actualizarWebChk.setSelected(true);
            }
        }
        actualizarListaChk.setSelected(false);
        if (producto.getActualizarListaPrecios() != null) {
            if (producto.getActualizarListaPrecios()) {
                actualizarListaChk.setSelected(true);
            }
        }
        Double precioSinIva = Double.valueOf(costoSinIvaTxt.getText().replace(",", "."));
        Float iva;
        int r = comboI.getSelectedIndex();
        if (r == 1) {
            iva = 0F;
            comboI.setSelectedIndex(1);
        } else {
            if (r == 2) {
                iva = 10.5F;
                comboI.setSelectedIndex(2);
            } else {
                if (r == 3) {
                    comboI.setSelectedIndex(3);
                    iva = 21F;
                } else {
                    comboI.setSelectedIndex(3);
                    iva = 21F;
                }
            }
        }
        Double precioConIva = precioSinIva * (1 + iva / 100);
        costoConIvaTxt.setText(df.format(precioConIva));
        if (producto.getDcto() != null) {
            descuentoTxt.setText(df1.format(producto.getDcto()));
        } else {
            descuentoTxt.setText(df1.format(0));
        }
        if (producto.getCantidadPorBulto() != null) {
            cantidadPorBultoTxt.setText(df2.format(producto.getCantidadPorBulto()));
        } else {
            cantidadPorBultoTxt.setText(df2.format(1));
        }
        if (producto.getMargenAyM() != null) {
            margenTxt.setText(df1.format(producto.getMargenAyM()));
        } else {
            margenTxt.setText(df1.format(0));
        }
        if (producto.getMargenCli() != null) {
            margenClienteTxt.setText(df1.format(producto.getMargenCli()));
        } else {
            margenClienteTxt.setText(df1.format(0));
        }
        Float imp_calc;
        if (producto.getImpuesto() != null) {
            impuestoTxt.setText(df.format(producto.getImpuesto()));
            imp_calc = producto.getImpuesto();
        } else {
            impuestoTxt.setText(df.format(0));
            imp_calc = 0F;
        }
        if (producto.getImpuestoCompra() != null) {
            impuestoCompraTxt.setText(df.format(producto.getImpuestoCompra()));
        } else {
            impuestoCompraTxt.setText(df.format(0));
        }
        if (producto.getPrecio() != null) {
            Double prex = producto.getPrecio();
            Double prex1 = prex * (1 + iva / 100);
            prex1 += imp_calc;
            precioTxt.setText(df.format(prex1));
        } else {
            precioTxt.setText(df.format(0));
        }
        if (producto.getSugerido() != null) {
            sugeridoTxt.setText(df.format(producto.getSugerido()));
        } else {
            sugeridoTxt.setText(df.format(0));
        }
        calcular();
        Rubro ru1 = producto.getRubro();
        SubRubro ru2 = producto.getSubRubro();
        int rr = 1;
        for (Rubro ru : listaRubros) {
            Long a1 = ru1.getId();
            Long a2 = ru.getId();
            if (a1.equals(a2)) {
                comboRubro.setSelectedIndex(rr);
                break;
            }
            rr += 1;
        }
        rr = 1;
        for (SubRubro ru : listaSubRubros) {
            Long a1 = ru2.getId();
            Long a2 = ru.getId();
            if (a1.equals(a2)) {
                comboSubRubro.setSelectedIndex(rr);
                break;
            }
            rr += 1;
        }
        calcular1();
        llenarTabla();
    }

    private void limpiarTabla() {
        int rows = tabla.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }

    private void llenarTabla() {
        hps = null;
        try {
            hps = new HistorialPrecioService().getByProducto(producto);
        } catch (Exception ex) {
            Logger.getLogger(ModificarProductoFrame2.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (hps != null & !hps.isEmpty()) {
            limpiarTabla();
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (HistorialPrecio hp : hps) {
                Object o[] = new Object[3];
                Long l = Long.valueOf(hp.getNombre());
                Proveedor p = null;
                try {
                    p = new ProveedorService().getProveedorById(l);
                } catch (Exception ex) {
                    Logger.getLogger(ModificarProductoFrame2.class.getName()).log(Level.SEVERE, null, ex);
                }
                o[0] = p.getRazonSocial();
                o[1] = sdf.format(hp.getFecha());
                o[2] = df.format(hp.getPrecio());
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void volver() {
        AbmProductoV2Frame abmProductoFrame = new AbmProductoV2Frame(filtro);
        abmProductoFrame.setVisible(true);
//        MainFrame mf = new MainFrame();
//        mf.setVisible(true);
        this.dispose();
    }

    private boolean validarDuplicadoCodigoBarras() {
        List<Producto> ppp = null;
        String cb_s = codigoBarrasTxt.getText();
        Integer cod_p = 0;
        Integer cod_f = Integer.valueOf(idTxt.getText());
//        System.out.println(cod_p);
//        System.out.println(cod_f);
//        JOptionPane.showMessageDialog(this, "TT");
        if (cb_s.equals("0")) {
            return true;
        }
        if (cb_s.isEmpty()) {
            return true;
        }
        Long cb = Long.valueOf(cb_s);
        try {
            ppp = new ProductoService().getProductoByCodigoBarras2(cb);
        } catch (Exception ex) {
            Logger.getLogger(NuevoProductoFrame1.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error leyendo productos activos");
            return false;
        }
//        System.out.println(ppp.isEmpty());
//        System.out.println(ppp.size());
//        System.out.println(cod_p);
//        System.out.println(cod_f);
        if (ppp.isEmpty()) {
            return true;
        } else {
            if (ppp.size() == 1) {
                cod_p = ppp.get(0).getCodigo();
//                System.out.println(ppp.isEmpty());
//                System.out.println(ppp.size());
//                System.out.println(cod_p);
//                System.out.println(cod_f);
//                JOptionPane.showMessageDialog(this, "TT2");
                if (cod_f.equals(cod_p)) {
                    return true;
                } else {
                    return false;
                }
            } else {
//                JOptionPane.showMessageDialog(this, "NO ES SIZE 1");
                return false;
            }
        }
    }
}
