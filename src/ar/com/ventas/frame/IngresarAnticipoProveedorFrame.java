/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ConfiguracionProveedor;
import ar.com.ventas.entities.CuentaCorrienteProveedor;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.entities.ReciboProveedor;
import ar.com.ventas.services.ConfiguracionProveedorService;
import ar.com.ventas.services.CuentaCorrienteProveedorService;
import ar.com.ventas.services.ProveedorService;
import ar.com.ventas.services.ReciboProveedorService;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mario
 */
public class IngresarAnticipoProveedorFrame extends javax.swing.JFrame {

    private Proveedor proveedor;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private Integer menu;

    /**
     * Creates new form IngresarAnticipoProveedorFrame
     */
    public IngresarAnticipoProveedorFrame(Proveedor p, Integer menu) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        this.proveedor = p;
        this.menu = menu;
        proveedorTxt.setText(proveedor.getRazonSocial());
        fechaTxt.setText(sdf.format(new Date()));
        fechaTxt.setEditable(true);
        importeTxt.setText("");
        fechaTxt.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        proveedorTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        aplicarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        fechaTxt = new javax.swing.JTextField();
        importeTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("INGRESAR ANTICIPO PROVEEDOR");

        proveedorTxt.setText("PROVEEDOR");

        jLabel1.setText("Fecha:");

        jLabel2.setText("Importe:");

        aplicarBtn.setText("Ingresar Pago");
        aplicarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaTxt.setText("FECHA");
        fechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaTxtKeyPressed(evt);
            }
        });

        importeTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        importeTxt.setText("IMPORTE");
        importeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                importeTxtKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(proveedorTxt)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(aplicarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(importeTxt))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 215, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(proveedorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(importeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aplicarBtn)
                    .addComponent(volverBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void aplicarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarBtnActionPerformed
        aplicar();
    }//GEN-LAST:event_aplicarBtnActionPerformed

    private void fechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (fechaTxt.getText().isEmpty()) {
                fechaTxt.setText(sdf.format(new Date()));
                fechaTxt.requestFocus();
            } else {
                int largo = fechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    fechaTxt.setText(fechaTxt.getText() + "/" + f);
                    importeTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        fechaTxt.setText(fechaTxt.getText() + an);
                        importeTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            fechaTxt.setText("");
//                          request focus mismo campo
                            fechaTxt.requestFocus();
                        } else {
                            String veinte = fechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÃ‘O");
//                              request focus mismo campo
                                fechaTxt.requestFocus();
                            } else {
                                importeTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_fechaTxtKeyPressed

    private void importeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_importeTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            aplicar();
        }
    }//GEN-LAST:event_importeTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IngresarAnticipoProveedorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IngresarAnticipoProveedorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IngresarAnticipoProveedorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngresarAnticipoProveedorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IngresarAnticipoProveedorFrame(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aplicarBtn;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JTextField importeTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField proveedorTxt;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        CuentaCorrienteProveedorFrame mf = new CuentaCorrienteProveedorFrame(proveedor, menu);
        mf.setVisible(true);
        this.dispose();
    }

    private void aplicar() {
        int escape = JOptionPane.showConfirmDialog(null,
                "Esta seguro de generar este pago?",
                "Atencion", JOptionPane.YES_NO_OPTION);
        if (escape == 0) {
            pagar2();
        }
    }

    private void pagar() {
        if (importeTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un importe.");
            importeTxt.requestFocus();
            return;
        }
        int nr1 = 0;
        try {
            ConfiguracionProveedor cfg = new ConfiguracionProveedorService().getFacturas(1L);
            nr1 = cfg.getNumeroReciboCompras();
            nr1 += 1;
            cfg.setNumeroReciboCompras(nr1);
            new ConfiguracionProveedorService().updateConfiguracion(cfg);
        } catch (Exception ex) {
            Logger.getLogger(IngresarAnticipoProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Double imp = Double.valueOf(importeTxt.getText());
        Double saldo = proveedor.getSaldo();
        saldo -= imp;
        proveedor.setSaldo(saldo);
        try {
            new ProveedorService().updateProveedor(proveedor);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR");
        }

        CuentaCorrienteProveedor ccp = new CuentaCorrienteProveedor();
        ReciboProveedor rp = new ReciboProveedor();
        Date fecha = new Date();
        Date a = new Date();
        try {
            fecha = sdf.parse(fechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        if (fecha.after(a)) {
            JOptionPane.showMessageDialog(this, "Error fecha posterior a HOY");
            fechaTxt.requestFocus();
            return;
        }
        rp.setNumero(nr1);
        rp.setFecha(fecha);
        rp.setImporte(imp);
        rp.setProveedor(proveedor);
        rp.setImputado(false);
        rp.setImporteImputado(0.0);
        try {
            rp = new ReciboProveedorService().saveRecibo(rp);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        ccp.setReciboProveedor(rp);
        ccp.setDebe(0.00);
        ccp.setHaber(imp);
        ccp.setSaldo(saldo);
        ccp.setProveedor(proveedor);
        ccp.setFecha(fecha);
        try {
            new CuentaCorrienteProveedorService().saveCtaCteProveedor(ccp);
        } catch (Exception ex) {
            Logger.getLogger(NuevoComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        Calendar cal = Calendar.getInstance();
        cal.setTime(fecha);
        cal.add(Calendar.DATE, -365);
        Date fecha1 = cal.getTime();
        Date fecha2 = new Date();
        List<CuentaCorrienteProveedor> ccp1 = null;
        try {
            ccp1 = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(proveedor, fecha1, fecha2);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Double sa = 0.0;
        int x = 0;
        for (CuentaCorrienteProveedor cc1 : ccp1) {
            if (x == 0) {
                sa = cc1.getSaldo();
                x = 1;
            } else {
                sa += cc1.getDebe() - cc1.getHaber();
                cc1.setSaldo(sa);
                try {
                    new CuentaCorrienteProveedorService().updateCtaCteProveedor(cc1);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        JOptionPane.showMessageDialog(this, "Pago aplicado");
        CuentaCorrienteProveedorFrame ccpf = new CuentaCorrienteProveedorFrame(proveedor, menu);
        ccpf.setVisible(true);
        this.dispose();

    }

    private void pagar2() {
        if (importeTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un importe.");
            importeTxt.requestFocus();
            return;
        }
        int nr1 = 0;
        ConfiguracionProveedor cfg = null;
        try {
            cfg = new ConfiguracionProveedorService().getFacturas(1L);
        } catch (Exception ex) {
            Logger.getLogger(IngresarAnticipoProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR LEYENDO NUMEROS DE RECIBOS PROVEEDORES");
            return;
        }
        nr1 = cfg.getNumeroReciboCompras();
        nr1 += 1;
        cfg.setNumeroReciboCompras(nr1);
//        new ConfiguracionProveedorService().updateConfiguracion(cfg);

        Double imp = Double.valueOf(importeTxt.getText());
        Proveedor p1 = null;
        Integer codigo = proveedor.getCodigo();
        try {
            p1 = new ProveedorService().getProveedorByCodigo(codigo);
        } catch (Exception ex) {
            Logger.getLogger(IngresarAnticipoProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR ACTUALIZANDO SALDO PROVEEDOR");
            return;
        }
        Double saldo = p1.getSaldo();

        saldo -= imp;
        p1.setSaldo(saldo);
//        try {
//            new ProveedorService().updateProveedor(proveedor);
//        } catch (Exception ex) {
//            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
//            JOptionPane.showMessageDialog(this, "ERROR");
//        }

        CuentaCorrienteProveedor ccp = new CuentaCorrienteProveedor();
        ReciboProveedor rp = new ReciboProveedor();
        Date fecha;
        Date a = new Date();
        try {
            fecha = sdf.parse(fechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR CON LA FECHA DEL PAGO");
            return;
        }
        if (fecha.after(a)) {
            JOptionPane.showMessageDialog(this, "Error fecha posterior a HOY");
            fechaTxt.requestFocus();
            return;
        }
        rp.setNumero(nr1);
        rp.setFecha(fecha);
        rp.setImporte(imp);
        rp.setProveedor(p1);
        rp.setImputado(false);
        rp.setImporteImputado(0.0);
//        try {
//            rp = new ReciboProveedorService().saveRecibo(rp);
//        } catch (Exception ex) {
//            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
        ccp.setReciboProveedor(rp);
        ccp.setDebe(0.00);
        ccp.setHaber(imp);
        ccp.setSaldo(saldo);
        ccp.setProveedor(p1);
        ccp.setFecha(fecha);

        Date fecha2 = new Date();
        List<CuentaCorrienteProveedor> ccp1 = null;
        try {
            ccp1 = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(proveedor, fecha, fecha2);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        int x = 0;
        if (ccp1 != null && !ccp1.isEmpty()) {
            String f1 = sdf.format(ccp1.get(0).getFecha());
            String f2 = sdf.format(fecha);
            if (f1.equals(f2)) {
                for (CuentaCorrienteProveedor cc1 : ccp1) {
                    f1 = sdf.format(cc1.getFecha());
                    Double debe = cc1.getDebe();
                    Double haber = cc1.getHaber();
                    Double saldo_x = cc1.getSaldo();
                    if (!f1.equals(f2)) {
                        if (x == 0) {
                            saldo = saldo_x + haber - debe;
                            saldo = saldo - imp;
                            ccp.setSaldo(saldo);
                            x = 1;
                            saldo = saldo + debe - haber;
                            cc1.setSaldo(saldo);
                            System.out.println("saldo: " + saldo);
                            System.out.println("saldo_x" + saldo_x);
                            System.out.println("debe:" + debe);
                            System.out.println("haber:" + haber);
                            System.out.println("imp rc:" + imp);
                            System.out.println("id:" + cc1.getId());
//                            JOptionPane.showMessageDialog(this, "VER");
                        } else {
                            saldo = saldo + debe - haber;
                            cc1.setSaldo(saldo);
                        }
                    }
                }
            } else {
                if (ccp1.get(0).getFecha().after(fecha)) { // DESPUES
                    for (CuentaCorrienteProveedor cc1 : ccp1) {
                        Double debe = cc1.getDebe();
                        Double haber = cc1.getHaber();
                        Double saldo_x = cc1.getSaldo();
                        if (x == 0) {
                            saldo = saldo_x + haber - debe;
                            saldo -= imp;
                            ccp.setSaldo(saldo);
                            x = 1;
                            saldo = saldo + debe - haber;
                            cc1.setSaldo(saldo);
                        } else {
                            saldo = saldo + debe - haber;
                            cc1.setSaldo(saldo);
                            x = 1;
                        }
                    }
                }
            }
        } else {
            ccp1 = null;
        }
        try {
            new CuentaCorrienteProveedorService().saveMovimientoCompletoCtaCteProveedor(ccp, ccp1, rp, p1, cfg);
        } catch (Exception ex) {
            Logger.getLogger(IngresarAnticipoProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, "Pago aplicado");
        CuentaCorrienteProveedorFrame ccpf = new CuentaCorrienteProveedorFrame(p1, menu);
        ccpf.setVisible(true);
        this.dispose();

    }
}
