/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Activity;
import ar.com.ventas.entities.ActivityRow;
import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.ComprobanteVentas;
import ar.com.ventas.entities.IvaVentas;
import ar.com.ventas.entities.PorcentualVendedor;
import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.RenglonFactura;
import ar.com.ventas.entities.RenglonNotaCredito;
import ar.com.ventas.entities.Rental;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.Vendedor;
import ar.com.ventas.services.ActivityRowService;
import ar.com.ventas.services.ActivityService;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.IvaVentasService;
import ar.com.ventas.services.PorcentualVendedorService;
import ar.com.ventas.services.ProductoService;
import ar.com.ventas.services.RenglonFacturaService;
import ar.com.ventas.services.RenglonNotaCreditoService;
import ar.com.ventas.services.RentalService;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Mario
 */
public class ComisionesFrame extends javax.swing.JFrame {

    private Date desde = new Date();
    private Date hasta = desde;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private DecimalFormat dfs = new DecimalFormat("0000");
    private DecimalFormat dfn = new DecimalFormat("00000000");
    private DecimalFormat dfc = new DecimalFormat("00000");
    private List<IvaVentas> facturas = null;
    private List<IvaVentas> notasDebito = null;
    private List<IvaVentas> notasCredito = null;
    private List<Activity> presupuestos = null;
    private List<Activity> devoluciones = null;
    private Vendedor vendedor;
    private List<PorcentualVendedor> porcentuales;

    /**
     * Creates new form ComisionesFrame
     * @param vendedor
     */
    public ComisionesFrame(Vendedor vendedor) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        this.vendedor = vendedor;
        cargarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nombreVendedorTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        deFechaTxt = new javax.swing.JTextField();
        aFechaTxt = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        excelBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla0 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("COMISIONES POR VENDEDOR");

        jLabel1.setText("Vendedor:");

        nombreVendedorTxt.setText("NOMBRE VENDEDOR");

        jLabel2.setText("de Fecha:");

        jLabel3.setText("a Fecha:");

        deFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deFechaTxt.setText("DE FECHA");
        deFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deFechaTxtKeyPressed(evt);
            }
        });

        aFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        aFechaTxt.setText("A FECHA");
        aFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aFechaTxtKeyPressed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        excelBtn.setText("Excel");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        tabla1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rubro", "Porcentual"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla1);

        tabla0.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÃ³digo", "Cliente", "FC", "Massalin", "Nobleza", "Cigarrillos", "Tarjetas", "Varios", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabla0);
        if (tabla0.getColumnModel().getColumnCount() > 0) {
            tabla0.getColumnModel().getColumn(1).setPreferredWidth(200);
            tabla0.getColumnModel().getColumn(2).setPreferredWidth(200);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nombreVendedorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aFechaTxt))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buscarBtn)
                                .addGap(18, 18, 18)
                                .addComponent(excelBtn)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(nombreVendedorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(deFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(aFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(buscarBtn)
                                .addComponent(excelBtn))))
                    .addComponent(volverBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        buscar();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void deFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (deFechaTxt.getText().isEmpty()) {
                deFechaTxt.setText(sdf.format(new Date()));
                deFechaTxt.requestFocus(); //mismo campo
            } else {
                int largo = deFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    deFechaTxt.setText(deFechaTxt.getText() + "/" + f);
                    aFechaTxt.requestFocus();
//                  request focus prox campo
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        deFechaTxt.setText(deFechaTxt.getText() + an);
                        aFechaTxt.requestFocus();
//                      request focus prox campo
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            deFechaTxt.setText("");
//                          request focus mismo campo
                            deFechaTxt.requestFocus();
                        } else {
                            String veinte = deFechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÃO");
//                              request focus mismo campo
                                deFechaTxt.requestFocus();
                            } else {
                                aFechaTxt.requestFocus(); // request focus prox campo
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_deFechaTxtKeyPressed

    private void aFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (aFechaTxt.getText().isEmpty()) {
                aFechaTxt.setText(sdf.format(new Date()));
                aFechaTxt.requestFocus(); //mismo campo
            } else {
                int largo = aFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    aFechaTxt.setText(aFechaTxt.getText() + "/" + f);
                    buscar();
//                  request focus prox campo
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        aFechaTxt.setText(aFechaTxt.getText() + an);
                        buscar();
//                      request focus prox campo
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            aFechaTxt.setText("");
//                          request focus mismo campo
                            aFechaTxt.requestFocus();
                        } else {
                            String veinte = aFechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÃO");
//                              request focus mismo campo
                                aFechaTxt.requestFocus();
                            } else {
                                buscar(); // request focus prox campo
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_aFechaTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ComisionesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ComisionesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ComisionesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComisionesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ComisionesFrame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aFechaTxt;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JTextField deFechaTxt;
    private javax.swing.JButton excelBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nombreVendedorTxt;
    private javax.swing.JTable tabla0;
    private javax.swing.JTable tabla1;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void buscar() {
        limpiarTabla();
        if (deFechaTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar una fecha");
            deFechaTxt.requestFocus();
            return;
        }
        try {
            desde = sdf.parse(deFechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(ComisionesFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error en fechas");
            deFechaTxt.requestFocus();
            return;
        }
        if (aFechaTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar una fecha");
            aFechaTxt.requestFocus();
            return;
        }
        try {
            hasta = sdf.parse(aFechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(ComisionesFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error en fechas");
            aFechaTxt.requestFocus();
            return;
        }
        porcentuales = null;
        try {
            porcentuales = new PorcentualVendedorService().getAllPorcentualByVendedor(vendedor);
        } catch (Exception ex) {
            Logger.getLogger(ComisionesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (porcentuales != null && !porcentuales.isEmpty()) {
            Integer po[] = new Integer[6];
            Float pc[] = new Float[6];
            for (int i = 1; i < 6; i++) {
                po[i] = 0;
                pc[i] = 0F;
            }
            for (PorcentualVendedor por : porcentuales) {
                po[por.getRubro().getCodigo()] = 1;
                pc[por.getRubro().getCodigo()] = por.getPorcentual();
            }
            facturas = null;
            notasCredito = null;
            notasDebito = null;
            try {
                facturas = new IvaVentasService().getFacturasPorVendedorEntreFechas(vendedor, desde, hasta);
                notasCredito = new IvaVentasService().getNotasCreditoPorVendedorEntreFechas(vendedor, desde, hasta);
                notasDebito = new IvaVentasService().getNotasDebitoPorVendedorEntreFechas(vendedor, desde, hasta);
            } catch (Exception ex) {
                Logger.getLogger(ComisionesFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            presupuestos = null;
            devoluciones = null;
            Long cod = vendedor.getId();
            try {
                presupuestos = new ActivityService().getPresupuestoByVendedor(cod, desde, hasta);
                devoluciones = new ActivityService().getDevolucionByVendedor(cod, desde, hasta);
            } catch (Exception ex) {
                Logger.getLogger(ComisionesFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            List<ComprobanteVentas> comprobantes = new ArrayList<>();
            if (facturas != null && !facturas.isEmpty()) {
                for (IvaVentas i : facturas) {
                    ComprobanteVentas co = new ComprobanteVentas();
                    co.setDb(1);
                    co.setId_cpbte(i.getId());
                    String str = i.getCliente().getCodigo()
                            + "-" + i.getLetra() + "-" + dfs.format(i.getNumeroSucursal())
                            + "-" + dfn.format(i.getNumeroFactura());
                    co.setOrden(str);
                    comprobantes.add(co);
                }
            }
            if (notasDebito != null && !notasDebito.isEmpty()) {
                for (IvaVentas i : notasDebito) {
                    ComprobanteVentas co = new ComprobanteVentas();
                    co.setDb(2);
                    co.setId_cpbte(i.getId());
                    co.setOrden(i.getCliente().getCodigo()
                            + "-" + i.getLetra() + "-" + dfs.format(i.getNumeroSucursal())
                            + "-" + dfn.format(i.getNumeroFactura()));
                    comprobantes.add(co);
                }
            }
            if (notasCredito != null && !notasCredito.isEmpty()) {
                for (IvaVentas i : notasCredito) {
                    ComprobanteVentas co = new ComprobanteVentas();
                    co.setDb(3);
                    co.setId_cpbte(i.getId());
                    co.setOrden(i.getCliente().getCodigo()
                            + "-" + i.getLetra() + "-" + dfs.format(i.getNumeroSucursal())
                            + "-" + dfn.format(i.getNumeroFactura()));
                    comprobantes.add(co);
                }
            }
            if (presupuestos != null && !presupuestos.isEmpty()) {
                for (Activity i : presupuestos) {
                    ComprobanteVentas co = new ComprobanteVentas();
                    co.setDb(4);
                    co.setId_cpbte(i.getId());
                    co.setOrden(i.getCustomer().getCodigo()
                            + "-" + i.getLetra() + "-" + dfs.format(i.getNumeroSucursal())
                            + "-" + dfn.format(i.getNumeroFactura()));
                    comprobantes.add(co);
                }
            }
            if (devoluciones != null && !devoluciones.isEmpty()) {
                for (Activity i : devoluciones) {
                    ComprobanteVentas co = new ComprobanteVentas();
                    co.setDb(5);
                    co.setId_cpbte(i.getId());
                    co.setOrden(i.getCustomer().getCodigo()
                            + "-" + i.getLetra() + "-" + dfs.format(i.getNumeroSucursal())
                            + "-" + dfn.format(i.getNumeroFactura()));
                    comprobantes.add(co);
                }
            }
            Collections.sort(comprobantes);
            if (!comprobantes.isEmpty()) {
                Double totalR1 = 0.00;
                Double totalR2 = 0.00;
                Double totalR3 = 0.00;
                Double totalR4 = 0.00;
                Double totalR5 = 0.00;
                Double subtoRub1 = 0.00;
                Double subtoRub2 = 0.00;
                Double subtoRub3 = 0.00;
                Double subtoRub4 = 0.00;
                Double subtoRub5 = 0.00;
                Double totalRubros = 0.00;
                DefaultTableModel tbl = (DefaultTableModel) tabla0.getModel();
                for (ComprobanteVentas com : comprobantes) {
                    Long id_fc = com.getId_cpbte();
                    Integer tipo = com.getDb();
                    if (tipo == 1 || tipo == 2) {
                        IvaVentas i = null;
                        try {
                            i = new IvaVentasService().getIvaVentasById(id_fc);
                        } catch (Exception ex) {
                            Logger.getLogger(ComisionesFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        List<RenglonFactura> rf = null;
                        try {
                            rf = new RenglonFacturaService().getAllRenglonFacturaFromIvaVentas(i);
                        } catch (Exception ex) {
                            Logger.getLogger(ComisionesFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        if (rf != null && !rf.isEmpty()) {
                            for (RenglonFactura renglon : rf) {
                                Rubro r = renglon.getProducto().getRubro();
                                if (r.getCodigo() == 1) { //Massalin
                                    totalR1 += renglon.getGravado() + renglon.getImpuesto() + renglon.getIva();
                                } else {
                                    if (r.getCodigo() == 2) { //Nobleza
                                        totalR2 += renglon.getGravado() + renglon.getImpuesto() + renglon.getIva();
                                    } else {
                                        if (r.getCodigo() == 3) { //Cigarrillos
                                            totalR3 += renglon.getGravado() + renglon.getImpuesto() + renglon.getIva();
                                        } else {
                                            if (r.getCodigo() == 4) { //Tarjetas telefonicas
                                                totalR4 += renglon.getGravado() + renglon.getIva();
                                            } else { //Varios
                                                totalR5 += renglon.getGravado() + renglon.getIva();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        subtoRub1 += totalR1;
                        subtoRub2 += totalR2;
                        subtoRub3 += totalR3;
                        subtoRub4 += totalR4;
                        subtoRub5 += totalR5;
                        Object o[] = new Object[9];
                        o[0] = i.getCliente().getCodigo();
                        o[1] = i.getCliente().getRazonSocial();
                        String comprob = i.getLetra()
                                + " " + dfs.format(i.getNumeroSucursal())
                                + "-" + dfn.format(i.getNumeroFactura());
                        o[2] = comprob;
                        o[3] = df.format(totalR1);
                        o[4] = df.format(totalR2);
                        o[5] = df.format(totalR3);
                        o[6] = df.format(totalR4);
                        o[7] = df.format(totalR5);
                        Double tox = totalR1
                                + totalR2
                                + totalR3
                                + totalR4
                                + totalR5;
                        o[8] = df.format(tox);
                        tbl.addRow(o);
                        totalR1 = 0.0;
                        totalR2 = 0.0;
                        totalR3 = 0.0;
                        totalR4 = 0.0;
                        totalR5 = 0.0;
                    }
                    if (tipo == 3) {
                        IvaVentas i = null;
                        try {
                            i = new IvaVentasService().getIvaVentasById(id_fc);
                        } catch (Exception ex) {
                            Logger.getLogger(ComisionesFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        List<RenglonNotaCredito> rf = null;
                        try {
                            rf = new RenglonNotaCreditoService().getAllRenglonNotaCreditoFromIvaVentas(i);
                        } catch (Exception ex) {
                            Logger.getLogger(ComisionesFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        if (rf != null && !rf.isEmpty()) {
                            for (RenglonNotaCredito renglon : rf) {
                                Rubro r = renglon.getProducto().getRubro();
                                if (r.getCodigo() == 1) { //Massalin
                                    totalR1 += renglon.getGravado() + renglon.getImpuesto() + renglon.getIva();
                                } else {
                                    if (r.getCodigo() == 2) { //Nobleza
                                        totalR2 += renglon.getGravado() + renglon.getImpuesto() + renglon.getIva();
                                    } else {
                                        if (r.getCodigo() == 3) { //Cigarrillos
                                            totalR3 += renglon.getGravado() + renglon.getImpuesto() + renglon.getIva();
                                        } else {
                                            if (r.getCodigo() == 4) { //Tarjetas telefonicas
                                                totalR4 += renglon.getGravado() + renglon.getIva();
                                            } else { //Varios
                                                totalR5 += renglon.getGravado() + renglon.getIva();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        subtoRub1 += totalR1;
                        subtoRub2 += totalR2;
                        subtoRub3 += totalR3;
                        subtoRub4 += totalR4;
                        subtoRub5 += totalR5;
                        Object o[] = new Object[9];
                        o[0] = i.getCliente().getCodigo();
                        o[1] = i.getCliente().getRazonSocial();
                        String comprob = i.getLetra()
                                + " " + dfs.format(i.getNumeroSucursal())
                                + "-" + dfn.format(i.getNumeroFactura());
                        o[2] = comprob;
                        o[3] = df.format(totalR1);
                        o[4] = df.format(totalR2);
                        o[5] = df.format(totalR3);
                        o[6] = df.format(totalR4);
                        o[7] = df.format(totalR5);
                        Double tox = totalR1
                                + totalR2
                                + totalR3
                                + totalR4
                                + totalR5;
                        o[8] = df.format(tox);
                        tbl.addRow(o);
                        totalR1 = 0.0;
                        totalR2 = 0.0;
                        totalR3 = 0.0;
                        totalR4 = 0.0;
                        totalR5 = 0.0;
                    }
                    if (tipo == 4) {
                        Activity ac = null;
                        try {
                            ac = new ActivityService().getActivityById(id_fc);
                        } catch (Exception ex) {
                            Logger.getLogger(ComisionesFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        String codigo = ac.getCustomer().getCodigo();
                        Cliente c = null;
                        try {
                            c = new ClienteService().getClienteByCodigo(codigo);
                        } catch (Exception ex) {
                            Logger.getLogger(ComisionesFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        List<ActivityRow> rf = null;
                        try {
                            rf = new ActivityRowService().getAllActivityRowFromIvaVentas(ac);
                        } catch (Exception ex) {
                            Logger.getLogger(ComisionesFrame.class
                                    .getName()).log(Level.SEVERE, null, ex);
                        }
                        if (rf != null && !rf.isEmpty()) {
                            for (ActivityRow renglon : rf) {
                                Integer cp = renglon.getCodigoProducto();
                                Producto pr = null;
                                try {
                                    pr = new ProductoService().getProductoByCodigo(cp);
                                } catch (Exception ex) {
                                    Logger.getLogger(ComisionesFrame.class
                                            .getName()).log(Level.SEVERE, null, ex);
                                }
                                if (pr != null) {
                                    Rubro r = pr.getRubro();
                                    if (r.getCodigo() == 1) { //Massalin
                                        totalR1 += renglon.getGravado() + renglon.getImpuesto() + renglon.getIva();
                                    } else {
                                        if (r.getCodigo() == 2) { //Nobleza
                                            totalR2 += renglon.getGravado() + renglon.getImpuesto() + renglon.getIva();
                                        } else {
                                            if (r.getCodigo() == 3) { //Cigarrillos
                                                totalR3 += renglon.getGravado() + renglon.getIva();
                                            } else {
                                                if (r.getCodigo() == 4) { //Tarjetas telefonicas
                                                    totalR4 += renglon.getGravado() + renglon.getIva();
                                                } else {
                                                    //Varios
                                                    totalR5 += renglon.getGravado() + renglon.getIva();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        subtoRub1 += totalR1;
                        subtoRub2 += totalR2;
                        subtoRub3 += totalR3;
                        subtoRub4 += totalR4;
                        subtoRub5 += totalR5;
                        Object o[] = new Object[9];
                        o[0] = c.getCodigo();
                        o[1] = c.getRazonSocial();
                        String comprob = ac.getLetra()
                                + " " + dfs.format(ac.getNumeroSucursal())
                                + "-" + dfn.format(ac.getNumeroFactura());
                        o[2] = comprob;
                        o[3] = df.format(totalR1);
                        o[4] = df.format(totalR2);
                        o[5] = df.format(totalR3);
                        o[6] = df.format(totalR4);
                        o[7] = df.format(totalR5);
                        Double tox = totalR1
                                + totalR2
                                + totalR3
                                + totalR4
                                + totalR5;
                        o[8] = df.format(tox);
                        tbl.addRow(o);
                        totalR1 = 0.0;
                        totalR2 = 0.0;
                        totalR3 = 0.0;
                        totalR4 = 0.0;
                        totalR5 = 0.0;
                    }
                    if (tipo == 5) {
                        Activity ac = null;
                        try {
                            ac = new ActivityService().getActivityById(id_fc);
                        } catch (Exception ex) {
                            Logger.getLogger(ComisionesFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        String codigo = ac.getCustomer().getCodigo();
                        Object o[] = new Object[9];
                        Cliente c = null;
                        try {
                            c = new ClienteService().getClienteByCodigo(codigo);
                        } catch (Exception ex) {
                            Logger.getLogger(ComisionesFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        List<Rental> rf = null;
                        try {
                            rf = new RentalService().getRentalFromActivity(ac);
                        } catch (Exception ex) {
                            Logger.getLogger(ComisionesFrame.class
                                    .getName()).log(Level.SEVERE, null, ex);
                        }
                        if (rf != null && !rf.isEmpty()) {
                            for (Rental renglon : rf) {
                                Integer cp = renglon.getCodigoProducto();
                                Producto pr = null;
                                try {
                                    pr = new ProductoService().getProductoByCodigo(cp);
                                } catch (Exception ex) {
                                    Logger.getLogger(ComisionesFrame.class
                                            .getName()).log(Level.SEVERE, null, ex);
                                }
                                if (pr != null) {
                                    Rubro r = pr.getRubro();
                                    if (r.getCodigo() == 1) { //Massalin
                                        totalR1 += renglon.getGravado() + renglon.getImpuesto() + renglon.getIva();
                                    } else {
                                        if (r.getCodigo() == 2) { //Nobleza
                                            totalR2 += renglon.getGravado() + renglon.getImpuesto() + renglon.getIva();
                                        } else {
                                            if (r.getCodigo() == 3) { //Cigarrillos
                                                totalR3 += renglon.getGravado() + renglon.getIva();
                                            } else {
                                                if (r.getCodigo() == 4) { //Tarjetas telefonicas
                                                    totalR4 += renglon.getGravado() + renglon.getIva();
                                                } else {
                                                    //Varios
                                                    totalR5 += renglon.getGravado() + renglon.getIva();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        subtoRub1 += totalR1;
                        subtoRub2 += totalR2;
                        subtoRub3 += totalR3;
                        subtoRub4 += totalR4;
                        subtoRub5 += totalR5;
                        o[0] = c.getCodigo();
                        o[1] = c.getRazonSocial();
                        String comprob = ac.getLetra()
                                + " " + dfs.format(ac.getNumeroSucursal())
                                + "-" + dfn.format(ac.getNumeroFactura());
                        o[2] = comprob;
                        o[3] = df.format(totalR1);
                        o[4] = df.format(totalR2);
                        o[5] = df.format(totalR3);
                        o[6] = df.format(totalR4);
                        o[7] = df.format(totalR5);
                        Double tox = totalR1
                                + totalR2
                                + totalR3
                                + totalR4
                                + totalR5;
                        o[8] = df.format(tox);
                        tbl.addRow(o);
                        totalR1 = 0.0;
                        totalR2 = 0.0;
                        totalR3 = 0.0;
                        totalR4 = 0.0;
                        totalR5 = 0.0;
                    }
                }
                Object ob[] = new Object[9];
                ob[2] = "TOTALES";
                ob[3] = df.format(subtoRub1);
                ob[4] = df.format(subtoRub2);
                ob[5] = df.format(subtoRub3);
                ob[6] = df.format(subtoRub4);
                ob[7] = df.format(subtoRub5);
                totalRubros = subtoRub1
                        + subtoRub2
                        + subtoRub3
                        + subtoRub4
                        + subtoRub5;
                ob[8] = df.format(totalRubros);
                tbl.addRow(ob);
                Object o2[] = new Object[9];
                o2[2] = "Porcentuales";
                if(po[1] == 1){
                    o2[3]=pc[1];
                    totalR1 = subtoRub1 * (pc[1]/100);
                }
                if(po[2] == 1){
                    o2[4]=pc[2];
                    totalR2 = subtoRub2 * (pc[2]/100);
                }
                if(po[3] == 1){
                    o2[5]=pc[3];
                    totalR3 = subtoRub3 * (pc[3]/100);
                }
                if(po[4] == 1){
                    o2[6]=pc[4];
                    totalR4 = subtoRub4 * (pc[4]/100);
                }
                if(po[5] == 1){
                    o2[7]=pc[5];
                    totalR5 = subtoRub5 * (pc[5]/100);
                }
                tbl.addRow(o2);
                o2[0]="";
                o2[1]="";
                o2[2]="ComisiÃ³n a Pagar:";
                o2[3]=df.format(totalR1);
                o2[4]=df.format(totalR2);
                o2[5]=df.format(totalR3);
                o2[6]=df.format(totalR4);
                o2[7]=df.format(totalR5);
                Double t = totalR1
                        + totalR2
                        + totalR3
                        + totalR4
                        + totalR5;
                o2[8]=df.format(t);
                tbl.addRow(o2);
                tabla0.setModel(tbl);
            }
        }
    }

    private void excel() {
        int rows = tabla0.getRowCount();
        if(rows < 0){
            JOptionPane.showMessageDialog(this, "LA TABLA ESTA VACIA");
            return;
        }
        String rutaArchivo = "c:/informes/comision.xls";
        File archivo = new File(rutaArchivo);
        if (archivo.exists()) {
            archivo.delete();
        }
        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        WritableWorkbook libro = null;
        try {
            libro = Workbook.createWorkbook(archivo);

        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        WritableSheet hoja1 = libro.createSheet("Comision", 0);
        try {
            hoja1.addCell(new jxl.write.Label(0, 0, "Distribuidora A&M - ComisiÃ³n Vendedor: " + nombreVendedorTxt.getText()));
            hoja1.addCell(new jxl.write.Label(0, 1, "de Fecha: " + deFechaTxt.getText() + " a Fecha: " + aFechaTxt.getText()));
            hoja1.addCell(new jxl.write.Label(0, 2, "CÃ³digo"));
            hoja1.addCell(new jxl.write.Label(1, 2, "Cliente"));
            hoja1.addCell(new jxl.write.Label(2, 2, "Factura"));
            hoja1.addCell(new jxl.write.Label(3, 2, "Massalin"));
            hoja1.addCell(new jxl.write.Label(4, 2, "Nobleza"));
            hoja1.addCell(new jxl.write.Label(5, 2, "Cigarrillos"));
            hoja1.addCell(new jxl.write.Label(6, 2, "Tarjetas"));
            hoja1.addCell(new jxl.write.Label(7, 2, "Varios"));
            hoja1.addCell(new jxl.write.Label(8, 2, "TOTAL"));
            DefaultTableModel tbl = (DefaultTableModel) tabla0.getModel();
            int y = 3;
            
            for (int i = 0; i < rows - 3; i++) {
                hoja1.addCell(new jxl.write.Label(0, y, tbl.getValueAt(i, 0).toString()));
                hoja1.addCell(new jxl.write.Label(1, y, tbl.getValueAt(i, 1).toString()));
                hoja1.addCell(new jxl.write.Label(2, y, tbl.getValueAt(i, 2).toString()));
                Double importe = Double.valueOf(tbl.getValueAt(i, 3).toString().replaceAll(",", "."));
                hoja1.addCell(new jxl.write.Number(3,y,importe));
                importe = Double.valueOf(tbl.getValueAt(i, 4).toString().replaceAll(",", "."));
                hoja1.addCell(new jxl.write.Number(4, y, importe));
                importe = Double.valueOf(tbl.getValueAt(i, 5).toString().replaceAll(",", "."));
                hoja1.addCell(new jxl.write.Number(5, y, importe));
                importe = Double.valueOf(tbl.getValueAt(i, 6).toString().replaceAll(",", "."));
                hoja1.addCell(new jxl.write.Number(6, y, importe));
                importe = Double.valueOf(tbl.getValueAt(i, 7).toString().replaceAll(",", "."));
                hoja1.addCell(new jxl.write.Number(7, y, importe));
                importe = Double.valueOf(tbl.getValueAt(i, 8).toString().replaceAll(",", "."));
                hoja1.addCell(new jxl.write.Number(8, y, importe));
                y += 1;

            }
        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error configurando Excel");
        }
        try {
            libro.write();
            libro.close();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 528");

        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 529");
        }
        JOptionPane.showMessageDialog(this, "Excel creado correctamente");
        JOptionPane.showMessageDialog(this, "EstÃ¡ en c:/informes/comision.xls");
    }

    private void volver() {
        ListarClientePorVendedorFrame mf = new ListarClientePorVendedorFrame(vendedor);
        mf.setVisible(true);
        this.dispose();
    }

    private void cargarDatos() {
        nombreVendedorTxt.setText(vendedor.getNombre());
        nombreVendedorTxt.setEditable(false);
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DATE, -7);
        desde = calendar.getTime();
        deFechaTxt.setText(sdf.format(desde));
        aFechaTxt.setText(sdf.format(hasta));
        deFechaTxt.requestFocus();
        List<PorcentualVendedor> pv = null;
        try {
            pv = new PorcentualVendedorService().getAllPorcentualByVendedor(vendedor);
        } catch (Exception ex) {
            Logger.getLogger(ComisionesFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        if (pv != null && !pv.isEmpty()) {
            DefaultTableModel tb1 = (DefaultTableModel) tabla1.getModel();
            for (PorcentualVendedor p : pv) {
                Object o[] = new Object[2];
                o[0] = p.getRubro().getNombre();
                o[1] = df.format(p.getPorcentual());
                tb1.addRow(o);
            }
            tabla1.setModel(tb1);
        }
        deFechaTxt.requestFocus();
    }

    private void limpiarTabla() {
        int rows = tabla0.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla0.getModel();
            for (int i=0;i < rows; i++){
                tbl.removeRow(0);
            }
            tabla0.setModel(tbl);
        }
    }
}
