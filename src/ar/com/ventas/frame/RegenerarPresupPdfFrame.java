/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Activity;
import ar.com.ventas.entities.ActivityRow;
import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.Rental;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ActivityRowService;
import ar.com.ventas.services.ActivityService;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.ProductoService;
import ar.com.ventas.services.RentalService;
import ar.com.ventas.util.DesktopApi;
import ar.com.ventas.util.PDFBuilder;
import com.itextpdf.text.DocumentException;
import java.io.File;
import java.io.FileNotFoundException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class RegenerarPresupPdfFrame extends javax.swing.JFrame {

    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private List<Activity> facturas = null;

    /**
     * Creates new form RegenerarPresupPdfFrame
     */
    public RegenerarPresupPdfFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        fechaTxt = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        pdfBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("REGENERAR PDF DESDE PRESUPUESTO");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Presupuesto", "CÃ³digo", "Nombre", "Total"
            }
        ));
        jScrollPane1.setViewportView(tabla);

        jLabel1.setText("Fecha Presupuesto:");

        fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaTxt.setText("FECHA");
        fechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaTxtKeyPressed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        pdfBtn.setText("PDF");
        pdfBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 922, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buscarBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pdfBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pdfBtn)
                    .addComponent(volverBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void pdfBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfBtnActionPerformed
        generarPdf();
    }//GEN-LAST:event_pdfBtnActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        buscar();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void fechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            buscar();
        }
    }//GEN-LAST:event_fechaTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegenerarPresupPdfFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarBtn;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton pdfBtn;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void buscar() {
        llenarTabla();
    }

    private void generarPdf() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UN PRESUPUESTO/DEVOLUCION");
            return;
        }
        Activity i = facturas.get(row);
        List<ActivityRow> rf = null;
        List<Rental> devo = null;
        if (i.getTotal() < 0) {
            try {
                devo = new RentalService().getRentalFromActivity(i);
            } catch (Exception ex) {
                Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            Boolean saldos = true;
            Double sA1 = 0.0;
            if (i.getSaldoActual1() != null) {
                if (i.getSaldoActual2() != null) {
                    sA1 += i.getSaldoActual1() + i.getSaldoActual2();
                } else {
                    sA1 += i.getSaldoActual1();
                }
            } else {
                if (i.getSaldoActual2() != null) {
                    sA1 += i.getSaldoActual2();
                } else {
                    saldos = false;
                }
            }
            Double sT1 = 0.0;
            if (i.getTotal() != null) {
                sT1 += sA1;
                sA1 -= i.getTotal();
            }
            Float noble = 0F;
            Float massa = 0F;
            if (rf != null && !rf.isEmpty()) {
                for (ActivityRow ar : rf) {
                    Rubro ru = null;
                    Producto pro = null;
                    Integer pCod = 0;
                    if (ar.getCodigoProducto() != null) {
                        pCod = ar.getCodigoProducto();
                        try {
                            pro = new ProductoService().getProductoByCodigo(pCod);
                        } catch (Exception ex) {
                            Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    if (pro != null) {
                        ru = pro.getRubro();
                        if (ru.getCodigo() == 1) {
                            massa += ar.getCantidad();
                        }
                        if (ru.getCodigo() == 2) {
                            noble += ar.getCantidad();
                        }
                    }
                }
            }
            Integer no = noble.intValue();
            Integer ma = massa.intValue();
            pdf2(i, devo, no, ma, sA1, sT1, saldos);
            
            // xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        } else {
            try {
                rf = new ActivityRowService().getAllActivityRowFromIvaVentas(i);
            } catch (Exception ex) {
                Logger.getLogger(RegenerarPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            Boolean saldos = true;
            Double sA1 = 0.0;
            if (i.getSaldoActual1() != null) {
                if (i.getSaldoActual2() != null) {
                    sA1 += i.getSaldoActual1() + i.getSaldoActual2();
                } else {
                    sA1 += i.getSaldoActual1();
                }
            } else {
                if (i.getSaldoActual2() != null) {
                    sA1 += i.getSaldoActual2();
                } else {
                    saldos = false;
                }
            }
            Double sT1 = 0.0;
            if (i.getTotal() != null) {
                sT1 += sA1;
                sA1 -= i.getTotal();
            }
            Float noble = 0F;
            Float massa = 0F;
            if (rf != null && !rf.isEmpty()) {
                for (ActivityRow ar : rf) {
                    Rubro ru = null;
                    Producto pro = null;
                    Integer pCod = 0;
                    if (ar.getCodigoProducto() != null) {
                        pCod = ar.getCodigoProducto();
                        try {
                            pro = new ProductoService().getProductoByCodigo(pCod);
                        } catch (Exception ex) {
                            Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    if (pro != null) {
                        ru = pro.getRubro();
                        if (ru.getCodigo() == 1) {
                            massa += ar.getCantidad();
                        }
                        if (ru.getCodigo() == 2) {
                            noble += ar.getCantidad();
                        }
                    }
                }
            }
            Integer no = noble.intValue();
            Integer ma = massa.intValue();
            pdf(i, rf, no, ma, sA1, sT1, saldos);
        }
    }

    private void limpiarCampos() {
        Date fecha = new Date();
        fechaTxt.setText(sdf.format(fecha));
        llenarTabla();
    }

    private void llenarTabla() {
        if (!fechaTxt.getText().isEmpty()) {
            Date fecha = new Date();
            try {
                fecha = sdf.parse(fechaTxt.getText());
            } catch (ParseException ex) {
                Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                facturas = new ActivityService().getFcByFecha(fecha);
            } catch (Exception ex) {
                Logger.getLogger(RegenerarPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (facturas != null && !facturas.isEmpty()) {
                limpiarTabla();
                DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
                for (Activity fc : facturas) {
                    Object o[] = new Object[5];
                    o[0] = sdf.format(fc.getFecha());
                    o[1] = fc.getLetra() + " " + fc.getNumeroSucursal() + " " + fc.getNumeroFactura();
                    String cod = fc.getCustomer().getCodigo();
                    Cliente c = null;
                    try {
                        c = new ClienteService().getClienteByCodigo(cod);
                    } catch (Exception ex) {
                        Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    o[2] = cod;
                    o[3] = c.getRazonSocial();
                    o[4] = df.format(fc.getTotal());
                    tbl.addRow(o);
                }
                tabla.setModel(tbl);
            }
        }
    }

    private void limpiarTabla() {
        int rows = tabla.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }

    private void pdf(Activity i, List<ActivityRow> rf, Integer noble, Integer massa, Double sA1, Double sT1, Boolean saldos) {
        String code = i.getCustomer().getCodigo();
        Cliente cli = null;
        try {
            cli = new ClienteService().getClienteByCodigo(code);
        } catch (Exception ex) {
            Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            File pdf = new PDFBuilder().armarPresup(cli, i, rf, noble, massa, sA1, sT1, saldos);
            DesktopApi.open(pdf);
            JOptionPane.showMessageDialog(this, "PDF GENERADO CORRECTAMENTE");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("err1");
            JOptionPane.showMessageDialog(this, "ERROR FILE 422");
        } catch (DocumentException ex) {
            Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("err2");
            JOptionPane.showMessageDialog(this, "ERROR DOCUMENT 426");
        } catch (Exception ex) {
            Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("err3");
            JOptionPane.showMessageDialog(this, "ERROR EXCEPTION 430");
        }
    }
    
    private void pdf2(Activity i, List<Rental> rf, Integer noble, Integer massa, Double sA1, Double sT1, Boolean saldos) {
        String code = i.getCustomer().getCodigo();
        Cliente cli = null;
        try {
            cli = new ClienteService().getClienteByCodigo(code);
        } catch (Exception ex) {
            Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            File pdf = new PDFBuilder().armarDevolucion(cli, i, rf, noble, massa, sA1, sT1, saldos);
            DesktopApi.open(pdf);
            JOptionPane.showMessageDialog(this, "PDF GENERADO CORRECTAMENTE");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("err1");
            JOptionPane.showMessageDialog(this, "ERROR FILE 449");
        } catch (DocumentException ex) {
            Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("err2");
            JOptionPane.showMessageDialog(this, "ERROR DOCUMENT 453");
        } catch (Exception ex) {
            Logger.getLogger(RegenerarPresupPdfFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("err3");
            JOptionPane.showMessageDialog(this, "ERROR EXCEPTION 457");
        }
    }
}
