/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Activity;
import ar.com.ventas.entities.ActivityRow;
import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.Customer;
import ar.com.ventas.entities.IvaVentas;
import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.RenglonFactura;
import ar.com.ventas.entities.RenglonNotaCredito;
import ar.com.ventas.entities.Rental;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ActivityRowService;
import ar.com.ventas.services.ActivityService;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.CustomerService;
import ar.com.ventas.services.IvaVentasService;
import ar.com.ventas.services.ProductoService;
import ar.com.ventas.services.RenglonFacturaService;
import ar.com.ventas.services.RenglonNotaCreditoService;
import ar.com.ventas.services.RentalService;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Marcela
 */
public class VentasXClienteFrame extends javax.swing.JFrame {

    private List<Cliente> clientes = null;
    private Cliente filtroCliente;
    public SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    public DecimalFormat df = new DecimalFormat("0.00");
    public DecimalFormat df1 = new DecimalFormat("0");
    public IvaVentas facturaIV;

    /**
     * Creates new form VentasXClienteFrame
     */
    public VentasXClienteFrame() {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        initComponents();
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        buscarClienteBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        codigoClienteTxt = new javax.swing.JTextField();
        nombreClienteTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        comboClientes = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fechaDesdeTxt = new javax.swing.JTextField();
        fechaHastaTxt = new javax.swing.JTextField();
        buscarMovimientosBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaReport = new javax.swing.JTable();
        buscarClienteXCodigo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaReporte = new javax.swing.JTable();
        excelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("VENTAS POR CLIENTE");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        buscarClienteBtn.setText("Buscar Cliente");
        buscarClienteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarClienteBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Código Cliente:");

        codigoClienteTxt.setText("CODIGO CLIENTE");
        codigoClienteTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoClienteTxtKeyPressed(evt);
            }
        });

        nombreClienteTxt.setText("NOMBRE CLIENTE");
        nombreClienteTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreClienteTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Nombre Cliente:");

        comboClientes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboClientesActionPerformed(evt);
            }
        });
        comboClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboClientesKeyPressed(evt);
            }
        });

        jLabel3.setText("Fecha hasta:");

        jLabel4.setText("Fecha desde:");

        fechaDesdeTxt.setText("FECHA DESDE");
        fechaDesdeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaDesdeTxtKeyPressed(evt);
            }
        });

        fechaHastaTxt.setText("FECHA HASTA");
        fechaHastaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaHastaTxtKeyPressed(evt);
            }
        });

        buscarMovimientosBtn.setText("Buscar Movimientos");
        buscarMovimientosBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarMovimientosBtnActionPerformed(evt);
            }
        });

        tablaReport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Número", "$ Massalin", "Cant. Mass.", "$ Nobleza", "Cant.Nobl.", "$ Cigarrillos", "$ Tarjetas", "$ Varios", "$ Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaReport);

        buscarClienteXCodigo.setText("Buscar");
        buscarClienteXCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarClienteXCodigoActionPerformed(evt);
            }
        });

        tablaReporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Número", "$ Massalin", "Cant. Mass.", "$ Nobl.", "Cant.Nobl.", "$ CIgarrillos", "$ Tarjetas", "$ Varios", "$ Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaReporte);

        excelBtn.setText("Excel");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fechaDesdeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fechaHastaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(buscarClienteXCodigo)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(codigoClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nombreClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(buscarClienteBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(volverBtn))
                                    .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buscarMovimientosBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(excelBtn))))
                    .addComponent(jScrollPane2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(codigoClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarClienteBtn)
                    .addComponent(nombreClienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(volverBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarClienteXCodigo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(fechaDesdeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fechaHastaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarMovimientosBtn)
                    .addComponent(excelBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void buscarClienteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarClienteBtnActionPerformed
        borrarCombo();
        if (nombreClienteTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe Ingresar mínimo una letra para buscar cliente");
        } else {
            clientes = null;
            try {
                clientes = new ClienteService().getClientesByFiltro(nombreClienteTxt.getText());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al buscar clientes BTN");
                Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (clientes != null) {
                for (Cliente cli : clientes) {
                    comboClientes.addItem(cli.getRazonSocial());
                }
                comboClientes.requestFocus();
                comboClientes.addFocusListener(null);
                comboClientes.showPopup();
            } else {
                JOptionPane.showMessageDialog(this, "No se encontro ningun cliente con esa solicitud");
            }
        }
    }//GEN-LAST:event_buscarClienteBtnActionPerformed

    private void buscarMovimientosBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarMovimientosBtnActionPerformed
        buscarMovim();
    }//GEN-LAST:event_buscarMovimientosBtnActionPerformed

    private void comboClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboClientesActionPerformed
        if (evt.getModifiers() == 16) {
            if (comboClientes.getSelectedIndex() > 0) {
                int itemSeleccionado = comboClientes.getSelectedIndex() - 1;
                if (itemSeleccionado > -1) {
                    codigoClienteTxt.setText(clientes.get(itemSeleccionado).getCodigo());
                    nombreClienteTxt.setText(clientes.get(itemSeleccionado).getRazonSocial());
                    buscarCliente();
                    fechaDesdeTxt.requestFocus();
                    //buscarMovim();
                }
            }
        }
    }//GEN-LAST:event_comboClientesActionPerformed

    private void buscarClienteXCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarClienteXCodigoActionPerformed
        buscarCliente();
        fechaDesdeTxt.requestFocus();
    }//GEN-LAST:event_buscarClienteXCodigoActionPerformed

    private void codigoClienteTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoClienteTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (codigoClienteTxt.getText().isEmpty()) {
                nombreClienteTxt.requestFocus();
            } else {
                buscarCliente();
                fechaDesdeTxt.requestFocus();
                //buscarMovim();
            }
        }
    }//GEN-LAST:event_codigoClienteTxtKeyPressed

    private void nombreClienteTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreClienteTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (nombreClienteTxt.getText().isEmpty()) {
                codigoClienteTxt.requestFocus();
            } else {
                borrarCombo();
                if (nombreClienteTxt.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Debe Ingresar mínimo una letra para buscar cliente");
                } else {
                    clientes = null;
                    try {
                        clientes = new ClienteService().getClientesByFiltro(nombreClienteTxt.getText());
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Error al buscar clientes BTN");
                        Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (clientes != null) {
                        for (Cliente cli : clientes) {
                            comboClientes.addItem(cli.getRazonSocial());
                        }
                        comboClientes.requestFocus();
                        comboClientes.addFocusListener(null);
                        comboClientes.showPopup();
                    } else {
                        JOptionPane.showMessageDialog(this, "No se encontro ningun cliente con esa solicitud");
                    }
                }
            }
        }
    }//GEN-LAST:event_nombreClienteTxtKeyPressed

    private void comboClientesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboClientesKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (comboClientes.getSelectedIndex() > 0) {
                int itemSeleccionado = comboClientes.getSelectedIndex() - 1;
                if (itemSeleccionado > -1) {
                    codigoClienteTxt.setText(clientes.get(itemSeleccionado).getCodigo());
                    nombreClienteTxt.setText(clientes.get(itemSeleccionado).getRazonSocial());
                    buscarCliente();
                    fechaDesdeTxt.requestFocus();
                    //buscarMovim();
                }
            }
        }
    }//GEN-LAST:event_comboClientesKeyPressed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        generarExcel();
    }//GEN-LAST:event_excelBtnActionPerformed

    private void fechaDesdeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaDesdeTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (fechaDesdeTxt.getText().isEmpty()) {
                fechaDesdeTxt.setText(sdf.format(new Date()));
                fechaDesdeTxt.requestFocus();
            } else {
                int largo = fechaDesdeTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    fechaDesdeTxt.setText(fechaDesdeTxt.getText() + "/" + f);
                    fechaHastaTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        fechaDesdeTxt.setText(fechaDesdeTxt.getText() + an);
                        fechaHastaTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            fechaDesdeTxt.setText("");
//                          request focus mismo campo
                            fechaDesdeTxt.requestFocus();
                        } else {
                            String veinte = fechaDesdeTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                fechaDesdeTxt.requestFocus();
                            } else{
                                fechaHastaTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_fechaDesdeTxtKeyPressed

    private void fechaHastaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaHastaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (fechaHastaTxt.getText().isEmpty()) {
                fechaHastaTxt.setText(sdf.format(new Date()));
                fechaHastaTxt.requestFocus();
            } else {
                int largo = fechaHastaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    fechaHastaTxt.setText(fechaHastaTxt.getText() + "/" + f);
                    buscarMovim();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        fechaHastaTxt.setText(fechaHastaTxt.getText() + an);
                        buscarMovim();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            fechaHastaTxt.setText("");
//                          request focus mismo campo
                            fechaHastaTxt.requestFocus();
                        } else {
                            String veinte = fechaHastaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                fechaHastaTxt.requestFocus();
                            } else{
                                buscarMovim();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_fechaHastaTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentasXClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentasXClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentasXClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentasXClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentasXClienteFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarClienteBtn;
    private javax.swing.JButton buscarClienteXCodigo;
    private javax.swing.JButton buscarMovimientosBtn;
    private javax.swing.JTextField codigoClienteTxt;
    private javax.swing.JComboBox comboClientes;
    private javax.swing.JButton excelBtn;
    private javax.swing.JTextField fechaDesdeTxt;
    private javax.swing.JTextField fechaHastaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField nombreClienteTxt;
    private javax.swing.JTable tablaReport;
    private javax.swing.JTable tablaReporte;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        codigoClienteTxt.setText("");
        nombreClienteTxt.setText("");
        fechaDesdeTxt.setText("");
        fechaHastaTxt.setText("");
        comboClientes.removeAllItems();
        comboClientes.addItem("");
        codigoClienteTxt.requestFocus();
    }

    private void generarInforme() {
        borrarTabla();
        List<IvaVentas> iv = null;
        Double totales1 = 0.00;
        Double totales2 = 0.00;
        Double totales3 = 0.00;
        Double totalMassalin = 0.0;
        Double massalin1 = 0.00;
        Double massalin2 = 0.00;
        Double massalin3 = 0.00;
        Double cantidadMasalin1 = 0.00;
        Double cantidadMasalin2 = 0.00;
        Double cantidadMasalin3 = 0.00;
        Double totalCantidadMassalin = 0.0;
        Double totalNobleza = 0.0;
        Double nobleza1 = 0.00;
        Double nobleza2 = 0.00;
        Double nobleza3 = 0.00;
        Double cantidadNobleza1 = 0.00;
        Double cantidadNobleza2 = 0.00;
        Double cantidadNobleza3 = 0.00;
        Double totalCantidadNobleza = 0.0;
        Double totalCigarrillos = 0.0;
        Double cigarrillos1 = 0.00;
        Double cigarrillos2 = 0.00;
        Double cigarrillos3 = 0.00;
        Double totalTarjetas = 0.0;
        Double tarjetas1 = 0.00;
        Double tarjetas2 = 0.00;
        Double tarjetas3 = 0.00;
        Double totalVarios = 0.0;
        Double varios1 = 0.00;
        Double varios2 = 0.00;
        Double varios3 = 0.00;
        Date fd = null;
        Date fa = null;
        try {
            fd = sdf.parse(fechaDesdeTxt.getText());
            fa = sdf.parse(fechaHastaTxt.getText());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Verifique el formato de las fechas solicitadas");
            return;
        }
        try {
            iv = new IvaVentasService().getAllIvaVentasByCodigoYFecha(filtroCliente, fd, fa);
        } catch (Exception ex) {
            Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (iv != null && !iv.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tablaReporte.getModel();
            for (IvaVentas fc : iv) {
                Object ob[] = new Object[10];
                ob[0] = sdf.format(fc.getFecha());
                ob[1] = fc.getNumeroFactura();
                ob[9] = df.format(fc.getTotal());
                totales1 += fc.getTotal();
                if (fc.getTotal() > 0.00) {
                    List<RenglonFactura> rf = null;
                    try {
                        rf = new RenglonFacturaService().getAllRenglonFacturaFromIvaVentas(fc);
                    } catch (Exception ex) {
                        Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (rf != null && !rf.isEmpty()) {
                        for (RenglonFactura rfc : rf) {
                            if (rfc.getProducto().getRubro().getCodigo() == 1) {
                                totalMassalin += rfc.getTotal();
                                totalCantidadMassalin += rfc.getCantidad();
                            } else if (rfc.getProducto().getRubro().getCodigo() == 2) {
                                totalNobleza += rfc.getTotal();
                                totalCantidadNobleza += rfc.getCantidad();
                            } else if (rfc.getProducto().getRubro().getCodigo() == 3) {
                                totalCigarrillos += rfc.getTotal();
                            } else if (rfc.getProducto().getRubro().getCodigo() == 4) {
                                totalTarjetas += rfc.getTotal();
                            } else {
                                totalVarios += rfc.getTotal();
                            }
                        }
                        ob[2] = df.format(totalMassalin);
                        ob[3] = df1.format(totalCantidadMassalin);
                        ob[4] = df.format(totalNobleza);
                        ob[5] = df1.format(totalCantidadNobleza);
                        ob[6] = df.format(totalCigarrillos);
                        ob[7] = df.format(totalTarjetas);
                        ob[8] = df.format(totalVarios);
                        massalin1 += totalMassalin;
                        cantidadMasalin1 += totalCantidadMassalin;
                        nobleza1 += totalNobleza;
                        cantidadNobleza1 += totalCantidadNobleza;
                        cigarrillos1 += totalCigarrillos;
                        tarjetas1 += totalTarjetas;
                        varios1 += totalVarios;
                        totalMassalin = 0.0;
                        totalCantidadMassalin = 0.0;
                        totalNobleza = 0.0;
                        totalCantidadNobleza = 0.0;
                        totalCigarrillos = 0.0;
                        totalTarjetas = 0.0;
                        totalVarios = 0.0;
                    } else {
                        ob[2] = "Sin detalle";
                        //JOptionPane.showMessageDialog(this, "No hay renglones para esta factura");
                    }
                } else {
                    List<RenglonNotaCredito> rnc = null;
                    try {
                        rnc = new RenglonNotaCreditoService().getAllRenglonNotaCreditoFromIvaVentas(fc);
                    } catch (Exception ex) {
                        Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (rnc != null && !rnc.isEmpty()) {
                        for (RenglonNotaCredito reng : rnc) {
                            if (reng.getProducto().getRubro().getCodigo() == 1) {
                                totalMassalin += reng.getTotal();
                                totalCantidadMassalin += reng.getCantidad();
                            } else if (reng.getProducto().getRubro().getCodigo() == 2) {
                                totalNobleza += reng.getTotal();
                                totalCantidadNobleza += reng.getCantidad();
                            } else if (reng.getProducto().getRubro().getCodigo() == 3) {
                                totalCigarrillos += reng.getTotal();
                            } else if (reng.getProducto().getRubro().getCodigo() == 4) {
                                totalTarjetas += reng.getTotal();
                            } else {
                                totalVarios += reng.getTotal();
                            }
                        }
                        ob[2] = df.format(totalMassalin);
                        ob[3] = df1.format(totalCantidadMassalin);
                        ob[4] = df.format(totalNobleza);
                        ob[5] = df1.format(totalCantidadNobleza);
                        ob[6] = df.format(totalCigarrillos);
                        ob[7] = df.format(totalTarjetas);
                        ob[8] = df.format(totalVarios);
                        massalin1 += totalMassalin;
                        cantidadMasalin1 -= totalCantidadMassalin;
                        nobleza1 += totalNobleza;
                        cantidadNobleza1 -= totalCantidadNobleza;
                        cigarrillos1 += totalCigarrillos;
                        tarjetas1 += totalTarjetas;
                        varios1 += totalVarios;
                        totalMassalin = 0.0;
                        totalCantidadMassalin = 0.0;
                        totalNobleza = 0.0;
                        totalCantidadNobleza = 0.0;
                        totalCigarrillos = 0.0;
                        totalTarjetas = 0.0;
                        totalVarios = 0.0;
                    }
                }
                tbl.addRow(ob);
            }
            Object ob[] = new Object[10];
            ob[2] = " ";
            tbl.addRow(ob);
            ob[0] = "SUBTOTAL 1";
            ob[9] = df.format(totales1);
            ob[2] = df.format(massalin1);
            ob[3] = df1.format(cantidadMasalin1);
            ob[4] = df.format(nobleza1);
            ob[5] = df1.format(cantidadNobleza1);
            ob[6] = df.format(cigarrillos1);
            ob[7] = df.format(tarjetas1);
            ob[8] = df.format(varios1);
            tbl.addRow(ob);
            tablaReporte.setModel(tbl);
        }
        String cod = filtroCliente.getCodigo();
        Customer customer = null;
        try {
            customer = new CustomerService().getCustomerByCodigo(cod);
        } catch (Exception ex) {
            Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (customer != null) {
            List<Activity> act = null;
            try {
                act = new ActivityService().getAllActivityByCodigoYFecha(customer, fd, fa);
            } catch (Exception ex) {
                Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (act != null && !act.isEmpty()) {
                DefaultTableModel tbl = (DefaultTableModel) tablaReport.getModel();
                for (Activity fc : act) {
                    Object ob[] = new Object[10];
                    ob[0] = sdf.format(fc.getFecha());
                    ob[1] = fc.getNumeroFactura();
                    ob[9] = df.format(fc.getTotal());
                    totales2 += fc.getTotal();
                    if (fc.getTotal() > 0.00) {
                        List<ActivityRow> rf = null;
                        try {
                            rf = new ActivityRowService().getAllActivityRowFromIvaVentas(fc);
                        } catch (Exception ex) {
                            Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        if (rf != null && !rf.isEmpty()) {
                            for (ActivityRow rfc : rf) {
                                int cp = rfc.getCodigoProducto();
                                Producto pr = null;
                                try {
                                    pr = new ProductoService().getProductoByCodigo(cp);
                                } catch (Exception ex) {
                                    Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                if (pr != null) {
                                    if (pr.getRubro().getCodigo() == 1) {
                                        totalCantidadMassalin += rfc.getCantidad();
                                        totalMassalin += rfc.getTotal();
                                    } else if (pr.getRubro().getCodigo() == 2) {
                                        totalCantidadNobleza += rfc.getCantidad();
                                        totalNobleza += rfc.getTotal();
                                    } else if (pr.getRubro().getCodigo() == 3) {
                                        totalCigarrillos += rfc.getTotal();
                                    } else if (pr.getRubro().getCodigo() == 4) {
                                        totalTarjetas += rfc.getTotal();
                                    } else {
                                        totalVarios += rfc.getTotal();
                                    }
                                }
                            }
                            ob[2] = df.format(totalMassalin);
                            ob[3] = df1.format(totalCantidadMassalin);
                            ob[4] = df.format(totalNobleza);
                            ob[5] = df1.format(totalCantidadNobleza);
                            ob[6] = df.format(totalCigarrillos);
                            ob[7] = df.format(totalTarjetas);
                            ob[8] = df.format(totalVarios);
                            massalin2 += totalMassalin;
                            cantidadMasalin2 += totalCantidadMassalin;
                            nobleza2 += totalNobleza;
                            cantidadNobleza2 += totalCantidadNobleza;
                            cigarrillos2 += totalCigarrillos;
                            tarjetas2 += totalTarjetas;
                            varios2 += totalVarios;
                            totalMassalin = 0.0;
                            totalCantidadMassalin = 0.0;
                            totalNobleza = 0.0;
                            totalCantidadNobleza = 0.0;
                            totalCigarrillos = 0.0;
                            totalTarjetas = 0.0;
                            totalVarios = 0.0;
                        } else {
                            ob[2] = "Sin detalle";
                        }
                    } else {
                        List<Rental> rnc = null;
                        try {
                            rnc = new RentalService().getRentalFromActivity(fc);
                        } catch (Exception ex) {
                            Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        if (rnc != null && !rnc.isEmpty()) {
                            for (Rental rng : rnc) {
                                Producto prd = null;
                                try {
                                    prd = new ProductoService().getProductoByCodigo(rng.getCodigoProducto());
                                } catch (Exception ex) {
                                    Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                                    return;
                                }
                                if (prd.getRubro().getCodigo() == 1) {
                                    totalCantidadMassalin += rng.getCantidad();
                                    totalMassalin += rng.getTotal();
                                } else if (prd.getRubro().getCodigo() == 2) {
                                    totalCantidadNobleza += rng.getCantidad();
                                    totalNobleza += rng.getTotal();
                                } else if (prd.getRubro().getCodigo() == 3) {
                                    totalCigarrillos += rng.getTotal();
                                } else if (prd.getRubro().getCodigo() == 4) {
                                    totalTarjetas += rng.getTotal();
                                } else {
                                    totalVarios += rng.getTotal();
                                }
                            }
                            ob[2] = df.format(totalMassalin);
                            ob[3] = df1.format(totalCantidadMassalin);
                            ob[4] = df.format(totalNobleza);
                            ob[5] = df1.format(totalCantidadNobleza);
                            ob[6] = df.format(totalCigarrillos);
                            ob[7] = df.format(totalTarjetas);
                            ob[8] = df.format(totalVarios);
                            massalin2 += totalMassalin;
                            cantidadMasalin2 -= totalCantidadMassalin;
                            nobleza2 += totalNobleza;
                            cantidadNobleza2 -= totalCantidadNobleza;
                            cigarrillos2 += totalCigarrillos;
                            tarjetas2 += totalCigarrillos;
                            varios2 += totalVarios;
                            totalMassalin = 0.0;
                            totalCantidadMassalin = 0.0;
                            totalNobleza = 0.0;
                            totalCantidadNobleza = 0.0;
                            totalCigarrillos = 0.0;
                            totalTarjetas = 0.0;
                            totalVarios = 0.0;
                        } else {
                            ob[2] = "Sin detalle";
                        }
                    }
                    tbl.addRow(ob);
                }
                Object ob[] = new Object[10];
                ob[2] = " ";
                tbl.addRow(ob);
                ob[0] = "SUBTOTAL 2";
                ob[9] = df.format(totales2);
                ob[2] = df.format(massalin2);
                ob[3] = df1.format(cantidadMasalin2);
                ob[4] = df.format(nobleza2);
                ob[5] = df1.format(cantidadNobleza2);
                ob[6] = df.format(cigarrillos2);
                ob[7] = df.format(tarjetas2);
                ob[8] = df.format(varios2);
                tbl.addRow(ob);
                Object ob2[] = new Object[10];
                ob2[2] = " ";
                tbl.addRow(ob2);
                totales3 = totales1 + totales2;
                massalin3 = massalin1 + massalin2;
                cantidadMasalin3 = cantidadMasalin1 + cantidadMasalin2;
                nobleza3 = nobleza1 + nobleza2;
                cantidadNobleza3 = cantidadNobleza1 + cantidadNobleza2;
                cigarrillos3 = cigarrillos1 + cigarrillos2;
                tarjetas3 = tarjetas1 + tarjetas2;
                varios3 = varios1 + varios2;
                ob2[0] = "TOTAL";
                ob2[9] = df.format(totales3);
                ob2[2] = df.format(massalin3);
                ob2[3] = df1.format(cantidadMasalin3);
                ob2[4] = df.format(nobleza3);
                ob2[5] = df1.format(cantidadNobleza3);
                ob2[6] = df.format(cigarrillos3);
                ob2[7] = df.format(tarjetas3);
                ob2[8] = df.format(varios3);
                tbl.addRow(ob2);
                tablaReport.setModel(tbl);
            }
        }

    }

    private void borrarTabla() {
        int rows = tablaReport.getRowCount();
        if (rows > 0) {
            DefaultTableModel model = (DefaultTableModel) tablaReport.getModel();
            for (int n = 0; n < rows; n++) {
                model.removeRow(0);
            }
            tablaReport.setModel(model);
        }
        rows = tablaReporte.getRowCount();
        if (rows > 0) {
            DefaultTableModel model = (DefaultTableModel) tablaReporte.getModel();
            for (int n = 0; n < rows; n++) {
                model.removeRow(0);
            }
            tablaReporte.setModel(model);
        }
    }

    private void buscarMovim() {
        borrarTabla();
        Boolean volver = false;
        if (codigoClienteTxt.getText().isEmpty()) {
            volver = true;
        }
        if (fechaDesdeTxt.getText().isEmpty()) {
            volver = true;
        }
        if (fechaHastaTxt.getText().isEmpty()) {
            volver = true;
        }
        if (volver) {
            JOptionPane.showMessageDialog(this, "Debe completar un Codigo Cliente, y fechas desde y hasta");
        } else {
            generarInforme();
        }
    }

    private void buscarCliente() {
        if (!codigoClienteTxt.getText().isEmpty()) {
            String cod = codigoClienteTxt.getText();
            try {
                filtroCliente = new ClienteService().getClienteByCodigo(cod);
            } catch (Exception ex) {
                Logger.getLogger(VentasXClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un codigo de cliente");
            codigoClienteTxt.requestFocus();
            return;
        }
        nombreClienteTxt.setText(filtroCliente.getRazonSocial());
        Date fecha = new Date();
        fechaHastaTxt.setText(sdf.format(fecha));
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DATE, -60);
        fechaDesdeTxt.setText(sdf.format(calendar.getTime()));
        fechaDesdeTxt.requestFocus();
    }

    private void borrarCombo() {
        comboClientes.removeAllItems();
        comboClientes.addItem("");
        clientes = null;
    }

    private void generarExcel() {
        String rutaArchivo = "c:/informes/ventasporcliente.xls";
        File archivo = new File(rutaArchivo);
        if (archivo.exists()) {
            archivo.delete();
        }
        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableWorkbook libro = null;
        try {
            libro = Workbook.createWorkbook(archivo);
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableSheet hoja1 = libro.createSheet("Ventas Por Cliente", 0);

        try {
            hoja1.addCell(new jxl.write.Label(0, 0, "Distribuidora A&M - Ventas Por Cliente"));
            hoja1.addCell(new jxl.write.Label(0, 1, "Fecha"));
            hoja1.addCell(new jxl.write.Label(1, 1, "Número"));
            hoja1.addCell(new jxl.write.Label(2, 1, "$ Massalin"));
            hoja1.addCell(new jxl.write.Label(3, 1, "Cant.Mass."));
            hoja1.addCell(new jxl.write.Label(4, 1, "$ Nobleza"));
            hoja1.addCell(new jxl.write.Label(5, 1, "Cant.Nobleza"));
            hoja1.addCell(new jxl.write.Label(6, 1, "$ Cigarrillos"));
            hoja1.addCell(new jxl.write.Label(7, 1, "$ Tarjetas"));
            hoja1.addCell(new jxl.write.Label(8, 1, "$ Varios"));
            hoja1.addCell(new jxl.write.Label(9, 1, "Total"));
            DefaultTableModel tbl = (DefaultTableModel) tablaReporte.getModel();
            int y = 2;
            int rows = tablaReporte.getRowCount();
            for (int i = 0; i < rows; i++) {
                if (tbl.getValueAt(i, 1) != null) {
                    hoja1.addCell(new jxl.write.Label(0, y, tbl.getValueAt(i, 0).toString()));
                    hoja1.addCell(new jxl.write.Label(1, y, tbl.getValueAt(i, 1).toString()));
                    hoja1.addCell(new jxl.write.Label(2, y, tbl.getValueAt(i, 2).toString()));
                    hoja1.addCell(new jxl.write.Label(3, y, tbl.getValueAt(i, 3).toString()));
                    hoja1.addCell(new jxl.write.Label(4, y, tbl.getValueAt(i, 4).toString()));
                    hoja1.addCell(new jxl.write.Label(5, y, tbl.getValueAt(i, 5).toString()));
                    hoja1.addCell(new jxl.write.Label(6, y, tbl.getValueAt(i, 6).toString()));
                    hoja1.addCell(new jxl.write.Label(7, y, tbl.getValueAt(i, 7).toString()));
                    hoja1.addCell(new jxl.write.Label(8, y, tbl.getValueAt(i, 8).toString()));
                    hoja1.addCell(new jxl.write.Label(9, y, tbl.getValueAt(i, 9).toString()));
                }
                y += 1;

            }
            y += 2;
            tbl = (DefaultTableModel) tablaReport.getModel();
            rows = tablaReport.getRowCount();
            for (int i = 0; i < rows; i++) {
                if (tbl.getValueAt(i, 1) != null) {
                    hoja1.addCell(new jxl.write.Label(0, y, tbl.getValueAt(i, 0).toString()));
                    hoja1.addCell(new jxl.write.Label(1, y, tbl.getValueAt(i, 1).toString()));
                    hoja1.addCell(new jxl.write.Label(2, y, tbl.getValueAt(i, 2).toString()));
                    hoja1.addCell(new jxl.write.Label(3, y, tbl.getValueAt(i, 3).toString()));
                    hoja1.addCell(new jxl.write.Label(4, y, tbl.getValueAt(i, 4).toString()));
                    hoja1.addCell(new jxl.write.Label(5, y, tbl.getValueAt(i, 5).toString()));
                    hoja1.addCell(new jxl.write.Label(6, y, tbl.getValueAt(i, 6).toString()));
                    hoja1.addCell(new jxl.write.Label(7, y, tbl.getValueAt(i, 7).toString()));
                    hoja1.addCell(new jxl.write.Label(8, y, tbl.getValueAt(i, 8).toString()));
                    hoja1.addCell(new jxl.write.Label(9, y, tbl.getValueAt(i, 9).toString()));
                }
                y += 1;
            }
        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error configurando Excel");
        }
        try {
            libro.write();
            libro.close();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 528");
        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 529");
        }
        JOptionPane.showMessageDialog(this, "Excel creado correctamente");
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }
}
