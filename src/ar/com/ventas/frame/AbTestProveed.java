/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ComprobanteCompras;
import ar.com.ventas.entities.CuentaCorrienteProveedor;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.entities.RcCo;
import ar.com.ventas.entities.ReciboProveedor;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ComprobanteComprasService;
import ar.com.ventas.services.CuentaCorrienteProveedorService;
import ar.com.ventas.services.ProveedorService;
import ar.com.ventas.services.RcCoService;
import ar.com.ventas.services.ReciboProveedorService;
import java.text.DecimalFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mario
 */
public class AbTestProveed extends javax.swing.JFrame {

    private DecimalFormat df = new DecimalFormat("#0.00");

    /**
     * Creates new form AbTest
     */
    public AbTestProveed() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        codigoChekTxt.setText("");
        codigoCalcularTxt.setText("");
        codigoProveedorTxt.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ajustarBtn = new javax.swing.JButton();
        salirBtn = new javax.swing.JButton();
        verificarProvBtn = new javax.swing.JButton();
        codigoProveedorTxt = new javax.swing.JTextField();
        arreglarCtaBtn = new javax.swing.JButton();
        codigoChekTxt = new javax.swing.JTextField();
        chekBtn = new javax.swing.JButton();
        codigoCalcularTxt = new javax.swing.JTextField();
        calcularCtaBtn = new javax.swing.JButton();
        tstCmpbteBtn = new javax.swing.JButton();
        verificarNcEnCtaCteBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        verificarCtaCteEnNcBtn = new javax.swing.JButton();
        clientesDuplicadosBtn = new javax.swing.JButton();
        ctaCteClientesBtn = new javax.swing.JButton();
        vencimientoEnCombrasBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("AJUSTAR CTA CTE PROVEEDOR");

        ajustarBtn.setText("Ajustar Ctas. Ctes.");
        ajustarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajustarBtnActionPerformed(evt);
            }
        });

        salirBtn.setText("Salir");
        salirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirBtnActionPerformed(evt);
            }
        });

        verificarProvBtn.setText("Verificar Cta Proveedor todos");
        verificarProvBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verificarProvBtnActionPerformed(evt);
            }
        });

        codigoProveedorTxt.setText("COD");

        arreglarCtaBtn.setText("Arreglar");
        arreglarCtaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arreglarCtaBtnActionPerformed(evt);
            }
        });

        codigoChekTxt.setText("COD");

        chekBtn.setText("Chek");
        chekBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chekBtnActionPerformed(evt);
            }
        });

        codigoCalcularTxt.setText("COD");

        calcularCtaBtn.setText("Calcular Cta Cte");
        calcularCtaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularCtaBtnActionPerformed(evt);
            }
        });

        tstCmpbteBtn.setText("Test Imputacion Comprobantes");
        tstCmpbteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tstCmpbteBtnActionPerformed(evt);
            }
        });

        verificarNcEnCtaCteBtn.setText("Verif NC en CtaCte");
        verificarNcEnCtaCteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verificarNcEnCtaCteBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Cod.Prov:");

        verificarCtaCteEnNcBtn.setText("Verif CtaCte en Nc");
        verificarCtaCteEnNcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verificarCtaCteEnNcBtnActionPerformed(evt);
            }
        });

        clientesDuplicadosBtn.setText("Clientes CF Duplicados");
        clientesDuplicadosBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientesDuplicadosBtnActionPerformed(evt);
            }
        });

        ctaCteClientesBtn.setText("CtaCte Clientes");
        ctaCteClientesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctaCteClientesBtnActionPerformed(evt);
            }
        });

        vencimientoEnCombrasBtn.setText("Vencim en compras");
        vencimientoEnCombrasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vencimientoEnCombrasBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(verificarProvBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(salirBtn)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(codigoChekTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(codigoCalcularTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chekBtn)
                                .addGap(26, 218, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(codigoProveedorTxt)
                            .addComponent(arreglarCtaBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(71, 71, 71))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ajustarBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tstCmpbteBtn)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(verificarCtaCteEnNcBtn)
                                    .addComponent(verificarNcEnCtaCteBtn)
                                    .addComponent(ctaCteClientesBtn)
                                    .addComponent(calcularCtaBtn))
                                .addGap(62, 62, 62)
                                .addComponent(vencimientoEnCombrasBtn)))
                        .addContainerGap(60, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clientesDuplicadosBtn)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientesDuplicadosBtn)
                    .addComponent(ctaCteClientesBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verificarProvBtn)
                    .addComponent(salirBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ajustarBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tstCmpbteBtn)
                            .addComponent(verificarNcEnCtaCteBtn)
                            .addComponent(vencimientoEnCombrasBtn))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1))
                    .addComponent(verificarCtaCteEnNcBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codigoProveedorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codigoChekTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codigoCalcularTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(arreglarCtaBtn)
                    .addComponent(chekBtn)
                    .addComponent(calcularCtaBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ajustarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajustarBtnActionPerformed
        ajustar();
        System.exit(0);
    }//GEN-LAST:event_ajustarBtnActionPerformed

    private void salirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBtnActionPerformed
        salir();
    }//GEN-LAST:event_salirBtnActionPerformed

    private void verificarProvBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verificarProvBtnActionPerformed
        verif();
    }//GEN-LAST:event_verificarProvBtnActionPerformed

    private void arreglarCtaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arreglarCtaBtnActionPerformed
        arreglarCta();
    }//GEN-LAST:event_arreglarCtaBtnActionPerformed

    private void chekBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chekBtnActionPerformed
        check();
    }//GEN-LAST:event_chekBtnActionPerformed

    private void calcularCtaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularCtaBtnActionPerformed
        calcular();
    }//GEN-LAST:event_calcularCtaBtnActionPerformed

    private void tstCmpbteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tstCmpbteBtnActionPerformed
        AaTestProveed a = new AaTestProveed();
        a.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_tstCmpbteBtnActionPerformed

    private void verificarNcEnCtaCteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verificarNcEnCtaCteBtnActionPerformed
        String c = codigoChekTxt.getText();
        if (c.isEmpty()) {
            JOptionPane.showMessageDialog(this, "COLOQUE CODIGO PROVEEDOR ABAJO, ARRIBA DE CHEK");
            return;
        }
        verifNcEnCtaCte();
    }//GEN-LAST:event_verificarNcEnCtaCteBtnActionPerformed

    private void verificarCtaCteEnNcBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verificarCtaCteEnNcBtnActionPerformed
        String c = codigoChekTxt.getText();
        if (c.isEmpty()) {
            JOptionPane.showMessageDialog(this, "COLOQUE CODIGO PROVEEDOR ABAJO, ARRIBA DE CHEK");
            return;
        }
        verifCtaCteEnNc();
    }//GEN-LAST:event_verificarCtaCteEnNcBtnActionPerformed

    private void clientesDuplicadosBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientesDuplicadosBtnActionPerformed
        ClientesDuplicadosFrame cdf = new ClientesDuplicadosFrame();
        cdf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_clientesDuplicadosBtnActionPerformed

    private void ctaCteClientesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctaCteClientesBtnActionPerformed
        ctaCteClientes();
    }//GEN-LAST:event_ctaCteClientesBtnActionPerformed

    private void vencimientoEnCombrasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vencimientoEnCombrasBtnActionPerformed
        vencimCompras();
    }//GEN-LAST:event_vencimientoEnCombrasBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AbTestProveed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AbTestProveed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AbTestProveed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AbTestProveed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AbTestProveed().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ajustarBtn;
    private javax.swing.JButton arreglarCtaBtn;
    private javax.swing.JButton calcularCtaBtn;
    private javax.swing.JButton chekBtn;
    private javax.swing.JButton clientesDuplicadosBtn;
    private javax.swing.JTextField codigoCalcularTxt;
    private javax.swing.JTextField codigoChekTxt;
    private javax.swing.JTextField codigoProveedorTxt;
    private javax.swing.JButton ctaCteClientesBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton salirBtn;
    private javax.swing.JButton tstCmpbteBtn;
    private javax.swing.JButton vencimientoEnCombrasBtn;
    private javax.swing.JButton verificarCtaCteEnNcBtn;
    private javax.swing.JButton verificarNcEnCtaCteBtn;
    private javax.swing.JButton verificarProvBtn;
    // End of variables declaration//GEN-END:variables

    private void ajustar() {
        DecimalFormat df = new DecimalFormat("#0.00");
        List<Proveedor> proveedores = null;
        try {
            proveedores = new ProveedorService().getAllProveedores();
        } catch (Exception ex) {
            Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
        }
        Double sa = 0.0;
        for (Proveedor p : proveedores) {
            List<ComprobanteCompras> ccs = null;
            try {
                ccs = new ComprobanteComprasService().getFcAndNcPorProveedor(p);
            } catch (Exception ex) {
                Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ccs != null && !ccs.isEmpty()) {
                for (ComprobanteCompras cc : ccs) {
                    CuentaCorrienteProveedor ccp = new CuentaCorrienteProveedor();
                    ccp.setComprobante(cc);
                    ccp.setProveedor(p);
                    if (cc.getEsDebito()) {
                        sa += cc.getTotal();
                        ccp.setDebe(cc.getTotal());
                        ccp.setHaber(0.0);
                    } else {
                        sa -= cc.getTotal();
                        ccp.setDebe(0.0);
                        ccp.setHaber(cc.getTotal());
                    }
                    String sx = df.format(sa);
                    sa = Double.valueOf(sx.replace(",", "."));
                    ccp.setSaldo(sa);
                    ccp.setFecha(cc.getFechaFactura());
                    try {
                        new CuentaCorrienteProveedorService().saveCtaCteProveedor(ccp);
                    } catch (Exception ex) {
                        Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            p.setSaldo(sa);
            try {
                new ProveedorService().updateProveedor(p);
            } catch (Exception ex) {
                Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
            }
            sa = 0.0;
        }
    }

    private void verif() {
        List<Proveedor> proveedores = null;
        try {
            proveedores = new ProveedorService().getAllProveedoresActivosByCodigo();
        } catch (Exception ex) {
            Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (proveedores != null && !proveedores.isEmpty()) {
            for (Proveedor proveedor : proveedores) {
                List<CuentaCorrienteProveedor> ccp = null;
                try {
                    ccp = new CuentaCorrienteProveedorService().getAllByProveedor(proveedor);
                } catch (Exception ex) {
                    Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
                }
                int rows = ccp.size();
                if (rows > 0) {
                    System.out.println(df.format(ccp.get(rows - 1).getSaldo()));
                }
                System.out.println(df.format(proveedor.getSaldo()));
                JOptionPane.showMessageDialog(this, proveedor.getCodigo() + " Sigue");
            }
        }
        salir();
    }

    private void arreglarCta() {
        Integer p = Integer.valueOf(codigoProveedorTxt.getText());
        Proveedor pr = null;
        try {
            pr = new ProveedorService().getProveedorByCodigo(p);
        } catch (Exception ex) {
            Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (pr != null) {
            List<ComprobanteCompras> facturas = null;
            try {
                facturas = new ComprobanteComprasService().getFcAndNcPorProveedor(pr);
            } catch (Exception ex) {
                Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (facturas != null && !facturas.isEmpty()) {
                for (ComprobanteCompras cc : facturas) {
                    List<RcCo> rco = null;
                    try {
                        rco = new RcCoService().getRcCoByComprobante(cc);
                    } catch (Exception ex) {
                        Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (rco != null && !rco.isEmpty()) {
                        for (RcCo r : rco) {
                            try {
                                new RcCoService().deleteRecibo(r);
                            } catch (Exception ex) {
                                Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    cc.setEstaPago(false);
                    cc.setPagado(0.0);
                    try {
                        new ComprobanteComprasService().updateComprobante(cc);
                    } catch (Exception ex) {
                        Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            List<ReciboProveedor> recibos = null;
            try {
                recibos = new ReciboProveedorService().getRecibosPorProveedor(pr);
            } catch (Exception ex) {
                Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (recibos != null && !recibos.isEmpty()) {
                for (ReciboProveedor rp1 : recibos) {
                    List<RcCo> rco = null;
                    try {
                        rco = new RcCoService().getRcCoByRecibo(rp1);
                    } catch (Exception ex) {
                        Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (rco != null && !rco.isEmpty()) {
                        for (RcCo r : rco) {
                            try {
                                new RcCoService().deleteRecibo(r);
                            } catch (Exception ex) {
                                Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    rp1.setImputado(false);
                    rp1.setImporteImputado(0.0);
                    try {
                        new ReciboProveedorService().updateRecibo(rp1);
                    } catch (Exception ex) {
                        Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    private void calcular() {
        Integer p = Integer.valueOf(codigoCalcularTxt.getText());
        Proveedor pr = null;
        try {
            pr = new ProveedorService().getProveedorByCodigo(p);
        } catch (Exception ex) {
            Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (pr != null) {
            List<CuentaCorrienteProveedor> ccp = null;
            try {
                ccp = new CuentaCorrienteProveedorService().getAllByProveedor(pr);
            } catch (Exception ex) {
                Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ccp != null && !ccp.isEmpty()) {
                Double sal = 0.0;
                int x = 0;
                for (CuentaCorrienteProveedor c : ccp) {
                    if (x == 0) {
                        sal = c.getDebe() - c.getHaber();
                        x = 1;
                    } else {
                        sal += c.getDebe() - c.getHaber();
                    }
                    c.setSaldo(sal);
                    try {
                        new CuentaCorrienteProveedorService().updateCtaCteProveedor(c);
                    } catch (Exception ex) {
                        Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                pr.setSaldo(sal);
                try {
                    new ProveedorService().updateProveedor(pr);
                } catch (Exception ex) {
                    Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void check() {
        Integer p = Integer.valueOf(codigoChekTxt.getText());
        Proveedor pr = null;
        try {
            pr = new ProveedorService().getProveedorByCodigo(p);
        } catch (Exception ex) {
            Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (pr != null) {
            List<CuentaCorrienteProveedor> ccp = null;
            try {
                ccp = new CuentaCorrienteProveedorService().getAllByProveedor(pr);
            } catch (Exception ex) {
                Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
            }
            Double totalDebe = 0.00;
            Double totalHaberRc = 0.00;
            Double totalHaberNc = 0.00;
            if (ccp != null && !ccp.isEmpty()) {
                for (CuentaCorrienteProveedor c : ccp) {
                    if (c.getDebe() > 0.00) {
                        totalDebe += c.getDebe();
                    } else {
                        if (c.getHaber() > 0.00) {
                            if (c.getReciboProveedor() != null) {
                                totalHaberRc += c.getHaber();
                            } else {
                                totalHaberNc += c.getHaber();
                            }
                        }
                    }
                }
            }
            List<ComprobanteCompras> compC = null;
            try {
                compC = new ComprobanteComprasService().getFcAndNcPorProveedor(pr);
            } catch (Exception ex) {
                Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
            }
            Double totalFc = 0.00;
            Double totalNc = 0.00;
            Double totalRc = 0.00;
            if (compC != null && !compC.isEmpty()) {
                for (ComprobanteCompras co : compC) {
                    if (co.getEsDebito()) {
                        totalFc += co.getTotal();
                    } else {
                        totalNc += co.getTotal();
                    }
                }
            }
            List<ReciboProveedor> recP = null;
            try {
                recP = new ReciboProveedorService().getRecibosPorProveedor(pr);
            } catch (Exception ex) {
                Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (recP != null && !recP.isEmpty()) {
                for (ReciboProveedor rp : recP) {
                    totalRc += rp.getImporte();
                }
            }
            System.out.println("Facturas CC      " + df.format(totalDebe));
            System.out.println("Facturas         " + df.format(totalFc));
            System.out.println("Notas Credito CC " + df.format(totalHaberNc));
            System.out.println("Notas Credito    " + df.format(totalNc));
            System.out.println("Recibos CC       " + df.format(totalHaberRc));
            System.out.println("Recibos          " + df.format(totalRc));
            System.out.println("Saldo 1          " + df.format(totalDebe - totalHaberNc - totalHaberRc));
            System.out.println("Saldo 2          " + df.format(totalFc - totalRc - totalNc));
            System.out.println("Saldo Cta Prov   " + df.format(pr.getSaldo()));
        }
    }

    private void verifNcEnCtaCte() {
        int c = Integer.valueOf(codigoChekTxt.getText());
        Proveedor p = null;
        try {
            p = new ProveedorService().getProveedorByCodigo(c);
        } catch (Exception ex) {
            Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (p != null) {
            VerificarNcEnCtaCteFrame vneccf = new VerificarNcEnCtaCteFrame(p);
            vneccf.setVisible(true);
            this.dispose();
        }
    }

    private void verifCtaCteEnNc() {
        int c = Integer.valueOf(codigoChekTxt.getText());
        Proveedor p = null;
        try {
            p = new ProveedorService().getProveedorByCodigo(c);
        } catch (Exception ex) {
            Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (p != null) {
            VerificarCtaCteEnNcFrame vneccf = new VerificarCtaCteEnNcFrame(p);
            vneccf.setVisible(true);
            this.dispose();
        }
    }

    private void ctaCteClientes() {
        ChekCtaCteClientesFrame ccccf = new ChekCtaCteClientesFrame();
        ccccf.setVisible(true);
        this.dispose();
    }

    private void vencimCompras() {
        List<ComprobanteCompras> comprobantes = null;
        try {
            comprobantes = new ComprobanteComprasService().getAllIvaCompras();
        } catch (Exception ex) {
            Logger.getLogger(AbTestProveed.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(comprobantes);
        if (comprobantes != null && !comprobantes.isEmpty()) {
            int x = 0;
            
            try {
                for (ComprobanteCompras cocom : comprobantes) {
                    int y = 0;
                    x += 1;
                    if (cocom.getFechaEntrega() == null) {
                        System.out.println(cocom.getId());
                        cocom.setFechaEntrega(cocom.getFechaFactura());
                        cocom.setProntoPago(false);
                        y=1;
                    }
                    if(cocom.getDiasVencimiento() == null){
                        cocom.setDiasVencimiento(0);
                        cocom.setFechaCalculoVencimiento(cocom.getFechaEntrega());
                        y=1;
                    }
                    if(y==1){
                        new ComprobanteComprasService().updateComprobante(cocom);
                    }
                }
            } catch (Exception ex) {
                System.out.println(ex);
                System.out.println(x);
                JOptionPane.showMessageDialog(this, "VER");
            }
        }
    }

    private void salir() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }
}
