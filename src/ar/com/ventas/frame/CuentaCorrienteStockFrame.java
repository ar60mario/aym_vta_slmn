/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.CtaCteStock;
import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.entities.Usuario;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.CtaCteStockService;
import ar.com.ventas.services.ProductoService;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class CuentaCorrienteStockFrame extends javax.swing.JFrame {

    private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private final DecimalFormat df = new DecimalFormat("#0.0");
    private final DecimalFormat dfs = new DecimalFormat("0000");
    private final DecimalFormat dfn = new DecimalFormat("00000000");
    private List<CtaCteStock> ccs;
    private Integer estado = 0;
    private Integer volver = 0;
    private Usuario usuario;
    private final Integer nivel = 1;

    /**
     * Creates new form CuentaCorrienteStockFrame
     *
     * @param a
     * @param b
     * @param e
     * @param ccs
     * @param u
     */
    public CuentaCorrienteStockFrame(Date a, Date b, Integer e, List<CtaCteStock> ccs, Usuario u) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        this.usuario = u;
        limpiarCampos();
        if (a != null) {
            this.ccs = ccs;
            this.estado = e;
            deTxt.setText(sdf.format(a));
            alTxt.setText(sdf.format(b));
            llenarTabla();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        deTxt = new javax.swing.JTextField();
        alTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        porProveedorBtn = new javax.swing.JButton();
        porProductoBtn = new javax.swing.JButton();
        buscarBtn = new javax.swing.JButton();
        verComprobanteBtn = new javax.swing.JButton();
        modificarBtn = new javax.swing.JButton();
        borrarBtn = new javax.swing.JButton();
        agregarBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("MOVIMIENTOS STOCK");

        jLabel1.setText("Desde:");

        deTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deTxt.setText("DE");
        deTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deTxtKeyPressed(evt);
            }
        });

        alTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alTxt.setText("AL");
        alTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                alTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Hasta:");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Fech.Sistema", "Factura", "Código", "Proveedor", "Código", "Descripción", "Cantidad", "Usuario"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(110);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(110);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(130);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(70);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(250);
            tabla.getColumnModel().getColumn(5).setPreferredWidth(80);
            tabla.getColumnModel().getColumn(6).setPreferredWidth(250);
            tabla.getColumnModel().getColumn(7).setPreferredWidth(70);
        }

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        porProveedorBtn.setText("Ver X Prove.");
        porProveedorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porProveedorBtnActionPerformed(evt);
            }
        });

        porProductoBtn.setText("Ver X Prod.");
        porProductoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                porProductoBtnActionPerformed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        verComprobanteBtn.setText("Ver Cpbte.");
        verComprobanteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verComprobanteBtnActionPerformed(evt);
            }
        });

        modificarBtn.setText("Modif.");
        modificarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarBtnActionPerformed(evt);
            }
        });

        borrarBtn.setText("Borrar");
        borrarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarBtnActionPerformed(evt);
            }
        });

        agregarBtn.setText("Agregar");
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buscarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(porProveedorBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(porProductoBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(verComprobanteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(modificarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(agregarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(borrarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(volverBtn)
                        .addGap(0, 24, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(volverBtn)
                    .addComponent(porProveedorBtn)
                    .addComponent(porProductoBtn)
                    .addComponent(buscarBtn)
                    .addComponent(verComprobanteBtn)
                    .addComponent(modificarBtn)
                    .addComponent(borrarBtn)
                    .addComponent(agregarBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void deTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (deTxt.getText().isEmpty()) {
                deTxt.setText(sdf.format(new Date()));
                deTxt.requestFocus();
            } else {
                int largo = deTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    deTxt.setText(deTxt.getText() + "/" + f);
                    alTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        deTxt.setText(deTxt.getText() + an);
                        alTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            deTxt.setText("");
//                          request focus mismo campo
                            deTxt.requestFocus();
                        } else {
                            String veinte = deTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                deTxt.requestFocus();
                            } else{
                                alTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_deTxtKeyPressed

    private void alTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (alTxt.getText().isEmpty()) {
                alTxt.setText(sdf.format(new Date()));
                alTxt.requestFocus();
            } else {
                int largo = alTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    alTxt.setText(alTxt.getText() + "/" + f);
                    buscar();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        alTxt.setText(alTxt.getText() + an);
                        buscar();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            alTxt.setText("");
//                          request focus mismo campo
                            alTxt.requestFocus();
                        } else {
                            String veinte = alTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                alTxt.requestFocus();
                            } else{
                                buscar();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_alTxtKeyPressed

    private void porProveedorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porProveedorBtnActionPerformed
        xProveedor();
    }//GEN-LAST:event_porProveedorBtnActionPerformed

    private void porProductoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_porProductoBtnActionPerformed
        xProducto();
    }//GEN-LAST:event_porProductoBtnActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        buscar();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void verComprobanteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verComprobanteBtnActionPerformed
        xComprobante();
    }//GEN-LAST:event_verComprobanteBtnActionPerformed

    private void modificarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarBtnActionPerformed
        modificar();
    }//GEN-LAST:event_modificarBtnActionPerformed

    private void borrarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarBtnActionPerformed
        borrar();
    }//GEN-LAST:event_borrarBtnActionPerformed

    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBtnActionPerformed
        agregar();
    }//GEN-LAST:event_agregarBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CuentaCorrienteStockFrame(null, null, null, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarBtn;
    private javax.swing.JTextField alTxt;
    private javax.swing.JButton borrarBtn;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JTextField deTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modificarBtn;
    private javax.swing.JButton porProductoBtn;
    private javax.swing.JButton porProveedorBtn;
    private javax.swing.JTable tabla;
    private javax.swing.JButton verComprobanteBtn;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        deTxt.setText("");
        alTxt.setText("");
//        habilitar();
//        if (volver == 1) {
//            volver();
//            return;
//        }
        deTxt.requestFocus();
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private String de(String fe) {
        String dt;
        if (fe.isEmpty()) {
            dt = sdf.format(new Date());
            return dt;
        } else {
            int largo = fe.length();
            if (largo == 2) {
                Calendar cal = Calendar.getInstance();
                int mes = cal.get(Calendar.MONTH) + 1;
                int anio = cal.get(Calendar.YEAR);
                String an = String.valueOf(anio);
                String f = "0" + String.valueOf(mes);
                if (f.length() > 2) {
                    f = f.substring(1, 3);
                }
                f = f + "/" + an;
                dt = fe + "/" + f;
                return dt;
            } else {
                if (largo == 5) {
                    Calendar cal = Calendar.getInstance();
                    int anio = cal.get(Calendar.YEAR);
                    String an = "/" + String.valueOf(anio);
                    dt = deTxt.getText() + an;
                    return dt;
                } else {
                    if (largo != 10) {
                        if (largo != 1) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            dt = "";
                            return dt;
                        } else {
                            fe = "0" + fe;
                            Calendar cal = Calendar.getInstance();
                            int mes = cal.get(Calendar.MONTH) + 1;
                            int anio = cal.get(Calendar.YEAR);
                            String an = String.valueOf(anio);
                            String f = "0" + String.valueOf(mes);
                            if (f.length() > 2) {
                                f = f.substring(1, 3);
                            }
                            f = f + "/" + an;
                            dt = fe + "/" + f;
                            return dt;
                        }
                    } else {
                        String veinte = fe.substring(6, 8);
                        if (!veinte.equals("20")) {
                            JOptionPane.showMessageDialog(this, "Error en AÑO");
                            dt = "";
                            return dt;
                        } else {
                            dt = fe;
                            return dt;
                        }
                    }
                }
            }
        }

    }

    private void buscar() {
//        if (usuario == null) {
//            habilitar();
//        }
//        if (usuario == null) {
//            volver();
//            return;
//        }
//        if (volver == 1) {
//            volver();
//            return;
//        }
        if (deTxt.getText().isEmpty()) {
            deTxt.requestFocus();
            return;
        }
        if (alTxt.getText().isEmpty()) {
            alTxt.requestFocus();
            return;
        }
        limpiarTabla();
        estado = 1;
        Date d = new Date();
        Date a = new Date();
        try {
            d = sdf.parse(deTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            a = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        ccs = null;
        try {
            ccs = new CtaCteStockService().getCtaCteStocByFecha(d, a);
        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ccs != null && !ccs.isEmpty()) {
            limpiarTabla();
            llenarTabla();
        }
    }

    private void xProveedor() {
//        if (usuario == null) {
//            habilitar();
//        }
//        if (usuario == null) {
//            volver();
//            return;
//        }
//        if (volver == 1) {
//            volver();
//            return;
//        }
        if (deTxt.getText().isEmpty()) {
            deTxt.requestFocus();
            return;
        }
        if (alTxt.getText().isEmpty()) {
            alTxt.requestFocus();
            return;
        }
        estado = 2;
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Proveedor");
            return;
        }
        Proveedor p = ccs.get(row).getProveedor();
        Date d = new Date();
        Date a = new Date();
        try {
            d = sdf.parse(deTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            a = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        ccs = null;
        try {
            ccs = new CtaCteStockService().getCtaCteStocByFechaAndProveedor(p, d, a);
        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ccs != null && !ccs.isEmpty()) {
            limpiarTabla();
            llenarTabla();
        }
    }

    private void limpiarTabla() {
        int r = tabla.getRowCount();
        if (r > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int i = 0; i < r; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }

    private void xProducto() {
//        if (usuario == null) {
//            habilitar();
//        }
//        if (usuario == null) {
//            volver();
//            return;
//        }
//        if (volver == 1) {
//            volver();
//            return;
//        }
        if (deTxt.getText().isEmpty()) {
            deTxt.requestFocus();
            return;
        }
        if (alTxt.getText().isEmpty()) {
            alTxt.requestFocus();
            return;
        }
        estado = 3;
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Producto");
            return;
        }
        Producto p = ccs.get(row).getProducto();
        Date d = new Date();
        Date a = new Date();
        try {
            d = sdf.parse(deTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            a = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        ccs = null;
        try {
            ccs = new CtaCteStockService().getCtaCteStocByFechaAndProducto(p, d, a);
        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ccs != null && !ccs.isEmpty()) {
            limpiarTabla();
            llenarTabla();
        }
    }

    private void xComprobante() {
//        if (usuario == null) {
//            habilitar();
//        }
//        if (usuario == null) {
//            volver();
//            return;
//        }
//        if (volver == 1) {
//            volver();
//            return;
//        }
        estado = 4;
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Comprobante");
            return;
        }
        Long p = ccs.get(row).getComprobante();
        ccs = null;
        try {
            ccs = new CtaCteStockService().getCtaCteStocByComprobante(p);
        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ccs != null && !ccs.isEmpty()) {
            limpiarTabla();
            llenarTabla();
        }
    }

    private void modificar() {
//        if (usuario == null) {
//            habilitar();
//        }
//        if (usuario == null) {
//            volver();
//            return;
//        }
//        if (volver == 1) {
//            volver();
//            return;
//        }
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un producto para modificar");
            return;
        }
        Date d = new Date();
        Date a = new Date();
        try {
            d = sdf.parse(deTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            a = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        CtaCteStock cc1 = ccs.get(row);
        ModificarStockFrame msf = new ModificarStockFrame(d, a, estado, ccs, usuario, cc1);
        msf.setVisible(true);
        this.dispose();
    }

    private void borrar() {
//        if (usuario == null) {
//            habilitar();
//        }
//        if (usuario == null) {
//            volver();
//            return;
//        }
//        if (volver == 1) {
//            volver();
//            return;
//        }
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Seleccione un Item para BORRAR");
            return;
        }
        String n = ccs.get(row).getProducto().getDetalle();
        int a = JOptionPane.showConfirmDialog(this, "CONFIRME ELIMINAR PRODUCTO \n " + n, "Atención", JOptionPane.YES_NO_OPTION);
        CtaCteStock cc0 = new CtaCteStock();
        CtaCteStock cc1 = ccs.get(row);
        Float cantidad = cc1.getCantidad();
        Integer producto = cc1.getProducto().getCodigo();
        cc0.setCantidad(-cantidad);
        cc0.setProducto(cc1.getProducto());
        cc0.setComprobante(cc1.getComprobante());
        cc0.setFecha(new Date());
        cc0.setLetra(cc1.getLetra());
        cc0.setNumero(cc1.getNumero());
        cc0.setProveedor(cc1.getProveedor());
        cc0.setSucursal(cc1.getSucursal());
        cc0.setUsuario(usuario);
        Producto p = null;
        try {
            p = new ProductoService().getProductoByCodigo(producto);
        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Float s = p.getStock() - cantidad;
        p.setStock(s);
        try {
            new ProductoService().updateProducto(p);
        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            new CtaCteStockService().saveCtaCteStock(cc0);
        } catch (Exception ex) {
            Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        actualizar();
    }

//    private void habilitar() {
//        if(usuario != null){
//            return;
//        }
//        JTextField field = new JTextField("");
//        String[] options = {"Ingresar"};
//        int result = JOptionPane.showOptionDialog(
//                null,
//                field,
//                "Autorización de USUARIO",
//                JOptionPane.OK_CANCEL_OPTION,
//                JOptionPane.QUESTION_MESSAGE,
//                null,
//                options,
//                0);
//        if (field.getText().isEmpty()) {
//            usuario = null;
//            volver = 1;
//            return;
//        }
//        switch (result) {
//            case 0:
//                int cod = Integer.valueOf(field.getText());
//                try {
//                    usuario = new UsuarioService().getUsuarioByCodigo(cod);
//                } catch (Exception ex) {
//                    Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
//                if (usuario != null) {
//                    int cla = usuario.getNivel();
//                    if (usuario.getActivo()) {
//                        if (cla > 1) {
//                            return;
//                        }
//                        JPasswordField field2 = new JPasswordField("");
//                        String[] opts = {"Ingresar"};
//                        int resulta = JOptionPane.showOptionDialog(
//                                null,
//                                field2,
//                                "CONTRASEÑA: " + usuario.getNombre() + ", Autorización",
//                                JOptionPane.OK_CANCEL_OPTION,
//                                JOptionPane.QUESTION_MESSAGE,
//                                null,
//                                opts,
//                                0);
//                        switch (resulta) {
//                            case 0:
//                                int contra = Integer.valueOf(new String(field2.getPassword()));
//                                if (contra == usuario.getContrasena()) {
//                                    if (usuario.getNivel() > nivel) {
//                                        JOptionPane.showMessageDialog(this, "Usuario no Habilitado");
//                                        usuario = null;
//                                        volver = 1;
//                                    }
//                                } else {
//                                    JOptionPane.showMessageDialog(this, "Contraseña incorrecta");
//                                    usuario = null;
//                                    volver = 1;
//                                }
//                                break;
//                            default:
//                                usuario = null;
//                                volver = 1;
//                        }
//                        
//                    } else {
//                        JOptionPane.showMessageDialog(this, "USUARIO Inactivo");
//                        usuario = null;
//                        volver = 1;
//                    }
//                } else {
//                    JOptionPane.showMessageDialog(this, "No existe el Usuario");
//                    usuario = null;
//                    volver = 1;
//                }
//                break;
//            default:
//                usuario = null;
//                volver = 1;
//        }
//    }

    private void llenarTabla() {
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        for (CtaCteStock c : ccs) {
            Object o[] = new Object[9];
            o[0] = sdf.format(c.getFecha());
            if(c.getFechaSistema() == null){
                o[1] = sdf.format(new Date());
            }else{
                o[1] = sdf.format(c.getFechaSistema());
            }
            String fac = c.getLetra() + " " + dfs.format(c.getSucursal()) + "-" + dfn.format(c.getNumero());
            o[2] = fac;
            o[3] = c.getProveedor().getCodigo();
            o[4] = c.getProveedor().getRazonSocial();
            o[5] = c.getProducto().getCodigo();
            o[6] = c.getProducto().getDetalle();
            o[7] = df.format(c.getCantidad());
            o[8] = c.getUsuario().getNombre();
            tbl.addRow(o);
        }
        tabla.setModel(tbl);
    }

    private void actualizar() {
        if (estado == 1) {
            Date d = new Date();
            Date a = new Date();
            try {
                d = sdf.parse(deTxt.getText());
            } catch (ParseException ex) {
                Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                a = sdf.parse(alTxt.getText());
            } catch (ParseException ex) {
                Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            ccs = null;
            try {
                ccs = new CtaCteStockService().getCtaCteStocByFecha(d, a);
            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ccs != null && !ccs.isEmpty()) {
                limpiarTabla();
                llenarTabla();
            }
        }
        if (estado == 2) {
            int row = tabla.getSelectedRow();
            Proveedor p = ccs.get(row).getProveedor();
            Date d = new Date();
            Date a = new Date();
            try {
                d = sdf.parse(deTxt.getText());
            } catch (ParseException ex) {
                Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                a = sdf.parse(alTxt.getText());
            } catch (ParseException ex) {
                Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            ccs = null;
            try {
                ccs = new CtaCteStockService().getCtaCteStocByFechaAndProveedor(p, d, a);
            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ccs != null && !ccs.isEmpty()) {
                limpiarTabla();
                llenarTabla();
            }
        }
        if (estado == 3) {
            int row = tabla.getSelectedRow();
            Producto p = ccs.get(row).getProducto();
            Date d = new Date();
            Date a = new Date();
            try {
                d = sdf.parse(deTxt.getText());
            } catch (ParseException ex) {
                Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                a = sdf.parse(alTxt.getText());
            } catch (ParseException ex) {
                Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            ccs = null;
            try {
                ccs = new CtaCteStockService().getCtaCteStocByFechaAndProducto(p, d, a);
            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ccs != null && !ccs.isEmpty()) {
                limpiarTabla();
                llenarTabla();
            }
        }
        if (estado == 4) {
            int row = tabla.getSelectedRow();
            if (row < 0) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un Comprobante");
                return;
            }
            Long p = ccs.get(row).getComprobante();
            ccs = null;
            try {
                ccs = new CtaCteStockService().getCtaCteStocByComprobante(p);
            } catch (Exception ex) {
                Logger.getLogger(CuentaCorrienteStockFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ccs != null && !ccs.isEmpty()) {
                limpiarTabla();
                llenarTabla();
            }
        }
    }

    private void agregar() {
        if (estado != 4) {
            return;
        }
        JOptionPane.showMessageDialog(this, "ESTADO 4");
    }
}
