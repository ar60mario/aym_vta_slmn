/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.ClienteTraba;
import ar.com.ventas.entities.Customer;
import ar.com.ventas.entities.CustomerTraba;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.ClienteTrabaService;
import ar.com.ventas.services.CustomerService;
import ar.com.ventas.services.CustomerTrabaService;
import ar.com.ventas.util.UtilFrame;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Supervisor
 */
public class AbmClienteFrame extends javax.swing.JFrame {

    private List<Cliente> listadoCliente = null;
    private String fil;
    private Integer pagina = 0;
    private Integer limite = 28;
    private Boolean alpha;
    private Integer largo;
    private Integer row;
    private String codigo;
    private String fil2;

    /**
     * Creates new form AbmCliente
     *
     * @param row
     * @param pagina
     * @param fil
     * @param alpha
     * @param fil2
     * @param codigo
     */
    public AbmClienteFrame(Integer row, Integer pagina, String fil, Boolean alpha, String fil2, String codigo) {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        initComponents();
        limpiarCampos();

        this.row = row;
        this.fil = fil;
        this.pagina = pagina;
        this.alpha = alpha;
        this.fil2 = fil2;
        this.codigo = codigo;
//        System.out.println(row);
//        System.out.println(fil);
//        System.out.println(pagina);
//        System.out.println(fil != null);
//        System.out.println(alpha);
        cargaInicial();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        volverBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        modificarBtn = new javax.swing.JButton();
        numericoRb = new javax.swing.JRadioButton();
        alfabeticoRb = new javax.swing.JRadioButton();
        nombreTxt = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        desbloquearBtn = new javax.swing.JButton();
        activarOfBtn = new javax.swing.JButton();
        activarCfBtn = new javax.swing.JButton();
        anteriorBtn = new javax.swing.JButton();
        siguienteBtn = new javax.swing.JButton();
        primeroBtn = new javax.swing.JButton();
        ultimoBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        codigoTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        comienzaFiltroTxt = new javax.swing.JTextField();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("ABM CLIENTES");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO", "NOMBRE", "CUIT", "Activo OF", "Activo CF"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaClientes);
        if (tablaClientes.getColumnModel().getColumnCount() > 0) {
            tablaClientes.getColumnModel().getColumn(0).setPreferredWidth(40);
            tablaClientes.getColumnModel().getColumn(1).setPreferredWidth(300);
            tablaClientes.getColumnModel().getColumn(2).setPreferredWidth(60);
            tablaClientes.getColumnModel().getColumn(3).setPreferredWidth(50);
            tablaClientes.getColumnModel().getColumn(4).setPreferredWidth(50);
        }

        modificarBtn.setText("Modificar");
        modificarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarBtnActionPerformed(evt);
            }
        });

        numericoRb.setText("Numérico");
        numericoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numericoRbActionPerformed(evt);
            }
        });

        alfabeticoRb.setText("Alfabético");
        alfabeticoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alfabeticoRbActionPerformed(evt);
            }
        });

        nombreTxt.setText("NOMBRE");
        nombreTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreTxtKeyPressed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        desbloquearBtn.setText("Desbloquear");
        desbloquearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desbloquearBtnActionPerformed(evt);
            }
        });

        activarOfBtn.setText("Activar/Desactivar OF");
        activarOfBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activarOfBtnActionPerformed(evt);
            }
        });

        activarCfBtn.setText("Activar/Desactivar CF");
        activarCfBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activarCfBtnActionPerformed(evt);
            }
        });

        anteriorBtn.setText("ANTERIOR");
        anteriorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorBtnActionPerformed(evt);
            }
        });

        siguienteBtn.setText("SIGUIENTE");
        siguienteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteBtnActionPerformed(evt);
            }
        });

        primeroBtn.setText("PRIM");
        primeroBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                primeroBtnActionPerformed(evt);
            }
        });

        ultimoBtn.setText("ULT");
        ultimoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ultimoBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre: ");

        jLabel2.setText("CODIGO:");

        codigoTxt.setText("CODIGO");
        codigoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoTxtKeyPressed(evt);
            }
        });

        jLabel3.setText("COMIENZA CON:");

        comienzaFiltroTxt.setText("COMIENZA");
        comienzaFiltroTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comienzaFiltroTxtKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(modificarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(primeroBtn)
                        .addGap(18, 18, 18)
                        .addComponent(anteriorBtn)
                        .addGap(18, 18, 18)
                        .addComponent(siguienteBtn)
                        .addGap(18, 18, 18)
                        .addComponent(ultimoBtn)
                        .addGap(18, 18, 18)
                        .addComponent(desbloquearBtn)
                        .addGap(18, 18, 18)
                        .addComponent(activarOfBtn)
                        .addGap(18, 18, 18)
                        .addComponent(activarCfBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(alfabeticoRb)
                        .addGap(18, 18, 18)
                        .addComponent(numericoRb)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comienzaFiltroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buscarBtn)))
                .addGap(13, 13, 13))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numericoRb)
                    .addComponent(alfabeticoRb)
                    .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(buscarBtn)
                    .addComponent(jLabel2)
                    .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(comienzaFiltroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modificarBtn)
                    .addComponent(volverBtn)
                    .addComponent(desbloquearBtn)
                    .addComponent(activarOfBtn)
                    .addComponent(activarCfBtn)
                    .addComponent(anteriorBtn)
                    .addComponent(siguienteBtn)
                    .addComponent(primeroBtn)
                    .addComponent(ultimoBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        MainFrame mainFrame = new MainFrame();
        mainFrame.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_volverBtnActionPerformed

    private void modificarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarBtnActionPerformed
        Cliente cliente = this.getClienteSeleccionado();
        if (cliente != null) {
            String c = cliente.getCodigo();
            ClienteTraba ct = null;
            CustomerTraba cuTr = null;
            try {
                ct = new ClienteTrabaService().getClienteByCodigo(c);
                cuTr = new CustomerTrabaService().getClienteByCodigo(c);
            } catch (Exception ex) {
                Logger.getLogger(AbmClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ct.getTraba1() != null) {
                if (ct.getTraba1()) {
                    JOptionPane.showMessageDialog(this, "Cliente bloqueado para Modificar.");
                    return;
                }
            }
            if (cuTr.getTraba2() != null) {
                if (cuTr.getTraba2()) {
                    JOptionPane.showMessageDialog(this, "Cliente bloqueado para Modificar.");
                    return;
                }
            }
//        }
//        if (cliente != null) {
            int r = tablaClientes.getSelectedRow();
            if (!nombreTxt.getText().isEmpty()) {
                fil = nombreTxt.getText();
            }
            if (!comienzaFiltroTxt.getText().isEmpty()) {
                fil2 = comienzaFiltroTxt.getText();
            }
            if (!codigoTxt.getText().isEmpty()) {
                codigo = codigoTxt.getText();
            }
//            System.out.println(cliente);
//            System.out.println(r);
//            System.out.println(pagina);
//            System.out.println(fil);
//            System.out.println(alpha);
//            System.exit(0);
            ModificarClienteFrame mcf = new ModificarClienteFrame(cliente, r, pagina, fil, alpha, fil2, codigo);
            mcf.setVisible(true);
            this.dispose();
        }
//        else {
//            JOptionPane.showMessageDialog(this, "Debe seleccionar un Cliente de la lista.", "Atencion",
//                    JOptionPane.INFORMATION_MESSAGE);
//        }
    }//GEN-LAST:event_modificarBtnActionPerformed

    private void alfabeticoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alfabeticoRbActionPerformed
        pagina = 0;
        alpha = true;
        if (numericoRb.isSelected()) {
            alfabeticoRb.setSelected(true);
            numericoRb.setSelected(false);
            cargarLista();
        } else {
            alfabeticoRb.setSelected(true);
            cargarLista();
        }
    }//GEN-LAST:event_alfabeticoRbActionPerformed

    private void numericoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numericoRbActionPerformed
        pagina = 0;
        alpha = false;
        if (alfabeticoRb.isSelected()) {
            numericoRb.setSelected(true);
            alfabeticoRb.setSelected(false);
            cargarListaNumerico();
        } else {
            numericoRb.setSelected(true);
            alfabeticoRb.setSelected(false);
            cargarListaNumerico();
        }
    }//GEN-LAST:event_numericoRbActionPerformed

    private void nombreTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            desBloquearBotones();
            pagina = 0;
            if (alfabeticoRb.isSelected()) {
                alpha = true;
                comienzaFiltroTxt.setText("");
                codigoTxt.setText("");
                cargarLista3();
            } else {
                alpha = false;
                cargarListaNumerico();
            }

        }
    }//GEN-LAST:event_nombreTxtKeyPressed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
//        if (alfabeticoRb.isSelected()) {
//            cargarLista();
////            llenarTabla();
//        } else {
//            cargarListaNumerico();
////            llenarTablaNumerico();
//        }
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void desbloquearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desbloquearBtnActionPerformed
        int row = tablaClientes.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente");
            return;
        }
        JOptionPane.showMessageDialog(this, "Verifique que salio de todos \nlos sistemas para desbloquear");
        Cliente cli = listadoCliente.get(row);
        String c = cli.getCodigo();
        ClienteTraba ct = null;
        CustomerTraba cuTr = null;
        try {
            ct = new ClienteTrabaService().getClienteByCodigo(c);
            cuTr = new CustomerTrabaService().getClienteByCodigo(c);
        } catch (Exception ex) {
            Logger.getLogger(AbmClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        int resp = JOptionPane.showConfirmDialog(null,
                "Esta seguro de desbloquear a: \n" + cli.getRazonSocial() + "?",
                "Atencion", JOptionPane.YES_NO_OPTION);
        if (resp == 0) {
            ct.setTraba1(false);
            cuTr.setTraba2(false);
            cli.setImporteMostrador(0.00);
            try {
                new ClienteService().updateCliente(cli);
                new ClienteTrabaService().updateCliente(ct);
                new CustomerTrabaService().updateCliente(cuTr);
                JOptionPane.showMessageDialog(this, "Cliente: \n" + cli.getRazonSocial() + "\nDesbloqueado.");
            } catch (Exception ex) {
                Logger.getLogger(AbmClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_desbloquearBtnActionPerformed

    private void activarOfBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activarOfBtnActionPerformed
        adOf();
    }//GEN-LAST:event_activarOfBtnActionPerformed

    private void activarCfBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activarCfBtnActionPerformed
        adCf();
    }//GEN-LAST:event_activarCfBtnActionPerformed

    private void siguienteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteBtnActionPerformed
        pagina += limite;
        Boolean mostrado = false;
        if (alfabeticoRb.isSelected()) {
            if (nombreTxt.getText().isEmpty()) {
                if (!comienzaFiltroTxt.getText().isEmpty()) {
                    mostrado = cargarListaComienza();
                } else {
//                    if (!codigoTxt.getText().isEmpty()) {
                    mostrado = cargarLista();
//                    }else{
//                        mostrado = cargarLista();
//                    }
                }
            } else {
                mostrado = cargarListaNombre();
            }
            if (!mostrado) {
                pagina -= limite;
                if (pagina < 0) {
                    pagina = 0;
                }
                if (nombreTxt.getText().isEmpty()) {
                    if (!comienzaFiltroTxt.getText().isEmpty()) {
                        cargarListaComienza();
                    } else {
                        if (!codigoTxt.getText().isEmpty()) {
                            cargarLista();
                        }
                    }
                } else {
                    cargarListaNombre();
                }
            }
//            llenarTabla();
        } else {
            cargarListaNumerico();
//            llenarTablaNumerico();
        }
    }//GEN-LAST:event_siguienteBtnActionPerformed

    private void anteriorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorBtnActionPerformed
        pagina -= limite;
        if (pagina < 0) {
            pagina = 0;
        }
        if (alfabeticoRb.isSelected()) {
//            llenarTabla();
            cargarLista();
        } else {
//            llenarTablaNumerico();
            cargarListaNumerico();
        }
    }//GEN-LAST:event_anteriorBtnActionPerformed

    private void primeroBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_primeroBtnActionPerformed
        pagina = 0;
        if (alfabeticoRb.isSelected()) {
            cargarLista();
        } else {
            cargarListaNumerico();
        }
    }//GEN-LAST:event_primeroBtnActionPerformed

    private void ultimoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ultimoBtnActionPerformed
        pagina = largo / limite;
        if (alfabeticoRb.isSelected()) {
            cargarLista2();
        } else {
            cargarListaNumerico2();
        }

    }//GEN-LAST:event_ultimoBtnActionPerformed

    private void codigoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!codigoTxt.getText().isEmpty()) {
                codigo = codigoTxt.getText();
                comienzaFiltroTxt.setText("");
                nombreTxt.setText("");
                cargaClienteUnico();

            } else {
                comienzaFiltroTxt.setText("");
                comienzaFiltroTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_codigoTxtKeyPressed

    private void comienzaFiltroTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comienzaFiltroTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            desBloquearBotones();
            if (comienzaFiltroTxt.getText().isEmpty()) {
                nombreTxt.setText("");
                nombreTxt.requestFocus();
            } else {
                fil = comienzaFiltroTxt.getText();
                nombreTxt.setText("");
                codigoTxt.setText("");
                pagina = 0;
                listadoCliente = null;
                try {
                    listadoCliente = new ClienteService().getClientesComienzaByFiltro(fil, pagina, limite);
                } catch (Exception ex) {
                    Logger.getLogger(AbmClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (listadoCliente != null && !listadoCliente.isEmpty()) {
                    llenarTabla();
                }
            }
        }
    }//GEN-LAST:event_comienzaFiltroTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AbmClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AbmClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AbmClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AbmClienteFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AbmClienteFrame(null, null, null, null, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton activarCfBtn;
    private javax.swing.JButton activarOfBtn;
    private javax.swing.JRadioButton alfabeticoRb;
    private javax.swing.JButton anteriorBtn;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JTextField codigoTxt;
    private javax.swing.JTextField comienzaFiltroTxt;
    private javax.swing.JButton desbloquearBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modificarBtn;
    private javax.swing.JTextField nombreTxt;
    private javax.swing.JRadioButton numericoRb;
    private javax.swing.JButton primeroBtn;
    private javax.swing.JButton siguienteBtn;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JButton ultimoBtn;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private Boolean cargarLista() {
        listadoCliente = null;
        if (nombreTxt.getText().isEmpty()) {
            if (comienzaFiltroTxt.getText().isEmpty()) {
                if (!codigoTxt.getText().isEmpty()) {
                    String codigo = codigoTxt.getText();
                    Cliente cliente = null;
                    try {
                        cliente = new ClienteService().getClienteByCodigo(codigo);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Error");
                    }
                    listadoCliente = new ArrayList<>();
                    listadoCliente.add(cliente);
                } else {
                    try {
//                        System.out.println(pagina);
//                        System.out.println(limite);
//                        System.exit(0);
                        listadoCliente = new ClienteService().getAllClientesOrdenadoByPagina(pagina, limite);
                    } catch (Exception ex) {
                        Logger.getLogger(AbmClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
                        return false;
                    }
                    llenarTabla();
                    return true;
                }
            } else {
                try {
                    fil2 = comienzaFiltroTxt.getText();
                    listadoCliente = new ClienteService().getClientesComienzaByFiltro(fil2, pagina, limite);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error");
                }
            }
        } else {
            String filtro = nombreTxt.getText();
            try {
//                if (filtro.equals("*")) {
//                    listadoCliente = new ClienteService().getAllClientesOrdenadoByPagina(pagina, limite);
//                } else {
                listadoCliente = new ClienteService().getClientesByFiltroPaginado(filtro, pagina, limite);
//                }
            } catch (Exception ex) {
                Logger.getLogger(AbmClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (listadoCliente != null && !listadoCliente.isEmpty()) {
            llenarTabla();
            return true;
        }
        return false;
    }

    private void llenarTabla() {
        UtilFrame.limpiarTabla(tablaClientes);
        DefaultTableModel tabla = (DefaultTableModel) tablaClientes.getModel();
        for (Cliente cli : listadoCliente) {
            Object ob[] = new Object[5];
            ob[0] = cli.getCodigo();
            String codi = cli.getCodigo();
            Customer c = null;
            try {
                c = new CustomerService().getCustomerByCodigo(codi);

            } catch (Exception ex) {
                Logger.getLogger(AbmClienteFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            ob[1] = cli.getRazonSocial();
            ob[2] = cli.getCuit();
            if (cli.getActivo() != null) {
                if (cli.getActivo()) {
                    ob[3] = "SI";
                } else {
                    ob[3] = "NO";
                }
            } else {
                ob[3] = "SI x";
            }
            if (c != null) {
                if (c.getActivo()) {
                    ob[4] = "SI";
                } else {
                    ob[4] = "NO";
                }
            } else {
                ob[4] = "NULL";
            }
            tabla.addRow(ob);
        }
        tablaClientes.setModel(tabla);
    }

    private Cliente getClienteSeleccionado() {
        Cliente cliente = null;
        int filaSeleccionada = tablaClientes.getSelectedRow();
        if (filaSeleccionada != -1 && listadoCliente != null && !listadoCliente.isEmpty()) {
            cliente = listadoCliente.get(filaSeleccionada);
        } else {
//            logger.log(Level.WARNING, "No se selecciono ningun item de la lista");
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente de la lista.", "Atencion",
                    JOptionPane.INFORMATION_MESSAGE);
        }
        return cliente;
    }

//    private void borrarTabla() {
//        listadoCliente = null;
//        int rows = tablaClientes.getRowCount();
//        if (rows > 0) {
//            DefaultTableModel tabla = (DefaultTableModel) tablaClientes.getModel();
//            for (int n = 0; n < rows; n++) {
//                tabla.removeRow(0);
//                //listadoCliente.remove(0);
//            }
//            tablaClientes.setModel(tabla);
//        }
//    }
    private void llenarTablaNumerico() {
//        UtilFrame.limpiarTabla(tablaClientes);
//        DefaultTableModel tabla = (DefaultTableModel) tablaClientes.getModel();
//
//        if (listadoCliente != null && !listadoCliente.isEmpty()) {
//            for (Cliente cli : listadoCliente) {
//                Object ob[] = new Object[5];
//                ob[0] = cli.getCodigo();
//                ob[1] = cli.getRazonSocial();
//                ob[2] = cli.getCuit();
//                Customer cu = null;
//                String co = cli.getCodigo();
//                if (cli.getActivo() != null) {
//                    if (cli.getActivo()) {
//                        ob[3] = "SI";
//                    } else {
//                        ob[3] = "NO";
//                    }
//                } else {
//                    ob[3] = "SI x";
//                }
//                try {
//                    cu = new CustomerService().getCustomerByCodigo(co);
//                } catch (Exception ex) {
//                    Logger.getLogger(AbmClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
//                if (cu != null) {
//                    if (cu.getActivo()) {
//                        ob[4] = "SI";
//                    } else {
//                        ob[4] = "NO";
//                    }
//                } else {
//                    ob[4] = "NULL";
//                }
//                tabla.addRow(ob);
//            }
//            tablaClientes.setModel(tabla);
//        }
    }

    private void buscarClientesByFiltro() {
//        UtilFrame.limpiarTabla(tablaClientes);
//        String filtro = nombreTxt.getText();
//        listadoCliente = null;
//        if (alfabeticoRb.isSelected()) {
//            try {
//                listadoCliente = new ClienteService().getClientesByFiltro(filtro);
//            } catch (Exception ex) {
//                Logger.getLogger(AbmClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        } else {
//            try {
//                listadoCliente = new ClienteService().getClientesByFiltroNumerico(filtro);
//            } catch (Exception ex) {
//                Logger.getLogger(AbmClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//        if (listadoCliente != null && !listadoCliente.isEmpty()) {
//            DefaultTableModel tabla = (DefaultTableModel) tablaClientes.getModel();
//            for (Cliente cli : listadoCliente) {
//                Object ob[] = new Object[4];
//                ob[0] = cli.getCodigo();
//                ob[1] = cli.getRazonSocial();
//                ob[2] = cli.getCuit();
//                Customer cu = null;
//                String co = cli.getCodigo();
//                try {
//                    cu = new CustomerService().getCustomerByCodigo(co);
//                } catch (Exception ex) {
//                    Logger.getLogger(AbmClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
//                if (cu != null) {
//                    if (cu.getActivo()) {
//                        ob[3] = "SI";
//                    } else {
//                        ob[3] = "NO";
//                    }
//                } else {
//                    ob[3] = "NULL";
//                }
//                tabla.addRow(ob);
//            }
//            tablaClientes.setModel(tabla);
//        }
    }

    private void adOf() {
        int row = tablaClientes.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UNO");
            return;
        }
        Cliente c = listadoCliente.get(row);
        if (c.getActivo() != null) {
            if (c.getActivo()) {
                c.setActivo(false);
            } else {
                c.setActivo(true);
            }
        } else {
            c.setActivo(false);
        }
        try {
            new ClienteService().updateCliente(c);

        } catch (Exception ex) {
            Logger.getLogger(AbmClienteFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        UtilFrame.limpiarTabla(tablaClientes);
        if (alfabeticoRb.isSelected()) {
            llenarTabla();
        } else {
            llenarTablaNumerico();
        }
        if (row > -1) {
            Rectangle rect = tablaClientes.getCellRect(row, 0, true);
            tablaClientes.scrollRectToVisible(rect);
            tablaClientes.clearSelection();
            tablaClientes.setRowSelectionInterval(row, row);
        }
    }

    private void adCf() {
        int row = tablaClientes.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR UNO");
            return;
        }
        Cliente c = listadoCliente.get(row);
        Customer cu = null;
        String co = c.getCodigo();
        try {
            cu = new CustomerService().getCustomerByCodigo(co);

        } catch (Exception ex) {
            Logger.getLogger(AbmClienteFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        if (cu != null) {
            if (cu.getActivo() != null) {
                if (cu.getActivo()) {
                    cu.setActivo(false);
                } else {
                    cu.setActivo(true);
                }
            } else {
                cu.setActivo(false);
            }
            try {
                new CustomerService().updateCustomer(cu);

            } catch (Exception ex) {
                Logger.getLogger(AbmClienteFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            UtilFrame.limpiarTabla(tablaClientes);
            if (alfabeticoRb.isSelected()) {
                llenarTabla();
            } else {
                llenarTablaNumerico();
            }
            if (row > -1) {
                Rectangle rect = tablaClientes.getCellRect(row, 0, true);
                tablaClientes.scrollRectToVisible(rect);
                tablaClientes.clearSelection();
                tablaClientes.setRowSelectionInterval(row, row);
            }
        }
    }

    private void cargarListaNumerico() {
        if (nombreTxt.getText().isEmpty()) {
            try {
                //listadoCliente = new ClienteService().getClienteOrdenadoPorNumero();
                listadoCliente = new ClienteService().getClientesOrdenadoPorNumeroPaginado(pagina, limite);

            } catch (Exception ex) {
                Logger.getLogger(AbmClienteFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String filtro = nombreTxt.getText();
            try {
                listadoCliente = new ClienteService().getClientesByFiltroNumericoPaginado(filtro, pagina, limite);

            } catch (Exception ex) {
                Logger.getLogger(AbmClienteFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }
        largo = listadoCliente.size();
        Integer maximoDePaginas = largo / limite;
        //if(pagina.equals(maximoDePaginas)){
        if (pagina > maximoDePaginas) {
            pagina -= limite;
        }
        llenarTabla();
    }

    private void cargarLista2() {
//        List<Cliente> listado2 = null;
        List<Cliente> clientes = null;
        if (nombreTxt.getText().isEmpty()) {
//        System.out.println(pagina);
//        System.out.println(limite);
//        System.exit(0);
            try {
//                listadoCliente = new ClienteService().getClienteOrdenado();
                listadoCliente = new ClienteService().getUltimos(0, limite);
//                listado2 = new ClienteService().getAllClientesOrdenadoByPagina(pagina, limite);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error");
            }

        } else {
            if (!nombreTxt.getText().equals("*")) {
                String filtro = nombreTxt.getText();

                try {
                    listadoCliente = new ClienteService().getUltimosByFiltro(filtro, 0, limite);
                    clientes = new ClienteService().getClientesByFiltro(filtro);

                } catch (Exception ex) {
                    Logger.getLogger(AbmClienteFrame.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                largo = clientes.size();
            } else {
                try {
//                listadoCliente = new ClienteService().getClienteOrdenado();
                    listadoCliente = new ClienteService().getUltimos(0, limite);
//                listado2 = new ClienteService().getAllClientesOrdenadoByPagina(pagina, limite);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error");
                }
            }
        }

//        if (largo > 0) {
//            listadoCliente = listado2;
        pagina = largo / limite;
        llenarTabla();
        System.out.println(pagina);
//        }
    }

    private void cargarListaNumerico2() {
        List<Cliente> clientes = null;
        if (nombreTxt.getText().isEmpty()) {
            try {
                listadoCliente = new ClienteService().getUltimos(1, limite);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error");
            }

        } else {
            String filtro = nombreTxt.getText();
            try {
                listadoCliente = new ClienteService().getUltimosByFiltro(filtro, 0, limite);

            } catch (Exception ex) {
                Logger.getLogger(AbmClienteFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            largo = clientes.size();
        }

        pagina = largo / limite;
        llenarTabla();
//        }
    }

    private void cargarLista3() {
        if (nombreTxt.getText().isEmpty()) {
            codigoTxt.setText("");
            codigoTxt.requestFocus();
        } else {
            fil = nombreTxt.getText();
            listadoCliente = null;
            pagina = 0;
            try {
                listadoCliente = new ClienteService().getClientesByFiltroPaginado(fil, pagina, limite);

            } catch (Exception ex) {
                Logger.getLogger(AbmClienteFrame.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
            if (listadoCliente != null && !listadoCliente.isEmpty()) {
                llenarTabla();
            }
        }
    }

    private Boolean cargarListaComienza() {
        fil2 = comienzaFiltroTxt.getText();
        listadoCliente = null;
        try {
            listadoCliente = new ClienteService().getClientesComienzaByFiltro(fil2, pagina, limite);
        } catch (Exception ex) {
            Logger.getLogger(AbmClienteFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        if (listadoCliente != null && !listadoCliente.isEmpty()) {
            llenarTabla();
            return true;
        }
        return false;
    }

    private Boolean cargarListaNombre() {
        fil = nombreTxt.getText();
        listadoCliente = null;
        try {
            if (fil.equals("*")) {
                listadoCliente = new ClienteService().getAllClientesOrdenadoByPagina(pagina, limite);
            } else {
                listadoCliente = new ClienteService().getClientesByFiltroPaginado(fil, pagina, limite);
            }

        } catch (Exception ex) {
            Logger.getLogger(AbmClienteFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        if (listadoCliente != null && !listadoCliente.isEmpty()) {
            llenarTabla();
            return true;
        }
        return false;
    }

    private void bloquearBotones() {
        anteriorBtn.setEnabled(false);
        siguienteBtn.setEnabled(false);
        primeroBtn.setEnabled(false);
        ultimoBtn.setEnabled(false);
    }

    private void desBloquearBotones() {
        anteriorBtn.setEnabled(true);
        siguienteBtn.setEnabled(true);
        primeroBtn.setEnabled(true);
        ultimoBtn.setEnabled(true);
    }

    private void cargaInicial() {
        int i = 0;
        if (pagina == null) {
            pagina = 0;
        }
        if (row == null) {
            row = 1;
        } else {
            row += 1;
        }
        if (fil != null) {
            nombreTxt.setText(fil);
            codigoTxt.setText("");
            comienzaFiltroTxt.setText("");
        }
        if (fil2 != null) {
            nombreTxt.setText("");
            codigoTxt.setText("");
            comienzaFiltroTxt.setText(fil2);
            comienzaFiltroTxt.requestFocus();
        }
        if (codigo != null) {
            nombreTxt.setText("");
            codigoTxt.setText(codigo);
            comienzaFiltroTxt.setText("");
            codigoTxt.requestFocus();
            i = 1;
        }
        if (i == 1) {
            cargaClienteUnico();
        } else {
            cargarLista();
        }

        int nro = row;
//        int nro = tablaClientes.getRowCount();
        if (nro > 0) {
            Rectangle rect = tablaClientes.getCellRect(nro - 1, 0, true);
            tablaClientes.scrollRectToVisible(rect);
            tablaClientes.clearSelection();
            tablaClientes.setRowSelectionInterval(nro - 1, nro - 1);
        }
        /*
        if (this.fil != null) {
            if (this.fil.isEmpty()) {
                nombreTxt.setText("");
                if (alpha) {
                    numericoRb.setSelected(false);
                    alfabeticoRb.setSelected(true);
                } else {
                    numericoRb.setSelected(true);
                    alfabeticoRb.setSelected(false);
                }
                if (codigo.equals(0)) {
                    if (fil2 != null) {
                        if (fil2.isEmpty()) {

                        }
                    }
                }
            } else {
                nombreTxt.setText(this.fil);
                if (this.fil.equals("*")) {
                    this.pagina = 0;
                } else {
                    if (alpha) {
                        numericoRb.setSelected(false);
                        alfabeticoRb.setSelected(true);
                    } else {
                        numericoRb.setSelected(true);
                        alfabeticoRb.setSelected(false);
                    }
                }
            }
//            System.exit(0);
        } else {
            this.pagina = 0;
            alfabeticoRb.setSelected(true);
//            System.out.println("Pagina");
//            System.out.println(pagina);
        }
//        System.exit(0);
        
         */
    }

    private void limpiarCampos() {
        nombreTxt.setText("");
        codigoTxt.setText("");
        comienzaFiltroTxt.setText("");
        numericoRb.setVisible(false);
        buscarBtn.setVisible(false);
        alfabeticoRb.setVisible(false);
        alfabeticoRb.setSelected(true);
        ultimoBtn.setVisible(false);
        alpha = true;
    }

    private void cargaClienteUnico() {
        bloquearBotones();
        Cliente cliente = null;
        try {
            cliente = new ClienteService().getClienteByCodigo(codigo);
        } catch (Exception ex) {
            Logger.getLogger(AbmClienteFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (cliente != null) {
            listadoCliente = new ArrayList<>();
            listadoCliente.add(cliente);
            if (listadoCliente != null && !listadoCliente.isEmpty()) {
                llenarTabla();
            }
        }
    }
}
