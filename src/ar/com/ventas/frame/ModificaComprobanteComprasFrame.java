/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ComprobanteCompras;
import ar.com.ventas.entities.ComprobanteComprasDetalle;
import ar.com.ventas.entities.Configuracion;
import ar.com.ventas.entities.CuentaCorrienteProveedor;
import ar.com.ventas.entities.IvaCompras;
import ar.com.ventas.entities.Periodo;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.services.ComprobanteComprasDetalleService;
import ar.com.ventas.services.ComprobanteComprasService;
import ar.com.ventas.services.ConfiguracionService;
import ar.com.ventas.services.CuentaCorrienteProveedorService;
import ar.com.ventas.services.IvaComprasServices;
import ar.com.ventas.services.PeriodoService;
import ar.com.ventas.services.ProveedorService;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import static java.lang.Math.rint;
import java.util.Date;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrador
 */
public class ModificaComprobanteComprasFrame extends javax.swing.JFrame {

    private String filtro;
    private List<Periodo> periodos = null;
    private List<Proveedor> proveedores = null;
    private Proveedor proveedorSeleccionado = null;
    private Integer codigoProveedor;
    private float iva = 0;
    private Configuracion conf = null;
    private Double gravado;
    private Double noGravado;
    private Double impuestoInterno;
    private Double percepcionIIBB;
    private Double percepcionIva;
    private Double importeIva;
    private Double otro;
    private Double importeTotal;
    private DecimalFormat df = new DecimalFormat("#0.00");
    private ComprobanteCompras comprobante;
    private ComprobanteCompras exComprobante;
    private CuentaCorrienteProveedor cuentaProveedor;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private Integer row1 = 0;
    private Date fd1 = new Date();
    private Date fa1 = new Date();
    private Date fe = new Date();

    /**
     * Creates new form Modificar Iva Compras
     *
     * @param comprobante
     * @param df
     * @param af
     * @param row
     */
    public ModificaComprobanteComprasFrame(ComprobanteCompras comprobante, Date df, Date af, Integer row) {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        initComponents();
        this.row1 = row;
        this.fa1 = af;
        this.fd1 = df;
        this.comprobante = comprobante;
        this.exComprobante = comprobante;
        cargarConfiguracion();
        llenarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guardarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        nroSucursalTxt = new javax.swing.JTextField();
        nroFacturTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        fechaFacturaTxt = new javax.swing.JTextField();
        comboLetraFactura = new javax.swing.JComboBox();
        gravadoTxt = new javax.swing.JTextField();
        impuestoInternoTxt = new javax.swing.JTextField();
        percepcionIIBBTxt = new javax.swing.JTextField();
        percepcionIvaTxt = new javax.swing.JTextField();
        otroTxt = new javax.swing.JTextField();
        ivaTxt = new javax.swing.JTextField();
        totalTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        razonSocialProveedorBuscadoTxt = new javax.swing.JTextField();
        codigoProveedorTxt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        noGravadoTxt = new javax.swing.JTextField();
        chekBtn = new javax.swing.JButton();
        facturaChk = new javax.swing.JRadioButton();
        notaCreditoChk = new javax.swing.JRadioButton();
        comboPeriodos = new javax.swing.JComboBox<>();
        notaDebitoChk = new javax.swing.JRadioButton();
        llevaDetalleChk = new javax.swing.JCheckBox();
        detalle1Txt = new javax.swing.JTextField();
        detalle2Txt = new javax.swing.JTextField();
        detalle3Txt = new javax.swing.JTextField();
        detalle4Txt = new javax.swing.JTextField();
        impresionBtn = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        fechaTxt = new javax.swing.JTextField();
        prontoPagoChk = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        diasTxt = new javax.swing.JTextField();
        fechaCalculoVencimientoTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("MODIFICAR COMPROBANTE COMPRAS");

        guardarBtn.setText("Guardar");
        guardarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Fecha Periodo:");

        jLabel2.setText("Letra y NÃºmero:");

        jLabel3.setText("Codigo Proveedor:");

        jLabel5.setText("Gravado:");

        jLabel6.setText("Imp. Interno:");

        jLabel7.setText("Percep.II BB:");

        jLabel8.setText("Percep. IVA:");

        jLabel9.setText("Otro:");

        jLabel10.setText("IVA:");

        jLabel11.setText("Total:");

        nroSucursalTxt.setText("Nro Sucursal");
        nroSucursalTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nroSucursalTxtKeyPressed(evt);
            }
        });

        nroFacturTxt.setText("Nro Factura");
        nroFacturTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nroFacturTxtKeyPressed(evt);
            }
        });

        jLabel13.setText("Fecha Factura:");

        fechaFacturaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaFacturaTxt.setText("FECHA FACTURA");
        fechaFacturaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaFacturaTxtKeyPressed(evt);
            }
        });

        comboLetraFactura.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "A", "C", "M", "B", "X" }));
        comboLetraFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboLetraFacturaActionPerformed(evt);
            }
        });
        comboLetraFactura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboLetraFacturaKeyPressed(evt);
            }
        });

        gravadoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        gravadoTxt.setText("GRAVADO");
        gravadoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                gravadoTxtKeyPressed(evt);
            }
        });

        impuestoInternoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        impuestoInternoTxt.setText("IMP.INTERNO");
        impuestoInternoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                impuestoInternoTxtKeyPressed(evt);
            }
        });

        percepcionIIBBTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        percepcionIIBBTxt.setText("PERC.II BB");
        percepcionIIBBTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                percepcionIIBBTxtKeyPressed(evt);
            }
        });

        percepcionIvaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        percepcionIvaTxt.setText("PERCEP IVA");
        percepcionIvaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                percepcionIvaTxtKeyPressed(evt);
            }
        });

        otroTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        otroTxt.setText("OTRO");
        otroTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                otroTxtKeyPressed(evt);
            }
        });

        ivaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ivaTxt.setText("IVA");
        ivaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ivaTxtKeyPressed(evt);
            }
        });

        totalTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalTxt.setText("TOTAL");
        totalTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                totalTxtKeyPressed(evt);
            }
        });

        jLabel4.setText("Proveedor:");

        razonSocialProveedorBuscadoTxt.setText("RAZON SOCIAL PROVEEDOR");

        codigoProveedorTxt.setText("CODIGO PROVEEDOR");
        codigoProveedorTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoProveedorTxtKeyPressed(evt);
            }
        });

        jLabel14.setText("No Gravado:");

        noGravadoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        noGravadoTxt.setText("NO GRAVADO");
        noGravadoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                noGravadoTxtKeyPressed(evt);
            }
        });

        chekBtn.setText("Chek");
        chekBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chekBtnActionPerformed(evt);
            }
        });

        facturaChk.setText("Factura");
        facturaChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facturaChkActionPerformed(evt);
            }
        });

        notaCreditoChk.setText("Nota CrÃ©dito");
        notaCreditoChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notaCreditoChkActionPerformed(evt);
            }
        });

        comboPeriodos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboPeriodos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboPeriodosKeyPressed(evt);
            }
        });

        notaDebitoChk.setText("Nota de DÃ©bito");
        notaDebitoChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notaDebitoChkActionPerformed(evt);
            }
        });

        llevaDetalleChk.setText("Lleva Detalle");

        detalle1Txt.setText("DETALLE 1");

        detalle2Txt.setText("DETALLE 2");

        detalle3Txt.setText("DETALLE 3");

        detalle4Txt.setText("DETALLE 4");

        impresionBtn.setText("Impresion");
        impresionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impresionBtnActionPerformed(evt);
            }
        });

        jLabel12.setText("Fecha Entrega:");

        fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaTxt.setText("FECHA");
        fechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaTxtKeyPressed(evt);
            }
        });

        prontoPagoChk.setText("Pronto Pago");

        jLabel15.setText("DÃ­as de Vencimiento:");

        diasTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        diasTxt.setText("DIAS");
        diasTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                diasTxtKeyPressed(evt);
            }
        });

        fechaCalculoVencimientoTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaCalculoVencimientoTxt.setText("FE.CA.VTO");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel11))
                                        .addGap(1, 1, 1))
                                    .addComponent(jLabel14))
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(totalTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ivaTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(noGravadoTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(otroTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(percepcionIvaTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(impuestoInternoTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(chekBtn)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(guardarBtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(impresionBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 349, Short.MAX_VALUE)
                                        .addComponent(volverBtn))))
                            .addComponent(percepcionIIBBTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gravadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(llevaDetalleChk)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(codigoProveedorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(131, 131, 131))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(facturaChk)
                                                .addGap(10, 10, 10)))
                                        .addComponent(notaCreditoChk)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(notaDebitoChk))
                                    .addComponent(razonSocialProveedorBuscadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel15))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(diasTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(prontoPagoChk)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(fechaCalculoVencimientoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(comboPeriodos, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(fechaFacturaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboLetraFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nroSucursalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(detalle1Txt)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nroFacturTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(detalle2Txt)
                            .addComponent(detalle3Txt)
                            .addComponent(detalle4Txt))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(codigoProveedorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(razonSocialProveedorBuscadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboPeriodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(fechaFacturaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(facturaChk)
                    .addComponent(notaCreditoChk)
                    .addComponent(notaDebitoChk)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(diasTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboLetraFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nroSucursalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nroFacturTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(llevaDetalleChk)
                    .addComponent(prontoPagoChk)
                    .addComponent(fechaCalculoVencimientoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(gravadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(detalle1Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(noGravadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(detalle2Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(impuestoInternoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(detalle3Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(percepcionIIBBTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(detalle4Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(percepcionIvaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(otroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chekBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(ivaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(totalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guardarBtn)
                    .addComponent(volverBtn)
                    .addComponent(impresionBtn))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBtnActionPerformed
        guardar();
    }//GEN-LAST:event_guardarBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void comboLetraFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboLetraFacturaActionPerformed
        if (evt.getModifiers() == 16) {
            gravadoTxt.setText("");
            noGravadoTxt.setText("");
            impuestoInternoTxt.setText("");
            percepcionIIBBTxt.setText("");
            percepcionIvaTxt.setText("");
            otroTxt.setText("");
            ivaTxt.setText("");
            totalTxt.setText("");
            if (comboLetraFactura.getSelectedIndex() > 0) {
                if (comboLetraFactura.getSelectedItem() == "A" || comboLetraFactura.getSelectedItem() == "M") {
                    gravadoTxt.setEditable(true);
                    noGravadoTxt.setEditable(false);
                    impuestoInternoTxt.setEditable(true);
                    percepcionIIBBTxt.setEditable(true);
                    percepcionIvaTxt.setEditable(true);
                    otroTxt.setEditable(true);
                    ivaTxt.setEditable(true);
                    totalTxt.setEditable(true);
                } else {
                    gravadoTxt.setEditable(false);
                    noGravadoTxt.setEditable(true);
                    impuestoInternoTxt.setEditable(false);
                    percepcionIIBBTxt.setEditable(false);
                    percepcionIvaTxt.setEditable(false);
                    otroTxt.setEditable(true);
                    ivaTxt.setEditable(false);
                    totalTxt.setEditable(true);
                }
            }
        }
    }//GEN-LAST:event_comboLetraFacturaActionPerformed

    private void chekBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chekBtnActionPerformed
        calcularTotales();
    }//GEN-LAST:event_chekBtnActionPerformed

    private void codigoProveedorTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoProveedorTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (codigoProveedorTxt.getText().isEmpty()) {
//                filtroTxt.requestFocus();
            } else {
                buscarProvPorCodigo();
            }
        }
    }//GEN-LAST:event_codigoProveedorTxtKeyPressed

    private void facturaChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facturaChkActionPerformed
        facturaChk.setSelected(true);
        notaCreditoChk.setSelected(false);
        notaDebitoChk.setSelected(false);
    }//GEN-LAST:event_facturaChkActionPerformed

    private void notaCreditoChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notaCreditoChkActionPerformed
        facturaChk.setSelected(false);
        notaCreditoChk.setSelected(true);
        notaDebitoChk.setSelected(false);
    }//GEN-LAST:event_notaCreditoChkActionPerformed

    private void fechaFacturaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaFacturaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (fechaFacturaTxt.getText().isEmpty()) {
                fechaFacturaTxt.setText(sdf.format(new Date()));
                fechaFacturaTxt.requestFocus();
            } else {
                int largo = fechaFacturaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 2);
                    }
                    f = f + "/" + an;
                    fechaFacturaTxt.setText(fechaFacturaTxt.getText() + "/" + f);
                    fechaTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        fechaFacturaTxt.setText(fechaFacturaTxt.getText() + an);
                        fechaTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            fechaFacturaTxt.setText("");
//                          request focus mismo campo
                            fechaFacturaTxt.requestFocus();
                        } else {
                            String veinte = fechaFacturaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÃO");
//                              request focus mismo campo
                                fechaFacturaTxt.requestFocus();
                            } else {
                                fechaTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_fechaFacturaTxtKeyPressed

    private void comboLetraFacturaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboLetraFacturaKeyPressed
        if (evt.getKeyCode() == 10) {
            int row = comboLetraFactura.getSelectedIndex();
            if (row < 1) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una letra");
                comboLetraFactura.requestFocus();
                return;
            }
            nroSucursalTxt.requestFocus();
        }
    }//GEN-LAST:event_comboLetraFacturaKeyPressed

    private void nroSucursalTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nroSucursalTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            nroFacturTxt.requestFocus();
        }
    }//GEN-LAST:event_nroSucursalTxtKeyPressed

    private void nroFacturTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nroFacturTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            int row = comboLetraFactura.getSelectedIndex();
            if (row == 1 || row == 3) {
                gravadoTxt.setEditable(true);
                noGravadoTxt.setEditable(false);
                impuestoInternoTxt.setEditable(true);
                percepcionIIBBTxt.setEditable(true);
                percepcionIvaTxt.setEditable(true);
                otroTxt.setEditable(true);
                ivaTxt.setEditable(true);
                totalTxt.setEditable(true);
                gravadoTxt.requestFocus();
            } else {
                gravadoTxt.setEditable(false);
                noGravadoTxt.setEditable(true);
                impuestoInternoTxt.setEditable(false);
                percepcionIIBBTxt.setEditable(false);
                percepcionIvaTxt.setEditable(false);
                otroTxt.setEditable(true);
                ivaTxt.setEditable(false);
                totalTxt.setEditable(true);
                noGravadoTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_nroFacturTxtKeyPressed

    private void gravadoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_gravadoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            impuestoInternoTxt.requestFocus();
        }
    }//GEN-LAST:event_gravadoTxtKeyPressed

    private void noGravadoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noGravadoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            otroTxt.requestFocus();
        }
    }//GEN-LAST:event_noGravadoTxtKeyPressed

    private void otroTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_otroTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            calcularTotales();
            ivaTxt.requestFocus();
        }
    }//GEN-LAST:event_otroTxtKeyPressed

    private void impuestoInternoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_impuestoInternoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            percepcionIIBBTxt.requestFocus();
        }
    }//GEN-LAST:event_impuestoInternoTxtKeyPressed

    private void percepcionIIBBTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_percepcionIIBBTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            percepcionIvaTxt.requestFocus();
        }
    }//GEN-LAST:event_percepcionIIBBTxtKeyPressed

    private void percepcionIvaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_percepcionIvaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            otroTxt.requestFocus();
        }
    }//GEN-LAST:event_percepcionIvaTxtKeyPressed

    private void totalTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            //guardarBtn.setEnabled(false);
            guardar();
        }
    }//GEN-LAST:event_totalTxtKeyPressed

    private void ivaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ivaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            calcularTotales2();
            totalTxt.requestFocus();
        }
    }//GEN-LAST:event_ivaTxtKeyPressed

    private void comboPeriodosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboPeriodosKeyPressed
        if (evt.getKeyCode() == 10) {
            if (comboPeriodos.getSelectedIndex() > 0) {
                fechaFacturaTxt.requestFocus();
            }
        }
    }//GEN-LAST:event_comboPeriodosKeyPressed

    private void notaDebitoChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notaDebitoChkActionPerformed
        facturaChk.setSelected(false);
        notaCreditoChk.setSelected(false);
        notaDebitoChk.setSelected(true);
    }//GEN-LAST:event_notaDebitoChkActionPerformed

    private void impresionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impresionBtnActionPerformed
        impresion();
    }//GEN-LAST:event_impresionBtnActionPerformed

    private void fechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (fechaTxt.getText().isEmpty()) {
                fechaTxt.setText(sdf.format(new Date()));
                fechaTxt.requestFocus();
            } else {
                int largo = fechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 2);
                    }
                    f = f + "/" + an;
                    fechaTxt.setText(fechaTxt.getText() + "/" + f);
                    diasTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        fechaTxt.setText(fechaTxt.getText() + an);
                        diasTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            fechaTxt.setText("");
//                          request focus mismo campo
                            fechaTxt.requestFocus();
                        } else {
                            String veinte = fechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÃO");
//                              request focus mismo campo
                                fechaTxt.requestFocus();
                            } else {
                                diasTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_fechaTxtKeyPressed

    private void diasTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_diasTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!diasTxt.getText().isEmpty()) {
                Date fechaCalculo2 = new Date();
                try {
                    fechaCalculo2 = sdf.parse(fechaTxt.getText());
                } catch (ParseException ex) {
                    Logger.getLogger(NuevoComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                Integer dias = Integer.valueOf(diasTxt.getText());
                if (fechaCalculo2 != null) {
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(fechaCalculo2);
                    cal.add(Calendar.DATE, dias);
                    Date fech = cal.getTime();
                    fechaCalculoVencimientoTxt.setText(sdf.format(fech));
                    comprobante.setDiasVencimiento(dias);
                    comprobante.setFechaCalculoVencimiento(fech);
                }
                comboLetraFactura.requestFocus();
            }
        }
    }//GEN-LAST:event_diasTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModificaComprobanteComprasFrame(null, null, null, 0).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chekBtn;
    private javax.swing.JTextField codigoProveedorTxt;
    private javax.swing.JComboBox comboLetraFactura;
    private javax.swing.JComboBox<String> comboPeriodos;
    private javax.swing.JTextField detalle1Txt;
    private javax.swing.JTextField detalle2Txt;
    private javax.swing.JTextField detalle3Txt;
    private javax.swing.JTextField detalle4Txt;
    private javax.swing.JTextField diasTxt;
    private javax.swing.JRadioButton facturaChk;
    private javax.swing.JTextField fechaCalculoVencimientoTxt;
    private javax.swing.JTextField fechaFacturaTxt;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JTextField gravadoTxt;
    private javax.swing.JButton guardarBtn;
    private javax.swing.JButton impresionBtn;
    private javax.swing.JTextField impuestoInternoTxt;
    private javax.swing.JTextField ivaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JCheckBox llevaDetalleChk;
    private javax.swing.JTextField noGravadoTxt;
    private javax.swing.JRadioButton notaCreditoChk;
    private javax.swing.JRadioButton notaDebitoChk;
    private javax.swing.JTextField nroFacturTxt;
    private javax.swing.JTextField nroSucursalTxt;
    private javax.swing.JTextField otroTxt;
    private javax.swing.JTextField percepcionIIBBTxt;
    private javax.swing.JTextField percepcionIvaTxt;
    private javax.swing.JCheckBox prontoPagoChk;
    private javax.swing.JTextField razonSocialProveedorBuscadoTxt;
    private javax.swing.JTextField totalTxt;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void guardar() {
        if (validar()) {
            int modifica = 0;
            Date ff = new Date();
            Date fe = new Date();
            try {
                ff = sdf.parse(fechaFacturaTxt.getText());
                fe = sdf.parse(fechaTxt.getText());
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Error en fecha Factura");
                fechaFacturaTxt.requestFocus();
                //Logger.getLogger(NuevoComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
            Date hoy = new Date();
            String veinte = fechaFacturaTxt.getText().substring(6, 8);
            if (!veinte.equals("20")) {
                JOptionPane.showMessageDialog(this, "Error en fecha - AÃO");
                fechaFacturaTxt.requestFocus();
                return;
            }
            veinte = fechaTxt.getText().substring(6, 8);
            if (!veinte.equals("20")) {
                JOptionPane.showMessageDialog(this, "Error en fecha - AÃO");
                fechaTxt.requestFocus();
                return;
            }
            if (ff.after(hoy)) {
                JOptionPane.showMessageDialog(this, "Error fecha posterior a HOY");
                fechaFacturaTxt.requestFocus();
                return;
            }
            if (fe.after(hoy)) {
                JOptionPane.showMessageDialog(this, "Error fecha posterior a HOY");
                fechaTxt.requestFocus();
                return;
            }
            comprobante.setFechaFactura(ff);
            comprobante.setFechaEntrega(fe);
            if (prontoPagoChk.isSelected()) {
                comprobante.setProntoPago(true);
            } else {
                comprobante.setProntoPago(false);
            }
            int row = comboPeriodos.getSelectedIndex();
            Date fp = periodos.get(row - 1).getDesdeFecha();
            comprobante.setFechaPeriodo(fp);
            if (!diasTxt.getText().isEmpty()) {
                Integer dias = Integer.valueOf(diasTxt.getText());
                if (comprobante.getFechaEntrega() != null) {
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(comprobante.getFechaEntrega());
                    cal.add(Calendar.DATE, dias);
                    Date fech = cal.getTime();
                    fechaCalculoVencimientoTxt.setText(sdf.format(fech));
                    comprobante.setDiasVencimiento(dias);
                    comprobante.setFechaCalculoVencimiento(fech);
                }
            }
            comprobante.setProveedor(proveedorSeleccionado);
            comprobante.setLetra(comboLetraFactura.getSelectedItem().toString());
            int tipoComp = comboLetraFactura.getSelectedIndex();
            if (nroSucursalTxt.getText().isEmpty()) {
                comprobante.setNumeroSucursal(0);
            } else {
                comprobante.setNumeroSucursal(Integer.valueOf(nroSucursalTxt.getText()));
            }
            comprobante.setNumeroFactura(Integer.valueOf(nroFacturTxt.getText()));
            if (noGravadoTxt.getText().isEmpty()) {
                noGravado = 0.00;
            } else {
                noGravado = Double.valueOf(noGravadoTxt.getText().replace(",", "."));
            }
            comprobante.setNoGravado(noGravado);
            if (gravadoTxt.getText().isEmpty()) {
                gravado = 0.00;
            } else {
                gravado = Double.valueOf(gravadoTxt.getText().replace(",", "."));
            }
            comprobante.setGravado(gravado);
            if (modifica == 1) {
                if (tipoComp < 4) {
                    comprobante.setEnLibro(true);
                } else {
                    comprobante.setEnLibro(false);
                }
            }
            if (impuestoInternoTxt.getText().isEmpty()) {
                impuestoInterno = 0.00;
            } else {
                impuestoInterno = Double.valueOf(impuestoInternoTxt.getText().replace(",", "."));
            }
            comprobante.setImpuestoInterno(impuestoInterno);
            if (otroTxt.getText().isEmpty()) {
                otro = 0.00;
            } else {
                otro = Double.valueOf(otroTxt.getText().replace(",", "."));
            }
            comprobante.setOtro(otro);
            if (percepcionIIBBTxt.getText().isEmpty()) {
                percepcionIIBB = 0.00;
            } else {
                percepcionIIBB = Double.valueOf(percepcionIIBBTxt.getText().replace(",", "."));
            }
            comprobante.setPercepcionIiBb(percepcionIIBB);
            if (percepcionIvaTxt.getText().isEmpty()) {
                percepcionIva = 0.00;
            } else {
                percepcionIva = Double.valueOf(percepcionIvaTxt.getText().replace(",", "."));
            }
            comprobante.setPercepcionIva(percepcionIva);
            if (totalTxt.getText().isEmpty()) {
                importeTotal = 0.00;
            } else {
                importeTotal = Double.valueOf(totalTxt.getText().replace(",", "."));
            }
            comprobante.setTotal(importeTotal);
            if (ivaTxt.getText().isEmpty()) {
                importeIva = 0.00;
            } else {
                importeIva = Double.valueOf(ivaTxt.getText().replace(",", "."));
            }
            comprobante.setIva(importeIva);
            Boolean fcantes = comprobante.getEsDebito();
            Boolean en_libro = comprobante.getEnLibro();
            if (facturaChk.isSelected()) {
                comprobante.setEsDebito(true);
                comprobante.setTipoComprobante("FC");
            } else {
                if (notaDebitoChk.isSelected()) {
                    comprobante.setEsDebito(true);
                    comprobante.setTipoComprobante("ND");
                } else {
                    comprobante.setEsDebito(false);
                    comprobante.setTipoComprobante("NC");
                }
            }
            comprobante.setEstaPago(false);
            comprobante.setPagado(0.0);
            int a = JOptionPane.showConfirmDialog(this, "Confirma Guardar el Comprobante?",
                    "AtenciÃ³n", JOptionPane.YES_NO_OPTION);
            if (a != 0) {
                return;
            }
            if (llevaDetalleChk.isSelected()) {
                comprobante.setTieneDetalle(true);
            } else {
                comprobante.setTieneDetalle(false);
            }
            Double s = 0.0;
            Long id = comprobante.getId();
            try {
                comprobante = new ComprobanteComprasService().updateComprobante(comprobante);
                JOptionPane.showMessageDialog(this, "Comprobante actualizado correctamente");
            } catch (Exception ex) {
                Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "No se pudo actualizar comprobante");
            }
//            System.out.println(fcantes);
//            System.out.println(facturaChk.isSelected());
            if (fcantes) {
                if (!facturaChk.isSelected()) {
                    if (!notaDebitoChk.isSelected()) {
                        s = proveedorSeleccionado.getSaldo();
                        s -= exComprobante.getTotal() * 2;
                        proveedorSeleccionado.setSaldo(s);
                        try {
                            new ProveedorService().updateProveedor(proveedorSeleccionado);
                        } catch (Exception ex) {
                            Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            } else {
                if (facturaChk.isSelected()) {
                    s = proveedorSeleccionado.getSaldo();
                    s += exComprobante.getTotal() * 2;
                    proveedorSeleccionado.setSaldo(s);
                    try {
                        new ProveedorService().updateProveedor(proveedorSeleccionado);
                    } catch (Exception ex) {
                        Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    if (notaDebitoChk.isSelected()) {
                        s = proveedorSeleccionado.getSaldo();
                        s += exComprobante.getTotal() * 2;
                        proveedorSeleccionado.setSaldo(s);
                        try {
                            new ProveedorService().updateProveedor(proveedorSeleccionado);
                        } catch (Exception ex) {
                            Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
//            System.out.println(cuentaProveedor);
//            System.out.println(comprobante);
//            JOptionPane.showMessageDialog(this, s);
            CuentaCorrienteProveedor ccp = cuentaProveedor;
            ccp.setComprobante(comprobante);
            ccp.setFecha(comprobante.getFechaFactura());
            if (facturaChk.isSelected()) {
                ccp.setDebe(importeTotal);
                ccp.setHaber(0.00);
                ccp.setSaldo(importeTotal);
            } else {
                if (notaDebitoChk.isSelected()) {
                    ccp.setDebe(importeTotal);
                    ccp.setHaber(0.00);
                    ccp.setSaldo(importeTotal);
                } else {
                    ccp.setDebe(0.00);
                    ccp.setHaber(importeTotal);
                    ccp.setSaldo(-importeTotal);
                }
            }
            ccp.setProveedor(proveedorSeleccionado);
            ccp.setReciboProveedor(null);
            try {
                new CuentaCorrienteProveedorService().updateCtaCteProveedor(ccp);
            } catch (Exception ex) {
                Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            Calendar cal = Calendar.getInstance();
            cal.setTime(comprobante.getFechaFactura());
            cal.add(Calendar.DATE, -365);
            Date fecha1 = cal.getTime();
            Date fecha2 = new Date();
            List<CuentaCorrienteProveedor> ctap = null;
            try {
                ctap = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(proveedorSeleccionado, fecha1, fecha2);
            } catch (Exception ex) {
                Logger.getLogger(NuevoComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            Double sa = 0.0;
            int x = 0;
            for (CuentaCorrienteProveedor cc1 : ctap) {
                if (x == 0) {
                    sa = cc1.getSaldo();
                    x = 1;
                } else {
                    sa += (cc1.getDebe() - cc1.getHaber());
                    cc1.setSaldo(sa);
                    try {
                        new CuentaCorrienteProveedorService().updateCtaCteProveedor(cc1);
                    } catch (Exception ex) {
                        Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            if (tipoComp < 4) {
//                if(en_libro){
//                    
//                }
                // comprobante en libro iva compras
                try {
                    comprobante = new ComprobanteComprasService().getById(id);
                } catch (Exception ex) {
                    Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                comprobante.setEnLibro(true);
                try {
                    new ComprobanteComprasService().updateComprobante(comprobante);
                } catch (Exception ex) {
                    Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    comprobante = new ComprobanteComprasService().getById(id);
                } catch (Exception ex) {
                    Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                IvaCompras ic = new IvaCompras();
                ic.setFechaFactura(comprobante.getFechaFactura());
                ic.setFechaPeriodo(comprobante.getFechaPeriodo());
                ic.setGravado(gravado);
                ic.setImpuestoInterno(impuestoInterno);
                ic.setIva(importeIva);
                ic.setLetra(comprobante.getLetra());
                ic.setNoGravado(noGravado);
                ic.setNumeroFactura(comprobante.getNumeroFactura());
                ic.setNumeroSucursal(comprobante.getNumeroSucursal());
                ic.setOtro(otro);
                ic.setPercepcionIiBb(percepcionIIBB);
                ic.setPercepcionIva(percepcionIva);
                ic.setProveedor(proveedorSeleccionado);
                ic.setTotal(importeTotal);
                ic.setComprobante(comprobante);
                if (facturaChk.isSelected()) {
                    ic.setCredito(false);
                } else {
                    if (notaDebitoChk.isSelected()) {
                        ic.setCredito(false);
                    } else {
                        ic.setCredito(true);
                    }
                }
                try {
                    new IvaComprasServices().saveIvaCompras(ic);
                } catch (Exception ex) {
                    Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            JOptionPane.showMessageDialog(this, "Comprobante guardado correctamente");
            volver();
        }
    }

    private void cargarConfiguracion() {
        try {
            conf = new ConfiguracionService().getFacturas(1L);
        } catch (Exception ex) {
            Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        iva = conf.getIva();
        try {
            periodos = new PeriodoService().getAllPeriodosAbiertos();
        } catch (Exception ex) {
            Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        comboPeriodos.removeAllItems();
        comboPeriodos.addItem("");
        if (periodos != null && !periodos.isEmpty()) {
            for (Periodo p : periodos) {
                comboPeriodos.addItem(p.getDetalle());
            }
        }
    }

    private void calcularTotales() {
        guardarBtn.setEnabled(true);
        if (!gravadoTxt.getText().isEmpty()) {
            importeIva = Double.valueOf(gravadoTxt.getText().replace(",", ".")) * iva;
            importeIva = rint(importeIva) / 100;
        } else {
            importeIva = 0.0;
        }
        ivaTxt.setText((String.valueOf(df.format(importeIva))).replace(",", "."));
        if (!gravadoTxt.getText().isEmpty()) {
            gravado = Double.valueOf(gravadoTxt.getText().replace(",", "."));
        } else {
            gravado = 0.0;
        }
        if (!noGravadoTxt.getText().isEmpty()) {
            noGravado = Double.valueOf(noGravadoTxt.getText().replace(",", "."));
        } else {
            noGravado = 0.0;
        }
        if (!impuestoInternoTxt.getText().isEmpty()) {
            impuestoInterno = Double.valueOf(impuestoInternoTxt.getText().replace(",", "."));
        } else {
            impuestoInterno = 0.0;
        }
        if (!percepcionIIBBTxt.getText().isEmpty()) {
            percepcionIIBB = Double.valueOf(percepcionIIBBTxt.getText().replace(",", "."));
        } else {
            percepcionIIBB = 0.0;
        }
        if (!percepcionIvaTxt.getText().isEmpty()) {
            percepcionIva = Double.valueOf(percepcionIvaTxt.getText().replace(",", "."));
        } else {
            percepcionIva = 0.0;
        }
        if (!otroTxt.getText().isEmpty()) {
            otro = Double.valueOf(otroTxt.getText().replace(",", "."));
        } else {
            otro = 0.0;
        }
        importeTotal = gravado;
        importeTotal += importeIva;
        importeTotal += noGravado;
        importeTotal += impuestoInterno;
        importeTotal += percepcionIIBB;
        importeTotal += percepcionIva;
        importeTotal += otro;
        totalTxt.setText((df.format(importeTotal)).replace(",", "."));
    }

    private void llenarCampos() {
        fechaCalculoVencimientoTxt.setEditable(false);
        if (comprobante.getFechaCalculoVencimiento() != null) {
            fechaCalculoVencimientoTxt.setText(sdf.format(comprobante.getFechaCalculoVencimiento()));
        } else {
            fechaCalculoVencimientoTxt.setText("");
        }
        if (comprobante.getDiasVencimiento() != null) {
            diasTxt.setText(comprobante.getDiasVencimiento().toString());
        } else {
            diasTxt.setText("");
        }
        proveedorSeleccionado = comprobante.getProveedor();
        try {
            cuentaProveedor = new CuentaCorrienteProveedorService().getCtaCteByComprobante(comprobante);
        } catch (Exception ex) {
            Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(cuentaProveedor);
        codigoProveedorTxt.setText(String.valueOf(proveedorSeleccionado.getCodigo()));
        razonSocialProveedorBuscadoTxt.setText(proveedorSeleccionado.getRazonSocial());
        codigoProveedorTxt.setEditable(false);
        razonSocialProveedorBuscadoTxt.setEditable(false);
        Date da = comprobante.getFechaPeriodo();
        int perio = 1;
        for (Periodo p : periodos) {
            if (da.equals(p.getDesdeFecha())) {
                comboPeriodos.setSelectedIndex(perio);
                break;
            }
            perio += 1;
        }
        fechaFacturaTxt.setText(sdf.format(comprobante.getFechaFactura()));
        if (comprobante.getFechaEntrega() != null) {
            fechaTxt.setText(sdf.format(comprobante.getFechaEntrega()));
        } else {
            fe = comprobante.getFechaFactura();
            fechaTxt.setText(sdf.format(fe));
        }
        if (comprobante.getEsDebito()) {
            if (comprobante.getTipoComprobante().equals("FC")) {
                facturaChk.setSelected(true);
                notaCreditoChk.setSelected(false);
                notaDebitoChk.setSelected(false);
            } else {
                facturaChk.setSelected(false);
                notaCreditoChk.setSelected(false);
                notaDebitoChk.setSelected(true);
            }
        } else {
            facturaChk.setSelected(false);
            notaCreditoChk.setSelected(true);
            notaDebitoChk.setSelected(false);
        }
        if (comprobante.getProntoPago() != null) {
            if (comprobante.getProntoPago()) {
                prontoPagoChk.setSelected(true);
            } else {
                prontoPagoChk.setSelected(false);
            }
        } else {
            prontoPagoChk.setSelected(false);
        }
        if (comprobante.getLetra() != null) {
            if (comprobante.getLetra().equals("")) {
                comboLetraFactura.setSelectedIndex(0);
            } else {
                if (comprobante.getLetra().equals("A")) {
                    comboLetraFactura.setSelectedIndex(1);
                } else {
                    if (comprobante.getLetra().equals("C")) {
                        comboLetraFactura.setSelectedIndex(2);
                    } else {
                        if (comprobante.getLetra().equals("M")) {
                            comboLetraFactura.setSelectedIndex(3);
                        } else {
                            if (comprobante.getLetra().equals("B")) {
                                comboLetraFactura.setSelectedIndex(4);
                            } else {
                                comboLetraFactura.setSelectedIndex(5);
                            }
                        }
                    }
                }
            }
        }
        nroSucursalTxt.setText(String.valueOf(comprobante.getNumeroSucursal()));
        nroFacturTxt.setText(String.valueOf(comprobante.getNumeroFactura()));
        gravadoTxt.setText(df.format(comprobante.getGravado()));
        noGravadoTxt.setText(df.format(comprobante.getNoGravado()));
        impuestoInternoTxt.setText(df.format(comprobante.getImpuestoInterno()));
        percepcionIIBBTxt.setText(df.format(comprobante.getPercepcionIiBb()));
        percepcionIvaTxt.setText(df.format(comprobante.getPercepcionIva()));
        otroTxt.setText(df.format(comprobante.getOtro()));
        ivaTxt.setText(df.format(comprobante.getIva()));
        totalTxt.setText(df.format(comprobante.getTotal()));
        gravadoTxt.setEditable(false);
        noGravadoTxt.setEditable(false);
        impuestoInternoTxt.setEditable(false);
        percepcionIIBBTxt.setEditable(false);
        percepcionIvaTxt.setEditable(false);
        otroTxt.setEditable(false);
        ivaTxt.setEditable(false);
        totalTxt.setEditable(false);
        chekBtn.setEnabled(false);
        detalle1Txt.setText("");
        detalle2Txt.setText("");
        detalle3Txt.setText("");
        detalle4Txt.setText("");
        if (comprobante.getTieneDetalle()) {
            llevaDetalleChk.setSelected(true);
            List<ComprobanteComprasDetalle> ccd = null;
            try {
                ccd = new ComprobanteComprasDetalleService().getDetalleByComprobante(comprobante);
            } catch (Exception ex) {
                Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ccd != null) {
                int y = 0;
                for (ComprobanteComprasDetalle cc : ccd) {
                    int i = cc.getOrden();
                    if (i == 0) {
                        detalle1Txt.setText(ccd.get(y).getTexto());
                    }
                    if (i == 1) {
                        detalle2Txt.setText(ccd.get(y).getTexto());
                    }
                    if (i == 2) {
                        detalle3Txt.setText(ccd.get(y).getTexto());
                    }
                    if (i == 3) {
                        detalle4Txt.setText(ccd.get(y).getTexto());
                    }
                    y += 1;
                }
            }
            comboLetraFactura.setEnabled(false);
            facturaChk.setEnabled(false);
            notaDebitoChk.setEnabled(false);
        } else {
            llevaDetalleChk.setSelected(false);
        }
        llevaDetalleChk.setEnabled(false);
        detalle1Txt.setEditable(false);
        detalle2Txt.setEditable(false);
        detalle3Txt.setEditable(false);
        detalle4Txt.setEditable(false);
    }

    private void buscarProvPorCodigo() {
        codigoProveedor = Integer.valueOf(codigoProveedorTxt.getText());
        proveedorSeleccionado = null;
        try {
            proveedorSeleccionado = new ProveedorService().getProveedorByCodigo(codigoProveedor);
            razonSocialProveedorBuscadoTxt.setText(proveedorSeleccionado.getRazonSocial());
            //fechaPeriodoTxt.requestFocus();
        } catch (Exception ex) {
//            Logger.getLogger(NuevoIvaComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Debe ingresar un codigo valido");
            codigoProveedorTxt.requestFocus();
            return;
        }
        if (proveedorSeleccionado != null) {
            comboPeriodos.requestFocus();
        } else {
            codigoProveedorTxt.requestFocus();
            return;
        }
    }

    private boolean validar() {
        int row = comboPeriodos.getSelectedIndex();
        Double t = Double.valueOf(totalTxt.getText().replace(",", ".")) * 100;
        Long t2 = t.longValue();
        if (t2 == 0) {
            JOptionPane.showMessageDialog(this, "Importe en cero");
            return false;
        }
        if (row < 1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un periodo vÃ¡lido");
            return false;
        }
        if (fechaTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "DEBE INDICAR UNA FECHA DE ENTREGA");
            fechaTxt.requestFocus();
            return false;
        }
        if (diasTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "INGRESE LA CANTIDAD DE DIAS PARA VENCIMIENTO");
            diasTxt.requestFocus();
            return false;
        }
        if (proveedorSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un proveedor");
            codigoProveedorTxt.requestFocus();
            return false;
        }
//        String l = comboLetraFactura.getSelectedItem().toString();
//        int s = Integer.valueOf(nroSucursalTxt.getText());
//        int n = Integer.valueOf(nroFacturTxt.getText());
//        if (comprobante == null) {
//            ComprobanteCompras coms = null;
//            Boolean debito = true;
//            if (facturaChk.isSelected()) {
//                debito = true;
//            } else {
//                debito = false;
//            }
//            try {
//                coms = new ComprobanteComprasService().getComprobanteByProveedorAndNumero(proveedorSeleccionado, l, s, n, debito);
//            } catch (Exception ex) {
//                Logger.getLogger(ModificaComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            if (coms != null) {
//                JOptionPane.showMessageDialog(this, "Comprobante Existente");
//                return false;
//            }
//        }
        return true;
    }

    private void calcularTotales2() {
        guardarBtn.setEnabled(true);
        Double xt = 0.00;
        if (!gravadoTxt.getText().isEmpty()) {
            xt += Double.valueOf(gravadoTxt.getText().replace(",", "."));
        }
        if (!noGravadoTxt.getText().isEmpty()) {
            xt += Double.valueOf(noGravadoTxt.getText().replace(",", "."));
        }
        if (!impuestoInternoTxt.getText().isEmpty()) {
            xt += Double.valueOf(impuestoInternoTxt.getText().replace(",", "."));
        }
        if (!percepcionIIBBTxt.getText().isEmpty()) {
            xt += Double.valueOf(percepcionIIBBTxt.getText().replace(",", "."));
        }
        if (!percepcionIvaTxt.getText().isEmpty()) {
            xt += Double.valueOf(percepcionIvaTxt.getText().replace(",", "."));
        }
        if (!otroTxt.getText().isEmpty()) {
            xt += Double.valueOf(otroTxt.getText().replace(",", "."));
        }
        if (!ivaTxt.getText().isEmpty()) {
            xt += Double.valueOf(ivaTxt.getText().replace(",", "."));
        }
        totalTxt.setText((df.format(xt)));
    }

    private void impresion() {
        if (llevaDetalleChk.isSelected()) {
            PrinterJob pj = PrinterJob.getPrinterJob();
            PageFormat pf = pj.defaultPage();
            Paper paper = new Paper();
            double margin = 8;
            paper.setImageableArea(margin, margin, paper.getWidth() - margin * 2, paper.getHeight() - margin * 2);
            pf.setPaper(paper);
            pj.setPrintable(new MyPrintable(), pf);
//        if (pj.printDialog()) {
            try {
                pj.print();
            } catch (PrinterException e) {
                System.out.println(e);
            }
        }
    }

    private void volver() {
//        System.out.println(fd1);
//        System.out.println(fa1);
//        System.out.println(row1);
//        JOptionPane.showMessageDialog(this, df);
        AbmComprobantesCompraFrame av = new AbmComprobantesCompraFrame(fd1, fa1, row1);
        av.setVisible(true);
        this.dispose();
    }

    class MyPrintable implements Printable {

        public int print(Graphics g, PageFormat pf, int pageIndex) {
            if (pageIndex != 0) {
                return NO_SUCH_PAGE;
            }
            Graphics2D g2 = (Graphics2D) g;
            g2.setFont(new Font("Monospaced", Font.PLAIN, 8));
            g2.setPaint(Color.black);
            int row = 45;
            //                1234567890123456789012345678901234567890123456789012345678901234567890
            g2.setFont(new Font("Monospaced", Font.PLAIN, 14));
            String espacio = "                              ";
            g2.drawString(espacio + "X", 30, row);
            g2.setFont(new Font("Monospaced", Font.PLAIN, 8));
            g2.setFont(new Font("Monospaced", Font.PLAIN, 8));
            g2.drawString("DISTRIBUIDORA A Y M", 50, row);
            row += 20;
            g2.drawString("COMPROBANTE DEVOLUCION", 50, row);
            row += 30;
            g2.drawString(proveedorSeleccionado.getRazonSocial(), 50, row);
            row += 30;
            String nf = comboLetraFactura.getSelectedItem().toString() + " " + nroSucursalTxt.getText() + "-" + nroFacturTxt.getText();
            g2.drawString("NÃºmero Comprobante: " + nf, 50, row);
            row += 20;
            g2.drawString("Fecha Comprobante: " + fechaFacturaTxt.getText(), 50, row);
            row += 45;
            g2.drawString(detalle1Txt.getText(), 50, row);
            row += 15;
            g2.drawString(detalle2Txt.getText(), 50, row);
            row += 15;
            g2.drawString(detalle3Txt.getText(), 50, row);
            row += 15;
            g2.drawString(detalle4Txt.getText(), 50, row);
            g2.drawString(totalTxt.getText(), 500, row);
            row += 25;
            g2.drawString("FIRMA:", 50, row);
            row += 25;
            g2.drawString("ACLARACION:", 50, row);
            row += 25;
            g2.drawString("DOCUMENTO:", 50, row);
            row = 455;
            g2.setFont(new Font("Monospaced", Font.PLAIN, 14));
            g2.drawString(espacio + "X", 30, row);
            g2.setFont(new Font("Monospaced", Font.PLAIN, 8));
            g2.drawString("DISTRIBUIDORA A Y M", 50, row);
            row += 20;
            g2.drawString("COMPROBANTE DEVOLUCION", 50, row);
            row += 30;
            g2.drawString(proveedorSeleccionado.getRazonSocial(), 50, row);
            row += 30;
            g2.drawString("NÃºmero Comprobante: " + nf, 50, row);
            row += 20;
            g2.drawString("Fecha Comprobante: " + fechaFacturaTxt.getText(), 50, row);
            row += 45;
            g2.drawString(detalle1Txt.getText(), 50, row);
            row += 15;
            g2.drawString(detalle2Txt.getText(), 50, row);
            row += 15;
            g2.drawString(detalle3Txt.getText(), 50, row);
            row += 15;
            g2.drawString(detalle4Txt.getText(), 50, row);
            g2.drawString(totalTxt.getText(), 500, row);
            row += 25;
            g2.drawString("FIRMA:", 50, row);
            row += 25;
            g2.drawString("ACLARACION:", 50, row);
            row += 25;
            g2.drawString("DOCUMENTO:", 50, row);
            return PAGE_EXISTS;
        }
    }
}
