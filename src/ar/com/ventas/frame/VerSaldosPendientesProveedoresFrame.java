/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ComprobanteCompras;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ComprobanteComprasService;
import ar.com.ventas.services.ProveedorService;
import ar.com.ventas.util.UtilFrame;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class VerSaldosPendientesProveedoresFrame extends javax.swing.JFrame {

    private List<Proveedor> proveedores = null;
    private Double limite = 1000D;
    private DecimalFormat df = new DecimalFormat("#0.00");
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

    /**
     * Creates new form VerSaldosPendientesProveedoresFrame
     */
    public VerSaldosPendientesProveedoresFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        limiteTxt.setText(limite.toString());
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        verCtaCteBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        limiteTxt = new javax.swing.JTextField();
        actualizarBtn = new javax.swing.JButton();
        composicionBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("SALDO PROVEEDORES");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Proveedor", "Saldo PROV.", "Fe.1er.Vto", "Saldo VENCIDO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(7);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(300);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(30);
        }

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        verCtaCteBtn.setText("Ver Cuenta Corriente");
        verCtaCteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verCtaCteBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Límite a descartar:");

        limiteTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        limiteTxt.setText("LIMITE");

        actualizarBtn.setText("Actualizar");
        actualizarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarBtnActionPerformed(evt);
            }
        });

        composicionBtn.setText("COMPOSICION");
        composicionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                composicionBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 888, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(limiteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(actualizarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(composicionBtn)
                        .addGap(18, 18, 18)
                        .addComponent(verCtaCteBtn)
                        .addGap(18, 18, 18)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(verCtaCteBtn)
                    .addComponent(jLabel1)
                    .addComponent(limiteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actualizarBtn)
                    .addComponent(composicionBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void verCtaCteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verCtaCteBtnActionPerformed
        verCta();
    }//GEN-LAST:event_verCtaCteBtnActionPerformed

    private void actualizarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarBtnActionPerformed
        llenarTabla();
    }//GEN-LAST:event_actualizarBtnActionPerformed

    private void composicionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_composicionBtnActionPerformed
        composicion();
    }//GEN-LAST:event_composicionBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerSaldosPendientesProveedoresFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerSaldosPendientesProveedoresFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerSaldosPendientesProveedoresFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerSaldosPendientesProveedoresFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VerSaldosPendientesProveedoresFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizarBtn;
    private javax.swing.JButton composicionBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField limiteTxt;
    private javax.swing.JTable tabla;
    private javax.swing.JButton verCtaCteBtn;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarTabla() {
        tabla = UtilFrame.limpiarTabla(tabla);
        limite = Double.valueOf(limiteTxt.getText());
        proveedores = null;
        try {
            proveedores = new ProveedorService().getProveedoresConSaldoAcreedorLimite(limite);
        } catch (Exception ex) {
            Logger.getLogger(VerSaldosPendientesProveedoresFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (proveedores != null && !proveedores.isEmpty()) {
            Double t = 0.00;

            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            Double tt = 0.0;
            Date dd = new Date();
            for (Proveedor p : proveedores) {
                //if (p.getSaldo() > 0.00) {
                Object ob[] = new Object[5];
                ob[0] = p.getCodigo();
                ob[1] = p.getRazonSocial();
                ob[2] = df.format(p.getSaldo());
                t += p.getSaldo();
                List<ComprobanteCompras> comprobantes = null;
                tt = 0.0;
                try {
//                    comprobantes = new ComprobanteComprasService().getFacturasPrimerVencimiento(p);
                    comprobantes = new ComprobanteComprasService().getFacturasPrimerVencimiento3(p);
                    //}
                } catch (Exception ex) {
                    Logger.getLogger(VerSaldosPendientesProveedoresFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (comprobantes != null && !comprobantes.isEmpty()) {
                    dd = comprobantes.get(0).getFechaCalculoVencimiento();
                    Date now = new Date();
                    for (ComprobanteCompras c : comprobantes) {
//                        if (dd.equals(c.getFechaCalculoVencimiento()) || c.getFechaCalculoVencimiento().before(dd)) {
                            if(c.getFechaCalculoVencimiento().before(now)){
                            tt += +(c.getTotal() - c.getPagado());
                            System.out.println(c.getFechaFactura());
                            System.out.println(c.getFechaCalculoVencimiento());
                            System.out.println(c.getTotal());
                            System.out.println(tt);
                            System.out.println("");
                        }
                    }
                    if (tt > 0.0) {
                        ob[3] = sdf.format(dd);
                        ob[4] = df.format(tt);
                    } else {
                        ob[3] = "";
                        ob[4] = "";
                    }
                }
                tbl.addRow(ob);
            }
            Object ob[] = new Object[5];
            ob[0] = "";
            ob[1] = "TOTAL";
            ob[2] = df.format(t);

            tbl.addRow(ob);
            tabla.setModel(tbl);
        }
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void verCta() {
        int row = tabla.getSelectedRow();
        int rows = tabla.getRowCount();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR PROVEEDOR");
            return;
        }
        if (row > rows - 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR PROVEEDOR");
            return;
        }
        Proveedor p = proveedores.get(row);
        CuentaCorrienteProveedorFrame ctap = new CuentaCorrienteProveedorFrame(p, 1);
        ctap.setVisible(true);
        this.dispose();
    }

    private void composicion() {
        int row = tabla.getSelectedRow();
        int rows = tabla.getRowCount();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR PROVEEDOR");
            return;
        }
        if (row > rows - 1) {
            JOptionPane.showMessageDialog(this, "DEBE SELECCIONAR PROVEEDOR");
            return;
        }
        Proveedor p = proveedores.get(row);
        ComposicionSaldoComprasFrame cscf = new ComposicionSaldoComprasFrame(p, 1);
        cscf.setVisible(true);
        this.dispose();
    }
}
