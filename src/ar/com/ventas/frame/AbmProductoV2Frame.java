/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Configuracion;
import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.Usuario;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ConfiguracionService;
import ar.com.ventas.services.ProductoService;
import ar.com.ventas.services.UsuarioService;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Supervisor
 */
public class AbmProductoV2Frame extends javax.swing.JFrame {

    private List<Producto> listadoProducto = null;
    private final Logger logger = Logger.getLogger(this.getClass().getName());
    private DefaultTableModel tbl = null;
    private String filtro = "";
    private DecimalFormat df = new DecimalFormat("#0.00");
    private Usuario usuario;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private final Integer nivel = 1;

    /**
     * Creates new form AbmProductoFrame
     */
    public AbmProductoV2Frame(String filtro) {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        initComponents();
        this.filtro = filtro;
        limpiarCampos();
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductos = new javax.swing.JTable();
        modificarBtn = new javax.swing.JButton();
        nuevoBtn = new javax.swing.JButton();
        productoTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        productoBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        codigoProductoTxt = new javax.swing.JTextField();
        buscarPorCodigoBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("PRODUCTOS VER-2");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        tablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "NV", "Codigo de barra", "Detalle", "Precio", "Impuesto", "Rubro", "Sub rubro", "Sugerido"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaProductos);
        if (tablaProductos.getColumnModel().getColumnCount() > 0) {
            tablaProductos.getColumnModel().getColumn(0).setPreferredWidth(85);
            tablaProductos.getColumnModel().getColumn(1).setPreferredWidth(20);
            tablaProductos.getColumnModel().getColumn(2).setPreferredWidth(100);
            tablaProductos.getColumnModel().getColumn(3).setPreferredWidth(200);
            tablaProductos.getColumnModel().getColumn(4).setPreferredWidth(75);
            tablaProductos.getColumnModel().getColumn(5).setPreferredWidth(75);
            tablaProductos.getColumnModel().getColumn(6).setPreferredWidth(50);
            tablaProductos.getColumnModel().getColumn(7).setPreferredWidth(50);
            tablaProductos.getColumnModel().getColumn(8).setPreferredWidth(50);
        }

        modificarBtn.setText("Modificar");
        modificarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarBtnActionPerformed(evt);
            }
        });

        nuevoBtn.setText("Nuevo");
        nuevoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoBtnActionPerformed(evt);
            }
        });

        productoTxt.setText("PRODUCTO");
        productoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                productoTxtKeyPressed(evt);
            }
        });

        jLabel1.setText("Producto:");

        productoBtn.setText("Buscar");
        productoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productoBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Código:");

        codigoProductoTxt.setText("CODIGO PRODUCTO");
        codigoProductoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoProductoTxtKeyPressed(evt);
            }
        });

        buscarPorCodigoBtn.setText("Buscar x Código");
        buscarPorCodigoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarPorCodigoBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nuevoBtn)
                        .addGap(18, 18, 18)
                        .addComponent(modificarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(productoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productoBtn)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(codigoProductoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buscarPorCodigoBtn)
                .addContainerGap(229, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(productoBtn)
                    .addComponent(jLabel2)
                    .addComponent(codigoProductoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarPorCodigoBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(modificarBtn)
                    .addComponent(nuevoBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        this.dispose();
        MainFrame mainFrame = new MainFrame();
        mainFrame.setVisible(true);
    }//GEN-LAST:event_volverBtnActionPerformed

    private void modificarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarBtnActionPerformed
        Producto producto = this.productoSeleccionado();
        filtro = productoTxt.getText();
        if (producto != null) {
            if (habilitado()) {
                ModificarProductoFrame2 mcf = new ModificarProductoFrame2(producto, this.filtro);
                mcf.setVisible(true);
                this.dispose();
            }
        }
    }//GEN-LAST:event_modificarBtnActionPerformed

    private void nuevoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoBtnActionPerformed
        if (habilitado()) {
            nuevo();
        }
    }//GEN-LAST:event_nuevoBtnActionPerformed

    private void productoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productoBtnActionPerformed
        borrarTabla();
        this.llenarTabla();
    }//GEN-LAST:event_productoBtnActionPerformed

    private void productoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productoTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            borrarTabla();
            this.llenarTabla();
        } else {
            if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
                MainFrame mf = new MainFrame();
                mf.setVisible(true);
                this.dispose();
            }
        }
    }//GEN-LAST:event_productoTxtKeyPressed

    private void buscarPorCodigoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarPorCodigoBtnActionPerformed
        if (!codigoProductoTxt.getText().isEmpty()) {
            Producto prod = null;
            try {
                prod = new ProductoService().getProductoByCodigo(Integer.valueOf(codigoProductoTxt.getText()));
            } catch (Exception ex) {
                Logger.getLogger(AbmProductoV2Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (prod != null) {
                borrarTabla();
                listadoProducto.add(prod);
                tbl = (DefaultTableModel) tablaProductos.getModel();
                Object ob[] = new Object[8];
                ob[0] = prod.getCodigo();
                ob[1] = prod.getCodigoBarras();
                ob[2] = prod.getDetalle();
                ob[3] = df.format(prod.getPrecio());
                ob[4] = df.format(prod.getImpuesto());
                ob[5] = prod.getRubro().getNombre();
                ob[6] = prod.getSubRubro().getDetalle();
                ob[7] = df.format(prod.getSugerido());
                tbl.addRow(ob);
                tablaProductos.setModel(tbl);
            } else {
                JOptionPane.showMessageDialog(this, "Código Inexistente");
                codigoProductoTxt.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe ingresar un Código de Producto");
        }
    }//GEN-LAST:event_buscarPorCodigoBtnActionPerformed

    private void codigoProductoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoProductoTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!codigoProductoTxt.getText().isEmpty()) {
                Producto prod = null;
                try {
                    prod = new ProductoService().getProductoByCodigo(Integer.valueOf(codigoProductoTxt.getText()));
                } catch (Exception ex) {
                    Logger.getLogger(AbmProductoV2Frame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (prod != null) {
                    borrarTabla();
                    listadoProducto.add(prod);
                    tbl = (DefaultTableModel) tablaProductos.getModel();
                    Object[] o = new Object[9];
                    o[0] = prod.getCodigo();
                    if (prod.getMargenAyM() != null) {
                        if (prod.getMargenAyM() < 0.1) {
                            o[1] = "";
                        } else {
                            o[1] = "XX";
                        }
                    } else {
                        o[1] = "";
                    }
                    o[2] = prod.getCodigoBarras();
                    o[3] = prod.getDetalle();
                    o[4] = df.format(prod.getPrecio());
                    o[5] = df.format(prod.getImpuesto());
                    o[6] = prod.getRubro().getNombre();
                    o[7] = prod.getSubRubro().getDetalle();
                    o[8] = df.format(prod.getSugerido());
                    tbl.addRow(o);
                    tablaProductos.setModel(tbl);
                } else {
                    JOptionPane.showMessageDialog(this, "Código Inexistente");
                    codigoProductoTxt.requestFocus();
                }
            } else {
                JOptionPane.showMessageDialog(this, "Debe ingresar un Código de Producto");
            }
        }
    }//GEN-LAST:event_codigoProductoTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AbmProductoV2Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AbmProductoV2Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AbmProductoV2Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AbmProductoV2Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AbmProductoV2Frame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarPorCodigoBtn;
    private javax.swing.JTextField codigoProductoTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modificarBtn;
    private javax.swing.JButton nuevoBtn;
    private javax.swing.JButton productoBtn;
    private javax.swing.JTextField productoTxt;
    private javax.swing.JTable tablaProductos;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarTabla() {
        this.filtro = productoTxt.getText();
        try {
            ProductoService productoService = new ProductoService();
            listadoProducto = productoService.getProductosByFiltro(filtro);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "error con la base de datos");
        }
        tbl = (DefaultTableModel) tablaProductos.getModel();
        if (listadoProducto != null && !listadoProducto.isEmpty()) {
            for (Producto producto : listadoProducto) { // Recorro la lista de productos y lleno la tabla.
                Object[] fila = new Object[9];
                fila[0] = producto.getCodigo();
                if (producto.getMargenAyM() != null) {
                    if (producto.getMargenAyM() < 0.1) {
                        fila[1] = "";
                    } else {
                        fila[1] = "XX";
                    }
                } else {
                    fila[1] = "";
                }
                fila[2] = producto.getCodigoBarras();
                fila[3] = producto.getDetalle();
                fila[4] = df.format(producto.getPrecio());
                fila[5] = df.format(producto.getImpuesto());
                fila[6] = producto.getRubro().getCodigo();
                fila[7] = producto.getSubRubro().getCodigo();
                fila[8] = df.format(producto.getSugerido());
                tbl.addRow(fila); // Agrego la fila a la tabla
            }
        }
        tablaProductos.setModel(tbl); // Pongo la tabla visible.
    }

    private Producto productoSeleccionado() {
        Producto producto = null;
        int filaSeleccionada = tablaProductos.getSelectedRow();
        if (filaSeleccionada < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Producto de la lista");
        } else {
            producto = listadoProducto.get(filaSeleccionada);
        }
        return producto;
    }

    private void borrarProducto() {
        int filaSeleccionada = tablaProductos.getSelectedRow();
        if (filaSeleccionada != -1) {
            int confirm = JOptionPane.showConfirmDialog(this,
                    "¿Desea eliminar el Producto?",
                    "Borrar",
                    JOptionPane.OK_CANCEL_OPTION);
            if (confirm == JOptionPane.OK_OPTION) {
                Producto prodABorrar = getProductoSeleccionado();
                try {
                    new ProductoService().deleteProducto(prodABorrar);
                    listadoProducto.remove(filaSeleccionada);
                    borrarTabla();
                    llenarTabla();
                } catch (Exception ex) {
                    logger.log(Level.SEVERE, ex.getMessage());
                    JOptionPane.showMessageDialog(this,
                            "Ha ocurrido un error eliminando el Producto.",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Debe seleccionar un Producto para eliminarlo.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private Producto getProductoSeleccionado() {
        int filaSeleccionada = tablaProductos.getSelectedRow();
        if (filaSeleccionada != -1) {
            Producto producto = listadoProducto.get(filaSeleccionada);
            return producto;
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Producto de la lista.");
        }
        return null;
    }

    private void limpiarCampos() {
        productoTxt.setText(this.filtro);
        codigoProductoTxt.setText("");
    }

    private void borrarTabla() {
        try {
            DefaultTableModel modelo = (DefaultTableModel) tablaProductos.getModel();
            int filas = tablaProductos.getRowCount();
            for (int i = 0; i < filas; i++) {
                modelo.removeRow(0);
                Producto prod = listadoProducto.get(0);
                listadoProducto.remove(prod);
            }
            tablaProductos.setModel(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al limpiar la tabla.");
        }
    }

    private void nuevo() {
        NuevoProductoFrame1 nuevoProductoFrame = new NuevoProductoFrame1();
        nuevoProductoFrame.setVisible(true);
        this.dispose();
    }

    private boolean habilitado() {
        FileReader fr = null;
        try {
            fr = new FileReader("c:/ventas/permisos.txt");
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AbmProductoV2Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        BufferedReader br = new BufferedReader(fr);
        String acceso = "";
        try {
            acceso = br.readLine();
        } catch (IOException ex) {
            Logger.getLogger(AbmProductoV2Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            br.close();
        } catch (IOException ex) {
            Logger.getLogger(AbmProductoV2Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (acceso.equals("1")) {
            return true;
        }
        habilitar();
        return usuario != null;
//        else {
//            if (acceso.equals("3")) {
//                JTextField field = new JTextField("");
//                String[] options = {"Ingresar", "Regresar"};
//                int result = JOptionPane.showOptionDialog(
//                        null,
//                        field,
//                        "Autorización de USUARIO",
//                        JOptionPane.OK_CANCEL_OPTION,
//                        JOptionPane.QUESTION_MESSAGE,
//                        null,
//                        options,
//                        0);
//                switch (result) {
//                    case 0:
//                        int cod = Integer.valueOf(field.getText());
//                        Usuario usu = null;
//                        try {
//                            usu = new UsuarioService().getUsuarioByCodigo(cod);
//                        } catch (Exception ex) {
//                            Logger.getLogger(AbmProductoFrame.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//                        if (usu != null) {
//                            int cla = usu.getNivel();
//                            if (usu.getActivo()) {
//                                if (cla > 1) {
//                                    return false;
//                                }
//                                JPasswordField field2 = new JPasswordField("");
//                                String[] opts = {"Ingresar", "Regresar"};
//                                int resulta = JOptionPane.showOptionDialog(
//                                        null,
//                                        field2,
//                                        "CONTRASEÑA: " + usu.getNombre() + ", Autorización",
//                                        JOptionPane.OK_CANCEL_OPTION,
//                                        JOptionPane.QUESTION_MESSAGE,
//                                        null,
//                                        opts,
//                                        0);
//                                switch (resulta) {
//                                    case 0:
//                                        int contra = Integer.valueOf(new String(field2.getPassword()));
//                                        if (contra == usu.getContrasena()) {
//                                            return true;
//                                        } else {
//                                            JOptionPane.showMessageDialog(this, "Contraseña incorrecta");
//                                        }
//                                        break;
//                                }
//                            } else {
//                                JOptionPane.showMessageDialog(this, "USUARIO Inactivo");
//                            }
//                        } else {
//                            JOptionPane.showMessageDialog(this, "No existe el Usuario");
//                        }
//                        break;
//                }
//            }
//        }
//        return false;
    }

    private void exportar() {
        Configuracion con = null;
        Long lo = 1L;
        try {
            con = new ConfiguracionService().getFacturas(lo);
        } catch (Exception ex) {
            Logger.getLogger(AbmProductoV2Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Float por_iva = con.getIva();
        List<Producto> produc = null;
        try {
            produc = new ProductoService().getProductosActivosByNombre();
        } catch (Exception ex) {
            Logger.getLogger(AbmProductoV2Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (produc != null && !produc.isEmpty()) {
            String rutaArchivo = "c:/informes/productos.xls";
            File archivo = new File(rutaArchivo);
            if (archivo.exists()) {
                archivo.delete();
            }
            try {
                archivo.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            WritableWorkbook libro = null;
            try {
                libro = Workbook.createWorkbook(archivo);
            } catch (IOException ex) {
                Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            WritableSheet hoja1 = libro.createSheet("PRODUCTOS", 0);
            try {
                hoja1.addCell(new jxl.write.Label(0, 0, "Distribuidora A&M - PRODUCTOS ACTIVOS"));
                hoja1.addCell(new jxl.write.Label(0, 1, "Codigo"));
                hoja1.addCell(new jxl.write.Label(1, 1, "Barras"));
                hoja1.addCell(new jxl.write.Label(2, 1, "Descripcion"));
                hoja1.addCell(new jxl.write.Label(3, 1, "Rubro"));
                hoja1.addCell(new jxl.write.Label(4, 1, "Subrubro"));
                hoja1.addCell(new jxl.write.Label(5, 1, "Caja/Unidad"));
                hoja1.addCell(new jxl.write.Label(6, 1, "Cantidad caja"));
                hoja1.addCell(new jxl.write.Label(7, 1, "Precio Venta"));
                int y = 2;
                for (Producto p : produc) {
                    hoja1.addCell(new jxl.write.Label(0, y, p.getCodigo().toString()));
                    if (p.getCodigoBarras() != null) {
                        hoja1.addCell(new jxl.write.Label(1, y, p.getCodigoBarras().toString()));
                    }
                    hoja1.addCell(new jxl.write.Label(2, y, p.getDetalle()));
                    hoja1.addCell(new jxl.write.Label(3, y, p.getRubro().getNombre()));
                    hoja1.addCell(new jxl.write.Label(4, y, p.getSubRubro().getDetalle()));
                    if (p.getUnidad() != null) {
                        if (p.getUnidad()) {
                            hoja1.addCell(new jxl.write.Label(5, y, "CAJA"));
                        } else {
                            hoja1.addCell(new jxl.write.Label(5, y, "UNIDAD"));
                            hoja1.addCell(new jxl.write.Label(6, y, p.getCantidadCaja().toString()));
                        }
                    } else {
                        hoja1.addCell(new jxl.write.Label(5, y, "CAJA"));
                    }
                    Double precio_producto = (p.getPrecio() * (1 + por_iva / 100)) + p.getImpuesto();
                    String pp = df.format(precio_producto);
                    Double precio_prod = Double.valueOf(pp.replace(",", "."));
                    hoja1.addCell(new jxl.write.Number(7, y, (precio_prod)));
                    y += 1;
                }
                y += 2;
            } catch (WriteException ex) {
                Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error configurando Excel");
            }
            try {
                libro.write();
                libro.close();
            } catch (IOException ex) {
                Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 662");
            } catch (WriteException ex) {
                Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 663");
            }
            JOptionPane.showMessageDialog(this, "Excel creado correctamente");
            JOptionPane.showMessageDialog(this, "BUSCARLO EN C:/informes/productos.xls");
        }
    }

    private void habilitar() {
        usuario = null;
        JTextField field = new JTextField("");
        String[] options = {"Ingresar"};
        int result = JOptionPane.showOptionDialog(
                null,
                field,
                "Autorización de USUARIO",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                0);
        if (field.getText().isEmpty()) {
            usuario = null;
            return;
        }
        switch (result) {
            case 0:
                if (!isNumeric(field.getText())) {
                    JOptionPane.showMessageDialog(this, "DEBE SER UN NUMERO");
                    usuario = null;
                    break;
                }
                int cod = Integer.valueOf(field.getText());
                try {
                    usuario = new UsuarioService().getUsuarioByCodigo(cod);
                } catch (Exception ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (usuario != null) {
                    if (usuario.getActivo()) {
                        JPasswordField field2 = new JPasswordField("");
                        String[] opts = {"Ingresar"};
                        int resulta = JOptionPane.showOptionDialog(
                                null,
                                field2,
                                "CONTRASEÑA: " + usuario.getNombre() + ", Autorización",
                                JOptionPane.OK_CANCEL_OPTION,
                                JOptionPane.QUESTION_MESSAGE,
                                null,
                                opts,
                                0);
                        switch (resulta) {
                            case 0:
                                if (!isNumeric(new String(field2.getPassword()))) {
                                    JOptionPane.showMessageDialog(this, "DEBE SER UN NUMERO");
                                    usuario = null;
                                    break;
                                }
                                int contra = Integer.valueOf(new String(field2.getPassword()));
                                if (contra == usuario.getContrasena()) {
                                    if (usuario.getNivel() > nivel) {
                                        JOptionPane.showMessageDialog(this, "Usuario no Habilitado");
                                        usuario = null;
                                    } else {
                                        String f1 = sdf.format(usuario.getFecha());
                                        String f2 = sdf.format(new Date());
                                        if (usuario.getNivel() == 2) {
                                            if (!f1.equals(f2)) {
                                                JOptionPane.showMessageDialog(this, "Permiso de Usuario Vencido");
                                                usuario = null;
                                            }
                                        }
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "Contraseña incorrecta");
                                    usuario = null;
                                }
                                break;
                            case 1:
                                usuario = null;
                                break;
                            case -1:
                                usuario = null;
                                break;
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "USUARIO Inactivo");
                        usuario = null;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No existe el Usuario");
                    usuario = null;
                }
                break;
            case 1:
                usuario = null;
                break;
            case -1:
                usuario = null;
                break;
        }
    }

    private boolean isNumeric(String str) {
        try {
            Long.parseLong(str);
        } catch (NumberFormatException ex) {
            return false;
        }
        return true;
    }
}
