/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ComprobanteCompras;
import ar.com.ventas.entities.IvaCompras;
import ar.com.ventas.entities.Periodo;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ComprobanteComprasService;
import ar.com.ventas.services.IvaComprasServices;
import ar.com.ventas.services.PeriodoService;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Mario
 */
public class LibroIvaComprasFrame extends javax.swing.JFrame {

    private List<Periodo> periodos = new ArrayList<>();
    private List<IvaCompras> libroIva = null;
    private DecimalFormat df = new DecimalFormat("#0.00");
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

    /**
     * Creates new form LibroIvaComprasFrame
     */
    public LibroIvaComprasFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        llenarComboPeriodo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboPeriodos = new javax.swing.JComboBox<>();
        buscarBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaIvaCompras = new javax.swing.JTable();
        sacarFcBtn = new javax.swing.JButton();
        imprimirBtn = new javax.swing.JButton();
        excelBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("LIBRO IVA COMPRAS");

        jLabel1.setText("Período:");

        comboPeriodos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        tablaIvaCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Tipo", "Comprobante", "CUIT", "Proveedor", "Gravado", "NoGravado", "Impuesto", "Ret.IIBB", "Ret.Iva", "Otro", "Iva", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaIvaCompras);
        if (tablaIvaCompras.getColumnModel().getColumnCount() > 0) {
            tablaIvaCompras.getColumnModel().getColumn(0).setPreferredWidth(40);
            tablaIvaCompras.getColumnModel().getColumn(1).setPreferredWidth(10);
            tablaIvaCompras.getColumnModel().getColumn(4).setPreferredWidth(150);
            tablaIvaCompras.getColumnModel().getColumn(5).setPreferredWidth(60);
            tablaIvaCompras.getColumnModel().getColumn(6).setPreferredWidth(10);
            tablaIvaCompras.getColumnModel().getColumn(7).setPreferredWidth(60);
            tablaIvaCompras.getColumnModel().getColumn(8).setPreferredWidth(40);
            tablaIvaCompras.getColumnModel().getColumn(9).setPreferredWidth(40);
            tablaIvaCompras.getColumnModel().getColumn(10).setPreferredWidth(10);
            tablaIvaCompras.getColumnModel().getColumn(11).setPreferredWidth(40);
            tablaIvaCompras.getColumnModel().getColumn(12).setPreferredWidth(60);
        }

        sacarFcBtn.setText("Sacar Factura");
        sacarFcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sacarFcBtnActionPerformed(evt);
            }
        });

        imprimirBtn.setText("Imprimir");

        excelBtn.setText("Excel");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1196, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboPeriodos, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buscarBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sacarFcBtn)
                        .addGap(18, 18, 18)
                        .addComponent(imprimirBtn)
                        .addGap(18, 18, 18)
                        .addComponent(excelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboPeriodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarBtn))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sacarFcBtn)
                    .addComponent(imprimirBtn)
                    .addComponent(excelBtn)
                    .addComponent(volverBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        buscar();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void sacarFcBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sacarFcBtnActionPerformed
        int row = tablaIvaCompras.getSelectedRow();
        int rows = tablaIvaCompras.getRowCount() - 2;
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un comprobante para sacar del libro");
            return;
        }
        if (row > rows) {
            JOptionPane.showMessageDialog(this, "Esa linea no debe seleccionar");
            return;
        }
        int a = JOptionPane.showConfirmDialog(this, "Confirma sacar Comprobante de Libro IVA?", "Atención", JOptionPane.YES_NO_OPTION);
        if (a == 1) {
            return;
        }
        IvaCompras f = libroIva.get(row);
        ComprobanteCompras c = f.getComprobante();
        c.setEnLibro(false);
        try {
            new ComprobanteComprasService().updateComprobante(c);
        } catch (Exception ex) {
            Logger.getLogger(LibroIvaComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            new IvaComprasServices().deleteIvaCompras(f);
            JOptionPane.showMessageDialog(this, "Se elimino comprobante de Libro Iva Compras");
        } catch (Exception ex) {
            Logger.getLogger(LibroIvaComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        buscar();
    }//GEN-LAST:event_sacarFcBtnActionPerformed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibroIvaComprasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibroIvaComprasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibroIvaComprasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibroIvaComprasFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LibroIvaComprasFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarBtn;
    private javax.swing.JComboBox<String> comboPeriodos;
    private javax.swing.JButton excelBtn;
    private javax.swing.JButton imprimirBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton sacarFcBtn;
    private javax.swing.JTable tablaIvaCompras;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void llenarComboPeriodo() {
        periodos = null;
        try {
            periodos = new PeriodoService().getAllPeriodosAbiertos();
        } catch (Exception ex) {
            Logger.getLogger(AbmPeriodosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (periodos != null && !periodos.isEmpty()) {
            comboPeriodos.removeAllItems();
            comboPeriodos.addItem("");
            for (Periodo p : periodos) {
                comboPeriodos.addItem(p.getDetalle());
            }
        }
    }

    private void buscar() {
        limpiarTabla();
        libroIva = null;

        int row = comboPeriodos.getSelectedIndex();

        if (row < 1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un período");
            return;
        }
        Periodo p = periodos.get(row - 1);
        int mes = p.getMes() + 1;
        int anio = p.getAnio();
        Boolean cerrado = p.getCerrado();
        if (cerrado) {
            sacarFcBtn.setEnabled(false);
        } else {
            sacarFcBtn.setEnabled(true);
        }
        try {
            libroIva = new IvaComprasServices().getIvaComprasByFiltro(mes, anio);
        } catch (Exception ex) {
            Logger.getLogger(LibroIvaComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (libroIva != null && !libroIva.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tablaIvaCompras.getModel();
            Double tgr = 0.0;
            Double tngr = 0.0;
            Double timpu = 0.0;
            Double triibb = 0.0;
            Double tretiva = 0.0;
            Double totro = 0.0;
            Double tiva = 0.0;
            Double ttotal = 0.0;
            for (IvaCompras ic : libroIva) {
                Object ob[] = new Object[13];
                ob[0] = sdf.format(ic.getFechaFactura());
                int s = 1;
                if (ic.getCredito() != null) {
                    if (ic.getCredito()) {
                        ob[1] = "NC";
                        s = -1;
                    } else {
                        ob[1] = ic.getComprobante().getTipoComprobante();
                    }
                } else {
                    ob[1] = ic.getComprobante().getTipoComprobante();
                }
                String let = ic.getLetra()+" ";
                String suc = "0000"+ic.getNumeroSucursal().toString();
                int ls = suc.length();
                String num = "00000000"+ic.getNumeroFactura().toString();
                int ln = num.length();
                ob[2] = let + suc.substring(ls-4, ls)+"-"+num.substring(ln-8, ln);
                //ob[2] = ic.getLetra() + " " + ic.getNumeroSucursal() + " " + ic.getNumeroFactura();
                ob[3] = ic.getProveedor().getCuit();
                ob[4] = ic.getProveedor().getRazonSocial();
                Double gr = ic.getGravado() * s;
                Double ngr = 0.0;
                if (ic.getNoGravado() > 0) {
                    ngr = ic.getNoGravado() * s;
                }
                Double impu = 0.0;

                if (ic.getImpuestoInterno() != null) {
                    if (ic.getImpuestoInterno() > 0) {
                        impu += ic.getImpuestoInterno() * s;
                    }
                }
                Double retiibb = 0.0;
                if (ic.getPercepcionIiBb() > 0) {
                    retiibb = ic.getPercepcionIiBb() * s;
                }
                Double retiva = 0.0;
                if (ic.getPercepcionIva() > 0) {
                    retiva = ic.getPercepcionIva() * s;
                }
                Double otro = 0.0;
                if (ic.getOtro() > 0) {
                    otro = ic.getOtro() * s;
                }
                Double iva = 0.0;
                if (ic.getIva() > 0) {
                    iva = ic.getIva() * s;
                }
                Double t = ic.getTotal() * s;
                tgr += gr;
                tngr += ngr;
                if (impu != null) {
                    timpu += impu;
                }
                triibb += retiibb;
                tretiva += retiva;
                totro += otro;
                tiva += iva;
                ttotal += t;
                ob[5] = df.format(gr);
                ob[6] = df.format(ngr);
                if (impu != null) {
                    ob[7] = df.format(impu);
                } else {
                    ob[7] = df.format(0.0);
                }
                ob[8] = df.format(retiibb);
                ob[9] = df.format(retiva);
                ob[10] = df.format(otro);
                ob[11] = df.format(iva);
                ob[12] = df.format(t);
                tbl.addRow(ob);
            }
            Object ob[] = new Object[13];
            ob[4] = "Totales -->";
            ob[5] = df.format(tgr);
            ob[6] = df.format(tngr);
            ob[7] = df.format(timpu);
            ob[8] = df.format(triibb);
            ob[9] = df.format(tretiva);
            ob[10] = df.format(totro);
            ob[11] = df.format(tiva);
            ob[12] = df.format(ttotal);
            tbl.addRow(ob);
            tablaIvaCompras.setModel(tbl);
        }
    }

    private void limpiarTabla() {
        DefaultTableModel tbl = (DefaultTableModel) tablaIvaCompras.getModel();
        int row = tbl.getRowCount();
        for (int i = 0; i < row; i++) {
            tbl.removeRow(0);
        }
        tablaIvaCompras.setModel(tbl);
        libroIva = null;
    }

    private void excel() {
        String rutaArchivo = "c:/exceliva/ivacompras.xls";
        File archivo = new File(rutaArchivo);
        if (archivo.exists()) {
            archivo.delete();
        }
        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableWorkbook libro = null;
        try {
            libro = Workbook.createWorkbook(archivo);
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableSheet hoja1 = libro.createSheet("IVA compras - ", 0);
        int row = comboPeriodos.getSelectedIndex();
        try {
            hoja1.addCell(new jxl.write.Label(0, 0, "Distribuidora A&M - IVA Compras - Período: " + periodos.get(row - 1).getDetalle()));
            hoja1.addCell(new jxl.write.Label(0, 1, "Fecha"));
            hoja1.addCell(new jxl.write.Label(1, 1, "Tipo"));
            hoja1.addCell(new jxl.write.Label(2, 1, "Número Comprobante"));
            hoja1.addCell(new jxl.write.Label(3, 1, "CUIT"));
            hoja1.addCell(new jxl.write.Label(4, 1, "Razon Social"));
            hoja1.addCell(new jxl.write.Label(5, 1, "Gravado"));
            hoja1.addCell(new jxl.write.Label(6, 1, "No Gravado"));
            hoja1.addCell(new jxl.write.Label(7, 1, "Impuestos"));
            hoja1.addCell(new jxl.write.Label(8, 1, "Ret.IIBB"));
            hoja1.addCell(new jxl.write.Label(9, 1, "Ret.IVA"));
            hoja1.addCell(new jxl.write.Label(10, 1, "Otras Ret."));
            hoja1.addCell(new jxl.write.Label(11, 1, "IVA"));
            hoja1.addCell(new jxl.write.Label(12, 1, "TOTAL"));
            DefaultTableModel tbl = (DefaultTableModel) tablaIvaCompras.getModel();
            int y = 2;
            int rows = tablaIvaCompras.getRowCount();
            for (int i = 0; i < rows - 1; i++) {
                hoja1.addCell(new jxl.write.Label(0, y, tbl.getValueAt(i, 0).toString()));
                hoja1.addCell(new jxl.write.Label(1, y, tbl.getValueAt(i, 1).toString()));
                hoja1.addCell(new jxl.write.Label(2, y, tbl.getValueAt(i, 2).toString()));
                hoja1.addCell(new jxl.write.Label(3, y, tbl.getValueAt(i, 3).toString()));
                hoja1.addCell(new jxl.write.Label(4, y, tbl.getValueAt(i, 4).toString()));
                if (tbl.getValueAt(i, 5) != "") {
                    hoja1.addCell(new jxl.write.Number(5, y, Double.valueOf(df.format(Double.valueOf(tbl.getValueAt(i, 5).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(5, y, ""));
                }
                if (tbl.getValueAt(i, 6) != "") {
                    hoja1.addCell(new jxl.write.Number(6, y, Double.valueOf(df.format(Double.valueOf(tbl.getValueAt(i, 6).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(6, y, ""));
                }
                if (tbl.getValueAt(i, 7) != "") {
                    hoja1.addCell(new jxl.write.Number(7, y, Double.valueOf(df.format(Double.valueOf(tbl.getValueAt(i, 7).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(7, y, ""));
                }
                if (tbl.getValueAt(i, 8) != "") {
                    hoja1.addCell(new jxl.write.Number(8, y, Double.valueOf(df.format(Double.valueOf(tbl.getValueAt(i, 8).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(8, y, ""));
                }
                if (tbl.getValueAt(i, 9) != "") {
                    hoja1.addCell(new jxl.write.Number(9, y, Double.valueOf(df.format(Double.valueOf(tbl.getValueAt(i, 9).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(9, y, ""));
                }
                if (tbl.getValueAt(i, 10) != "") {
                    hoja1.addCell(new jxl.write.Number(10, y, Double.valueOf(df.format(Double.valueOf(tbl.getValueAt(i, 10).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(10, y, ""));
                }
                if (tbl.getValueAt(i, 11) != "") {
                    hoja1.addCell(new jxl.write.Number(11, y, Double.valueOf(df.format(Double.valueOf(tbl.getValueAt(i, 11).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(11, y, ""));
                }
                if (tbl.getValueAt(i, 12) != "") {
                    hoja1.addCell(new jxl.write.Number(12, y, Double.valueOf(df.format(Double.valueOf(tbl.getValueAt(i, 12).toString().replace(",", "."))).replace(",", "."))));
                } else {
                    hoja1.addCell(new jxl.write.Label(12, y, ""));
                }
                y += 1;
            }
        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error configurando Excel");
        }
        try {
            libro.write();
            libro.close();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 528");
        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 529");
        }
        JOptionPane.showMessageDialog(this, "Excel creado correctamente");
    }
}
