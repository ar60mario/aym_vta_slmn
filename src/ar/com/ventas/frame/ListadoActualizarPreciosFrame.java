/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Configuracion;
import ar.com.ventas.entities.Producto;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ConfiguracionService;
import ar.com.ventas.services.ProductoService;
import ar.com.ventas.util.PDFBuilder;
import com.itextpdf.text.DocumentException;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Mario
 */
public class ListadoActualizarPreciosFrame extends javax.swing.JFrame {

    private List<Producto> productos;
    private DecimalFormat df = new DecimalFormat("#0.00");

    /**
     * Creates new form ListadoActualizarPreciosFrame
     */
    public ListadoActualizarPreciosFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        webRb.setSelected(true);
        gondolaRb.setSelected(false);
        listaRb.setSelected(false);
        pdfBtn.setVisible(false);
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        excelBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        webRb = new javax.swing.JRadioButton();
        gondolaRb = new javax.swing.JRadioButton();
        listaRb = new javax.swing.JRadioButton();
        pdfBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("LISTADO PARA ACTUALIZAR PRECIOS");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descripción", "Precio Venta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(30);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(300);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(30);
        }

        excelBtn.setText("Excel");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        webRb.setText("Precios Web");
        webRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webRbActionPerformed(evt);
            }
        });

        gondolaRb.setText("Precios Góndola");
        gondolaRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gondolaRbActionPerformed(evt);
            }
        });

        listaRb.setText("Lista de Precios");
        listaRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaRbActionPerformed(evt);
            }
        });

        pdfBtn.setText("PDF");
        pdfBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pdfBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(webRb)
                        .addGap(18, 18, 18)
                        .addComponent(gondolaRb)
                        .addGap(18, 18, 18)
                        .addComponent(listaRb)
                        .addGap(18, 18, 18)
                        .addComponent(excelBtn)
                        .addGap(18, 18, 18)
                        .addComponent(pdfBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(excelBtn)
                    .addComponent(volverBtn)
                    .addComponent(webRb)
                    .addComponent(gondolaRb)
                    .addComponent(listaRb)
                    .addComponent(pdfBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void webRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webRbActionPerformed
        webRb.setSelected(true);
        gondolaRb.setSelected(false);
        listaRb.setSelected(false);
        pdfBtn.setVisible(false);
        llenarTabla();
    }//GEN-LAST:event_webRbActionPerformed

    private void gondolaRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gondolaRbActionPerformed
        webRb.setSelected(false);
        gondolaRb.setSelected(true);
        listaRb.setSelected(false);
        pdfBtn.setVisible(true);
        llenarTabla();
    }//GEN-LAST:event_gondolaRbActionPerformed

    private void listaRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaRbActionPerformed
        webRb.setSelected(false);
        gondolaRb.setSelected(false);
        listaRb.setSelected(true);
        pdfBtn.setVisible(false);
        llenarTabla();
    }//GEN-LAST:event_listaRbActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    private void pdfBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pdfBtnActionPerformed
        pdf();
    }//GEN-LAST:event_pdfBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListadoActualizarPreciosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListadoActualizarPreciosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListadoActualizarPreciosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListadoActualizarPreciosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListadoActualizarPreciosFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton excelBtn;
    private javax.swing.JRadioButton gondolaRb;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton listaRb;
    private javax.swing.JButton pdfBtn;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    private javax.swing.JRadioButton webRb;
    // End of variables declaration//GEN-END:variables

    private void llenarTabla() {
        limpiarTabla();
        productos = null;
        if (webRb.isSelected()) {
            try {
                productos = new ProductoService().getProductosParaWeb();
            } catch (Exception ex) {
                Logger.getLogger(ListadoActualizarPreciosFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
        if (gondolaRb.isSelected()) {
            try {
                productos = new ProductoService().getProductosParaGondola();
            } catch (Exception ex) {
                Logger.getLogger(ListadoActualizarPreciosFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
        if (listaRb.isSelected()) {
            try {
                productos = new ProductoService().getProductosParaLista();
            } catch (Exception ex) {
                Logger.getLogger(ListadoActualizarPreciosFrame.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }
        if (productos != null && !productos.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            Configuracion conf = null;
            try {
                conf = new ConfiguracionService().getFacturas(1L);
            } catch (Exception ex) {
                Logger.getLogger(ListadoActualizarPreciosFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            Float iva = 21F;
            if (conf != null) {
                iva = conf.getIva();
            }
            for (Producto p : productos) {
                Object o[] = new Object[3];
                Double precio = p.getPrecio() * (1 + iva / 100);
                precio += p.getImpuesto();
                o[0] = p.getCodigo();
                o[1] = p.getDetalle();
                o[2] = df.format(precio);
                tbl.addRow(o);
            }
            tabla.setModel(tbl);
        }
    }

    private void limpiarTabla() {
        int rows = tabla.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void pdf() {
        try {
            PDFBuilder.armarEtiquetas(productos);
            JOptionPane.showMessageDialog(this, "LO ENCUENTRA EN C:/INFORMES/ETIQUETAS_GONDOLA Y FECHA");
        } catch (DocumentException ex) {
            Logger.getLogger(ListadoActualizarPreciosFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ListadoActualizarPreciosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

//        if (productos != null && !productos.isEmpty()) {
//            String rutaArchivo = "";
//            String name2= "yyyyMMddHHmm";
//            SimpleDateFormat sdfN = new SimpleDateFormat(name2);
//            String name3 = sdfN.format(new Date());
//
//                rutaArchivo = "c:/informes/etiquetas_gondola_" + name3 + ".pdf";
//
//            
//        }
        volver();
    }

    private void excel() {
        Configuracion con = null;
        Long lo = 1L;
        try {
            con = new ConfiguracionService().getFacturas(lo);
        } catch (Exception ex) {
            Logger.getLogger(AbmProductoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Float por_iva = con.getIva();
        if (productos != null && !productos.isEmpty()) {
            String rutaArchivo = "";
            String name2 = "yyyyMMddHHmm";
            SimpleDateFormat sdfN = new SimpleDateFormat(name2);
            String name3 = sdfN.format(new Date());
            if (webRb.isSelected()) {
                rutaArchivo = "c:/informes/listas_WEB_" + name3 + ".xls";
            }
            if (gondolaRb.isSelected()) {
                rutaArchivo = "c:/informes/listas_GONDOLA_" + name3 + ".xls";
            }
            if (listaRb.isSelected()) {
                rutaArchivo = "c:/informes/listas_LISTA_" + name3 + ".xls";
            }
            File archivo = new File(rutaArchivo);
            if (archivo.exists()) {
                archivo.delete();
            }
            try {
                archivo.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            WritableWorkbook libro = null;
            try {
                libro = Workbook.createWorkbook(archivo);
            } catch (IOException ex) {
                Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            WritableSheet hoja1 = libro.createSheet("PRODUCTOS", 0);
            try {
                hoja1.addCell(new jxl.write.Label(0, 0, "Distribuidora A&M - PRODUCTOS ACTIVOS"));
                hoja1.addCell(new jxl.write.Label(0, 1, "Codigo"));
                hoja1.addCell(new jxl.write.Label(1, 1, "Barras"));
                hoja1.addCell(new jxl.write.Label(2, 1, "Descripcion"));
                hoja1.addCell(new jxl.write.Label(3, 1, "Rubro"));
                hoja1.addCell(new jxl.write.Label(4, 1, "Subrubro"));
//                hoja1.addCell(new jxl.write.Label(5, 1, "Caja/Unidad"));
//                hoja1.addCell(new jxl.write.Label(6, 1, "Cantidad caja"));
                hoja1.addCell(new jxl.write.Label(5, 1, "Precio Venta"));
                int y = 2;
                for (Producto p : productos) {
                    hoja1.addCell(new jxl.write.Label(0, y, p.getCodigo().toString()));
                    if (p.getCodigoBarras() != null) {
                        hoja1.addCell(new jxl.write.Label(1, y, p.getCodigoBarras().toString()));
                    }
                    hoja1.addCell(new jxl.write.Label(2, y, p.getDetalle()));
                    hoja1.addCell(new jxl.write.Label(3, y, p.getRubro().getNombre()));
                    hoja1.addCell(new jxl.write.Label(4, y, p.getSubRubro().getDetalle()));
                    por_iva = 21F;
                    int r = 0;
                    if (p.getIvaProducto() != null) {
                        r = p.getIvaProducto();
                        if (r == 1) {
                            por_iva = 0F;
                        } else {
                            if (r == 2) {
                                por_iva = 10.5F;
                            } else {
                                if (r == 3) {
                                    por_iva = 21F;
                                } else {

                                    por_iva = 21F;
                                }
                            }
                        }
                    }
                    Double precio_producto = (p.getPrecio() * (1 + por_iva / 100)) + p.getImpuesto();
                    String pp = df.format(precio_producto);
                    Double precio_prod = Double.valueOf(pp.replace(",", "."));
                    hoja1.addCell(new jxl.write.Number(5, y, (precio_prod)));
                    if (webRb.isSelected()) {
                        p.setActualizarWeb(false);
                    }
                    if (gondolaRb.isSelected()) {
                        p.setActualizarGondola(false);
                    }
                    if (listaRb.isSelected()) {
                        p.setActualizarListaPrecios(false);
                    }
                    try {
                        new ProductoService().updateProducto(p);
                    } catch (Exception ex) {
                        Logger.getLogger(ListadoActualizarPreciosFrame.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(this, "NO SE TERMINO DE GENERAR EXCEL");
                        return;
                    }
                    y += 1;
                }
                y += 2;
            } catch (WriteException ex) {
                Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error configurando Excel");
            }
            try {
                libro.write();
                libro.close();
            } catch (IOException ex) {
                Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 415");
            } catch (WriteException ex) {
                Logger.getLogger(VerIvaVentasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error: 416");
            }
            JOptionPane.showMessageDialog(this, "Excel creado correctamente");
            JOptionPane.showMessageDialog(this, "BUSCARLO EN c:/informes/listas_TIPO Y FECHA.xls");
            llenarTabla();
        }
    }
}
