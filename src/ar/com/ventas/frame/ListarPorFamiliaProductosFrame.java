/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ActivityRow;
import ar.com.ventas.entities.FamiliaProducto;
import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.RenglonFactura;
import ar.com.ventas.entities.RenglonNotaCredito;
import ar.com.ventas.entities.Rental;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ActivityRowService;
import ar.com.ventas.services.ProductoService;
import ar.com.ventas.services.RenglonFacturaService;
import ar.com.ventas.services.RenglonNotaCreditoService;
import ar.com.ventas.services.RentalService;
import java.awt.print.PrinterException;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Mario
 */
public class ListarPorFamiliaProductosFrame extends javax.swing.JFrame {

    private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private List<FamiliaProducto> family = new ArrayList<FamiliaProducto>();
    private final DecimalFormat df1 = new DecimalFormat("#0.00");

    /**
     * Creates new form ListarPorFamiliaProductosFrame
     */
    public ListarPorFamiliaProductosFrame() {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        initComponents();
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tablaFamiliaOf = new javax.swing.JScrollPane();
        tablaFamilias = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        volverBtn = new javax.swing.JButton();
        generarBtn = new javax.swing.JButton();
        desdeFechaTxt = new javax.swing.JTextField();
        hastaFechaTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        imprimirBtn = new javax.swing.JButton();
        exportarExcelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("LISTADO POR FAMILIA DE PRODUCTOS ENTRE FECHAS");

        tablaFamilias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Día", "Massalín", "Nobleza", "Cigarrillos", "Tarjetas", "Analgésicos", "Varios", "NoVenta", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaFamiliaOf.setViewportView(tablaFamilias);
        if (tablaFamilias.getColumnModel().getColumnCount() > 0) {
            tablaFamilias.getColumnModel().getColumn(0).setPreferredWidth(30);
        }

        jLabel1.setText("Desde Fecha:");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        generarBtn.setText("Generar");
        generarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarBtnActionPerformed(evt);
            }
        });

        desdeFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        desdeFechaTxt.setText("desdeFe");
        desdeFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                desdeFechaTxtKeyPressed(evt);
            }
        });

        hastaFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hastaFechaTxt.setText("hastaFe");
        hastaFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hastaFechaTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Hasta Fecha:");

        imprimirBtn.setText("Imprimir");
        imprimirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirBtnActionPerformed(evt);
            }
        });

        exportarExcelBtn.setText("Excel");
        exportarExcelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportarExcelBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablaFamiliaOf, javax.swing.GroupLayout.DEFAULT_SIZE, 948, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(generarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(imprimirBtn)
                        .addGap(18, 18, 18)
                        .addComponent(exportarExcelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(volverBtn)
                    .addComponent(generarBtn)
                    .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(imprimirBtn)
                    .addComponent(exportarExcelBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tablaFamiliaOf, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void generarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarBtnActionPerformed
        generarInforme();
    }//GEN-LAST:event_generarBtnActionPerformed

    private void desdeFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_desdeFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (desdeFechaTxt.getText().isEmpty()) {
                desdeFechaTxt.setText(sdf.format(new Date()));
                desdeFechaTxt.requestFocus();
            } else {
                int largo = desdeFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    desdeFechaTxt.setText(desdeFechaTxt.getText() + "/" + f);
                    hastaFechaTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        desdeFechaTxt.setText(desdeFechaTxt.getText() + an);
                        hastaFechaTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            desdeFechaTxt.setText("");
//                          request focus mismo campo
                            desdeFechaTxt.requestFocus();
                        } else {
                            String veinte = desdeFechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                desdeFechaTxt.requestFocus();
                            } else {
                                hastaFechaTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_desdeFechaTxtKeyPressed

    private void hastaFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hastaFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (hastaFechaTxt.getText().isEmpty()) {
                hastaFechaTxt.setText(sdf.format(new Date()));
                hastaFechaTxt.requestFocus();
            } else {
                int largo = hastaFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    hastaFechaTxt.setText(hastaFechaTxt.getText() + "/" + f);
//                    generarInforme();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        hastaFechaTxt.setText(hastaFechaTxt.getText() + an);
//                        generarInforme();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            hastaFechaTxt.setText("");
//                          request focus mismo campo
                            hastaFechaTxt.requestFocus();
                        } else {
                            String veinte = hastaFechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                hastaFechaTxt.requestFocus();
                            } else {
                                generarInforme();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_hastaFechaTxtKeyPressed

    private void exportarExcelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportarExcelBtnActionPerformed
        exportarExcel();
    }//GEN-LAST:event_exportarExcelBtnActionPerformed

    private void imprimirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirBtnActionPerformed
        try {
            tablaFamilias.print();
        } catch (PrinterException ex) {
            Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_imprimirBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListarPorFamiliaProductosFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField desdeFechaTxt;
    private javax.swing.JButton exportarExcelBtn;
    private javax.swing.JButton generarBtn;
    private javax.swing.JTextField hastaFechaTxt;
    private javax.swing.JButton imprimirBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane tablaFamiliaOf;
    private javax.swing.JTable tablaFamilias;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void generarInforme() {
        family = new ArrayList<>();
        DefaultTableModel tbl = (DefaultTableModel) tablaFamilias.getModel();
        int r = tablaFamilias.getRowCount();
        if (r > 0) {
            for (int i = 0; i < r; i++) {
                tbl.removeRow(0);
            }
        }
        Date df;
        Date hf;
        try {
            df = sdf.parse(desdeFechaTxt.getText());
            hf = sdf.parse(hastaFechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Verifique error en fechas");
            return;
        }
        List<RenglonFactura> rengFact = null;
        try {
            rengFact = new RenglonFacturaService().getRenglonesFcByFechas(df, hf);
        } catch (Exception ex) {
            Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (rengFact != null && !rengFact.isEmpty()) {
            Double massalin = 0.0;
            Double nobleza = 0.0;
            Double cigarrillos = 0.0;
            Double tarjetas = 0.0;
            Double analgesicos = 0.0;
            Double noVenta = 0.0;
            Double varios = 0.0;
            Double totales = 0.00;
            Date f1 = rengFact.get(0).getIvaVentas().getFecha();
            for (RenglonFactura rf : rengFact) {
                Date f2 = rf.getIvaVentas().getFecha();
                if (f2.equals(f1)) {
                    Integer rub = rf.getProducto().getRubro().getCodigo();
                    totales += rf.getTotal();
                    if (rub.equals(1)) {
                        massalin += rf.getTotal();
                    } else {
                        if (rub.equals(2)) {
                            nobleza += rf.getTotal();
                        } else {
                            if (rub.equals(3)) {
                                cigarrillos += rf.getTotal();
                            } else {
                                if (rub.equals(4)) {
                                    tarjetas += rf.getTotal();
                                } else {
                                    Integer sub = rf.getProducto().getSubRubro().getCodigo();
                                    if (rub.equals(5)) {
                                        if (sub.equals(5099)) {
                                            noVenta += rf.getTotal();
                                        } else {
                                            varios += rf.getTotal();
                                        }
                                    } else {
                                        analgesicos += rf.getTotal();
                                    }
                                }
                            }
                        }
                    }
                } else {
                    FamiliaProducto fp = new FamiliaProducto();
                    fp.setAnalgesicos(analgesicos);
                    fp.setCigarrillos(cigarrillos);
                    fp.setFecha(f1);
                    fp.setMassalin(massalin);
                    fp.setNobleza(nobleza);
                    fp.setTarjetas(tarjetas);
                    fp.setTotal(totales);
                    fp.setNoVenta(noVenta);
                    fp.setVarios(varios);
                    family.add(fp);
                    massalin = 0.0;
                    nobleza = 0.0;
                    cigarrillos = 0.0;
                    tarjetas = 0.0;
                    analgesicos = 0.0;
                    varios = 0.0;
                    totales = 0.00;
                    noVenta = 0.0;
                    f1 = f2;
                    Integer rub = rf.getProducto().getRubro().getCodigo();
                    totales += rf.getTotal();
                    if (rub.equals(1)) {
                        massalin += rf.getTotal();
                    } else {
                        if (rub.equals(2)) {
                            nobleza += rf.getTotal();
                        } else {
                            if (rub.equals(3)) {
                                cigarrillos += rf.getTotal();
                            } else {
                                if (rub.equals(4)) {
                                    tarjetas += rf.getTotal();
                                } else {
                                    Integer sub = rf.getProducto().getSubRubro().getCodigo();
                                    if (rub.equals(5)) {
                                        if (sub.equals(5099)) {
                                            noVenta += rf.getTotal();
                                        } else {
                                            varios += rf.getTotal();
                                        }
                                    } else {
                                        analgesicos += rf.getTotal();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            FamiliaProducto fp = new FamiliaProducto();
            fp.setAnalgesicos(analgesicos);
            fp.setCigarrillos(cigarrillos);
            fp.setFecha(f1);
            fp.setMassalin(massalin);
            fp.setNobleza(nobleza);
            fp.setTarjetas(tarjetas);
            fp.setTotal(totales);
            fp.setNoVenta(noVenta);
            fp.setVarios(varios);
            family.add(fp);
        }
        List<ActivityRow> actRw = null;
        try {
            actRw = new ActivityRowService().getRowByFecha(df, hf);
        } catch (Exception ex) {
//            Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (actRw != null && !actRw.isEmpty()) {
            Double massalin = 0.0;
            Double nobleza = 0.0;
            Double cigarrillos = 0.0;
            Double tarjetas = 0.0;
            Double analgesicos = 0.0;
            Double varios = 0.0;
            Double noVenta = 0.0;
            Double totales = 0.00;
            Date f1 = actRw.get(0).getActivity().getFecha();
            for (ActivityRow ar : actRw) {
                Date f2 = ar.getActivity().getFecha();
                if (f2.equals(f1)) {
                    int cod = ar.getCodigoProducto();
                    Producto p = null;
                    try {
                        p = new ProductoService().getAllProductoByCodigo(cod);
                    } catch (Exception ex) {
//                        Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
//                        return;
                    }
                    Integer rub = p.getRubro().getCodigo();
                    totales += ar.getTotal();
                    if (rub.equals(1)) {
                        massalin += ar.getTotal();
                    } else {
                        if (rub.equals(2)) {
                            nobleza += ar.getTotal();
                        } else {
                            if (rub.equals(3)) {
                                cigarrillos += ar.getTotal();
                            } else {
                                if (rub.equals(4)) {
                                    tarjetas += ar.getTotal();
                                } else {
                                    Integer sub = p.getSubRubro().getCodigo();
                                    if (rub.equals(5)) {
                                        if (sub.equals(5099)) {
                                            noVenta +=ar.getTotal();
                                        } else {
                                            varios += ar.getTotal();
                                        }
                                    } else {
                                        analgesicos += ar.getTotal();
                                    }
                                }
                            }
                        }
                    }
                } else {
                    FamiliaProducto fp = new FamiliaProducto();
                    fp.setAnalgesicos(analgesicos);
                    fp.setCigarrillos(cigarrillos);
                    fp.setFecha(f1);
                    fp.setMassalin(massalin);
                    fp.setNobleza(nobleza);
                    fp.setTarjetas(tarjetas);
                    fp.setTotal(totales);
                    fp.setNoVenta(noVenta);
                    fp.setVarios(varios);
                    family.add(fp);
                    massalin = 0.0;
                    nobleza = 0.0;
                    cigarrillos = 0.0;
                    tarjetas = 0.0;
                    analgesicos = 0.0;
                    varios = 0.0;
                    noVenta = 0.0;
                    totales = 0.00;
                    f1 = f2;
                    int cod = ar.getCodigoProducto();
                    Producto p = null;
                    try {
                        p = new ProductoService().getAllProductoByCodigo(cod);
                    } catch (Exception ex) {
                        Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Integer rub = p.getRubro().getCodigo();
                    totales += ar.getTotal();
                    if (rub.equals(1)) {
                        massalin += ar.getTotal();
                    } else {
                        if (rub.equals(2)) {
                            nobleza += ar.getTotal();
                        } else {
                            if (rub.equals(3)) {
                                cigarrillos += ar.getTotal();
                            } else {
                                if (rub.equals(4)) {
                                    tarjetas += ar.getTotal();
                                } else {
                                    Integer sub = p.getSubRubro().getCodigo();
                                    if (rub.equals(5)) {
                                        if (sub.equals(5099)) {
                                            noVenta +=ar.getTotal();
                                        } else {
                                            varios += ar.getTotal();
                                        }
                                    } else {
                                        analgesicos += ar.getTotal();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            FamiliaProducto fp = new FamiliaProducto();
            fp.setAnalgesicos(analgesicos);
            fp.setCigarrillos(cigarrillos);
            fp.setFecha(f1);
            fp.setMassalin(massalin);
            fp.setNobleza(nobleza);
            fp.setNoVenta(noVenta);
            fp.setTarjetas(tarjetas);
            fp.setTotal(totales);
            fp.setVarios(varios);
            family.add(fp);
        }
        List<RenglonNotaCredito> renglo = null;
        //System.exit(0);
        try {
            renglo = new RenglonNotaCreditoService().getRenglonesNCByFechas(df, hf);
        } catch (Exception ex) {
            Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (renglo != null && !renglo.isEmpty()) {
            Double massalin = 0.0;
            Double nobleza = 0.0;
            Double cigarrillos = 0.0;
            Double tarjetas = 0.0;
            Double analgesicos = 0.0;
            Double varios = 0.0;
            Double noVenta = 0.0;
            Double totales = 0.00;
            Date f1 = renglo.get(0).getIvaVentas().getFecha();
            for (RenglonNotaCredito rf : renglo) {
                Date f2 = rf.getIvaVentas().getFecha();
                if (f2.equals(f1)) {
                    Integer rub = rf.getProducto().getRubro().getCodigo();
                    totales += rf.getTotal();
                    if (rub.equals(1)) {
                        massalin += rf.getTotal();
                    } else {
                        if (rub.equals(2)) {
                            nobleza += rf.getTotal();
                        } else {
                            if (rub.equals(3)) {
                                cigarrillos += rf.getTotal();
                            } else {
                                if (rub.equals(4)) {
                                    tarjetas += rf.getTotal();
                                } else {
                                    Integer sub = rf.getProducto().getSubRubro().getCodigo();
                                    if (rub.equals(5)) {
                                        if (sub.equals(5099)) {
                                            noVenta +=rf.getTotal();
                                        } else {
                                            varios += rf.getTotal();
                                        }
                                    } else {
                                        analgesicos += rf.getTotal();
                                    }
                                }
                            }
                        }
                    }
                } else {
                    FamiliaProducto fp = new FamiliaProducto();
                    fp.setAnalgesicos(analgesicos);
                    fp.setCigarrillos(cigarrillos);
                    fp.setFecha(f1);
                    fp.setMassalin(massalin);
                    fp.setNobleza(nobleza);
                    fp.setNoVenta(noVenta);
                    fp.setTarjetas(tarjetas);
                    fp.setTotal(totales);
                    fp.setVarios(varios);
                    family.add(fp);
                    massalin = 0.0;
                    nobleza = 0.0;
                    noVenta = 0.0;
                    cigarrillos = 0.0;
                    tarjetas = 0.0;
                    analgesicos = 0.0;
                    varios = 0.0;
                    totales = 0.00;
                    f1 = f2;
                    Integer rub = rf.getProducto().getRubro().getCodigo();
                    totales += rf.getTotal();
                    if (rub.equals(2)) {
                        massalin += rf.getTotal();
                    } else {
                        if (rub.equals(2)) {
                            nobleza += rf.getTotal();
                        } else {
                            if (rub.equals(3)) {
                                cigarrillos += rf.getTotal();
                            } else {
                                if (rub.equals(4)) {
                                    tarjetas += rf.getTotal();
                                } else {
                                    Integer sub = rf.getProducto().getSubRubro().getCodigo();
                                    if (rub.equals(5)) {
                                        if (sub.equals(5099)) {
                                            noVenta +=rf.getTotal();
                                        } else {
                                            varios += rf.getTotal();
                                        }
                                    } else {
                                        analgesicos += rf.getTotal();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            FamiliaProducto fp = new FamiliaProducto();
            fp.setAnalgesicos(analgesicos);
            fp.setCigarrillos(cigarrillos);
            fp.setFecha(f1);
            fp.setMassalin(massalin);
            fp.setNobleza(nobleza);
            fp.setNoVenta(noVenta);
            fp.setTarjetas(tarjetas);
            fp.setTotal(totales);
            fp.setVarios(varios);
            family.add(fp);
        }
        List<Rental> rental = null;
        try {
            rental = new RentalService().getRenglonesDevolByFechas(df, hf);
        } catch (Exception ex) {
            Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (rental != null && !rental.isEmpty()) {
            Double massalin = 0.0;
            Double nobleza = 0.0;
            Double cigarrillos = 0.0;
            Double tarjetas = 0.0;
            Double analgesicos = 0.0;
            Double varios = 0.0;
            Double noVenta = 0.0;
            Double totales = 0.00;
            Date f1 = rental.get(0).getActivity().getFecha();
            for (Rental ar : rental) {
                Date f2 = ar.getActivity().getFecha();
                if (f2.equals(f1)) {
                    int cod = ar.getCodigoProducto();
                    Producto p = null;
                    try {
                        p = new ProductoService().getAllProductoByCodigo(cod);
                    } catch (Exception ex) {
                        Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Integer rub = p.getRubro().getCodigo();
                    totales += ar.getTotal();
                    if (rub.equals(1)) {
                        massalin += ar.getTotal();
                    } else {
                        if (rub.equals(2)) {
                            nobleza += ar.getTotal();
                        } else {
                            if (rub.equals(3)) {
                                cigarrillos += ar.getTotal();
                            } else {
                                if (rub.equals(4)) {
                                    tarjetas += ar.getTotal();
                                } else {
                                    Integer sub = p.getSubRubro().getCodigo();
                                    if (rub.equals(5)) {
                                        if (sub.equals(5099)) {
                                            noVenta +=ar.getTotal();
                                        } else {
                                            varios += ar.getTotal();
                                        }
                                    } else {
                                        analgesicos += ar.getTotal();
                                    }
                                }
                            }
                        }
                    }
                } else {
                    FamiliaProducto fp = new FamiliaProducto();
                    fp.setAnalgesicos(analgesicos);
                    fp.setCigarrillos(cigarrillos);
                    fp.setFecha(f1);
                    fp.setMassalin(massalin);
                    fp.setNobleza(nobleza);
                    fp.setNoVenta(noVenta);
                    fp.setTarjetas(tarjetas);
                    fp.setTotal(totales);
                    fp.setVarios(varios);
                    family.add(fp);
                    massalin = 0.0;
                    nobleza = 0.0;
                    noVenta = 0.0;
                    cigarrillos = 0.0;
                    tarjetas = 0.0;
                    analgesicos = 0.0;
                    varios = 0.0;
                    totales = 0.00;
                    f1 = f2;
                    int cod = ar.getCodigoProducto();
                    Producto p = null;
                    try {
                        p = new ProductoService().getAllProductoByCodigo(cod);
                    } catch (Exception ex) {
                        Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Integer rub = p.getRubro().getCodigo();
                    totales += ar.getTotal();
                    if (rub.equals(1)) {
                        massalin += ar.getTotal();
                    } else {
                        if (rub.equals(2)) {
                            nobleza += ar.getTotal();
                        } else {
                            if (rub.equals(3)) {
                                cigarrillos += ar.getTotal();
                            } else {
                                if (rub.equals(4)) {
                                    tarjetas += ar.getTotal();
                                } else {
                                    Integer sub = p.getSubRubro().getCodigo();
                                    if (rub.equals(5)) {
                                        if (sub.equals(5099)) {
                                            noVenta +=ar.getTotal();
                                        } else {
                                            varios += ar.getTotal();
                                        }
                                    } else {
                                        analgesicos += ar.getTotal();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            FamiliaProducto fp = new FamiliaProducto();
            fp.setAnalgesicos(analgesicos);
            fp.setCigarrillos(cigarrillos);
            fp.setFecha(f1);
            fp.setMassalin(massalin);
            fp.setNobleza(nobleza);
            fp.setNoVenta(noVenta);
            fp.setTarjetas(tarjetas);
            fp.setTotal(totales);
            fp.setVarios(varios);
            family.add(fp);
        }
        Collections.sort(family);
        tbl = (DefaultTableModel) tablaFamilias.getModel();
        Date d = family.get(0).getFecha();
        Double massalin = 0.0;
        Double nobleza = 0.0;
        Double cigarrillos = 0.0;
        Double tarjetas = 0.0;
        Double analgesicos = 0.0;
        Double varios = 0.0;
        Double noVenta = 0.0;
        Double totales = 0.00;
//        int fin = 0;
        for (FamiliaProducto fa : family) {
            Date b = fa.getFecha();
            if (d.equals(b)) {
                massalin += fa.getMassalin();
                nobleza += fa.getNobleza();
                cigarrillos += fa.getCigarrillos();
                tarjetas += fa.getTarjetas();
                analgesicos += fa.getAnalgesicos();
                varios += fa.getVarios();
                noVenta += fa.getNoVenta();
                totales += fa.getTotal();
//                fin = 1;
            } else {
                Object ob[] = new Object[9];
                ob[0] = sdf.format(d);
                ob[1] = df1.format(massalin);
                ob[2] = df1.format(nobleza);
                ob[3] = df1.format(cigarrillos);
                ob[4] = df1.format(tarjetas);
                ob[5] = df1.format(analgesicos);
                ob[6] = df1.format(varios);
                ob[7] = df1.format(noVenta);
                ob[8] = df1.format(totales);
                tbl.addRow(ob);
                d = b;
                massalin = 0.00;
                nobleza = 0.00;
                cigarrillos = 0.00;
                tarjetas = 0.00;
                analgesicos = 0.00;
                varios = 0.00;
                noVenta = 0.0;
                totales = 0.00;
//                fin = 0;
                massalin += fa.getMassalin();
                nobleza += fa.getNobleza();
                cigarrillos += fa.getCigarrillos();
                tarjetas += fa.getTarjetas();
                analgesicos += fa.getAnalgesicos();
                varios += fa.getVarios();
                noVenta += fa.getNoVenta();
                totales += fa.getTotal();
//                fin = 1;
            }
        }
//        if (fin == 1) {
            Object ob[] = new Object[9];
            ob[0] = sdf.format(d);
            ob[1] = df1.format(massalin);
            ob[2] = df1.format(nobleza);
            ob[3] = df1.format(cigarrillos);
            ob[4] = df1.format(tarjetas);
            ob[5] = df1.format(analgesicos);
            ob[6] = df1.format(varios);
            ob[7] = df1.format(noVenta);
            ob[8] = df1.format(totales);
            tbl.addRow(ob);
//        }
        tablaFamilias.setModel(tbl);
    }

    private void limpiarCampos() {
        Date hoy = new Date();
        desdeFechaTxt.setText(sdf.format(hoy));
        hastaFechaTxt.setText(sdf.format(hoy));
    }

    private void exportarExcel() {
        String rutaArchivo = "c:/exceliva/ventasxfamilia.xls";
        File archivo = new File(rutaArchivo);
        if (archivo.exists()) {
            archivo.delete();
        }
        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableWorkbook libro = null;
        try {
            libro = Workbook.createWorkbook(archivo);
        } catch (IOException ex) {
            Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        WritableSheet hoja1 = libro.createSheet("VentasXfamilia", 0);
        try {
            hoja1.addCell(new jxl.write.Label(0, 0, "Distribuidora A&M - Listado Ventas Por Familia"));
            hoja1.addCell(new jxl.write.Label(0, 1, "Dia"));
            hoja1.addCell(new jxl.write.Label(1, 1, "Massalin"));
            hoja1.addCell(new jxl.write.Label(2, 1, "Nobleza"));
            hoja1.addCell(new jxl.write.Label(3, 1, "Cigarrillos"));
            hoja1.addCell(new jxl.write.Label(4, 1, "Tarjetas"));
            hoja1.addCell(new jxl.write.Label(5, 1, "Analgésicos"));
            hoja1.addCell(new jxl.write.Label(6, 1, "Varios"));
            hoja1.addCell(new jxl.write.Label(7, 1, "No Venta"));
            hoja1.addCell(new jxl.write.Label(8, 1, "Total"));
            DefaultTableModel tbl = (DefaultTableModel) tablaFamilias.getModel();
            int y = 2;
            int rows = tablaFamilias.getRowCount();
            for (int i = 0; i < rows; i++) {
                hoja1.addCell(new jxl.write.Label(0, y, tbl.getValueAt(i, 0).toString()));
                hoja1.addCell(new jxl.write.Label(1, y, tbl.getValueAt(i, 1).toString()));
                hoja1.addCell(new jxl.write.Label(2, y, tbl.getValueAt(i, 2).toString()));
                hoja1.addCell(new jxl.write.Label(3, y, tbl.getValueAt(i, 3).toString()));
                hoja1.addCell(new jxl.write.Label(4, y, tbl.getValueAt(i, 4).toString()));
                hoja1.addCell(new jxl.write.Label(5, y, tbl.getValueAt(i, 5).toString()));
                hoja1.addCell(new jxl.write.Label(6, y, tbl.getValueAt(i, 6).toString()));
                hoja1.addCell(new jxl.write.Label(7, y, tbl.getValueAt(i, 7).toString()));
                hoja1.addCell(new jxl.write.Label(8, y, tbl.getValueAt(i, 8).toString()));
                y += 1;
            }
        } catch (WriteException ex) {
            Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error configurando Excel");
        }
        try {
            libro.write();
            libro.close();
        } catch (IOException ex) {
            Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 987");
        } catch (WriteException ex) {
            Logger.getLogger(ListarPorFamiliaProductosFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 988");
        }
        JOptionPane.showMessageDialog(this, "Excel creado correctamente");
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }
}
