/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ActivityRow;
import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.RenglonFactura;
import ar.com.ventas.entities.RenglonNotaCredito;
import ar.com.ventas.entities.Rental;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ActivityRowService;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.ProductoService;
import ar.com.ventas.services.RenglonFacturaService;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class CantidadVentaPeriodoFrame extends javax.swing.JFrame {

    private Producto producto;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat dec = new DecimalFormat("#0");
    private List<RenglonFactura> renglonesB = null;
    private List<RenglonNotaCredito> renglonesBC = null;
    private List<Rental> renglonesND = null;
    private List<ActivityRow> renglonesN = null;
    private List<Producto> productos = null;

    /**
     * Creates new form CantidadVentaPeriodoFrame
     */
    public CantidadVentaPeriodoFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        codigoTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        nombreTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        filtroTxt = new javax.swing.JTextField();
        combo = new javax.swing.JComboBox<>();
        volverBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        deTxt = new javax.swing.JTextField();
        alTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("STOCK ENTRE FECHAS");

        jLabel1.setText("Código:");

        codigoTxt.setText("CODIGO");
        codigoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Descripción:");

        nombreTxt.setText("NOMBRE");

        jLabel3.setText("Buscar x Nombre:");

        filtroTxt.setText("FILTRO");
        filtroTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filtroTxtKeyPressed(evt);
            }
        });

        combo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                comboKeyPressed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Desde:");

        jLabel5.setText("Hasta:");

        deTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deTxt.setText("DE");
        deTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deTxtKeyPressed(evt);
            }
        });

        alTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alTxt.setText("AL");
        alTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                alTxtKeyPressed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Cliente", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(189, 189, 189)
                                        .addComponent(jLabel3))
                                    .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(96, 96, 96)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(volverBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 72, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(volverBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(deTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void codigoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (codigoTxt.getText().isEmpty()) {
                filtroTxt.requestFocus();
            } else {
                String cod = codigoTxt.getText();
                Integer c = Integer.valueOf(cod);
                producto = null;
                try {
                    producto = new ProductoService().getAllProductoByCodigo(c);
                } catch (Exception ex) {
                    Logger.getLogger(CantidadVentaPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (producto != null) {
                    nombreTxt.setText(producto.getDetalle());
                    deTxt.requestFocus();
                }
            }
        }
    }//GEN-LAST:event_codigoTxtKeyPressed

    private void filtroTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (filtroTxt.getText().isEmpty()) {
                codigoTxt.requestFocus();
            } else {
                combo.removeAllItems();
                combo.addItem("");
                llenarCombo();
                combo.requestFocus();
                combo.addFocusListener(null);
                combo.showPopup();
            }
        }
    }//GEN-LAST:event_filtroTxtKeyPressed

    private void deTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (deTxt.getText().isEmpty()) {
                deTxt.setText(sdf.format(new Date()));
            } else {
                int l = deTxt.getText().length();
                if (l == 10) {
                    String y = deTxt.getText().substring(6, 8);
                    if (y.equals("20")) {
                        alTxt.requestFocus();
                    } else {
                        JOptionPane.showMessageDialog(this, "Error en fecha DE");
                        deTxt.requestFocus();
                    }
                } else {
                    int largo = deTxt.getText().length();
                    if (largo == 2) {
                        Calendar cal = Calendar.getInstance();
                        int mes = cal.get(Calendar.MONTH) + 1;
                        int anio = cal.get(Calendar.YEAR);
                        String an = String.valueOf(anio);
                        String f = "0" + String.valueOf(mes);
                        if (f.length() > 2) {
                            f = f.substring(1, 3);
                        }
                        f = f + "/" + an;
                        deTxt.setText(deTxt.getText() + "/" + f);
                        alTxt.requestFocus(); // request focus prox campo
                    } else {
                        if (largo == 5) {
                            Calendar cal = Calendar.getInstance();
                            int anio = cal.get(Calendar.YEAR);
                            String an = "/" + String.valueOf(anio);
                            deTxt.setText(deTxt.getText() + an);
                            alTxt.requestFocus(); // request focus prox campo
                        } else {
                            if (largo == 8) {
                                String x_f = deTxt.getText();
                                String x_f1 = x_f.substring(0, 6);
                                String x_f2 = x_f.substring(6, 8);
                                deTxt.setText(x_f1 + "20" + x_f2);
                                alTxt.requestFocus(); // request focus prox campo
                            } else {
                                if (largo != 10) {
                                    JOptionPane.showMessageDialog(this, "Error en fecha");
                                    deTxt.setText("");
                                    deTxt.requestFocus(); // request focus mismo campo
                                } else {
                                    String veinte = deTxt.getText().substring(6, 8);
                                    if (!veinte.equals("20")) {
                                        JOptionPane.showMessageDialog(this, "Error en AÑO");
                                        deTxt.requestFocus(); // request focus mismo campo
                                    } else {
                                        deTxt.requestFocus(); // request focus prox campo
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_deTxtKeyPressed

    private void alTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (alTxt.getText().isEmpty()) {
                alTxt.setText(sdf.format(new Date()));
            } else {
                int l = deTxt.getText().length();
                if (l == 10) {
                    String y = deTxt.getText().substring(6, 8);
                    if (y.equals("20")) {
                        buscar();
                    } else {
                        JOptionPane.showMessageDialog(this, "Error en fecha AL");
                        alTxt.requestFocus();
                    }
                } else {
                    int largo = alTxt.getText().length();
                    if (largo == 2) {
                        Calendar cal = Calendar.getInstance();
                        int mes = cal.get(Calendar.MONTH) + 1;
                        int anio = cal.get(Calendar.YEAR);
                        String an = String.valueOf(anio);
                        String f = "0" + String.valueOf(mes);
                        if (f.length() > 2) {
                            f = f.substring(1, 3);
                        }
                        f = f + "/" + an;
                        alTxt.setText(alTxt.getText() + "/" + f);
                        buscar(); // request focus prox campo
                    } else {
                        if (largo == 5) {
                            Calendar cal = Calendar.getInstance();
                            int anio = cal.get(Calendar.YEAR);
                            String an = "/" + String.valueOf(anio);
                            alTxt.setText(alTxt.getText() + an);
                            buscar(); // request focus prox campo
                        } else {
                            if (largo == 8) {
                                String x_f = alTxt.getText();
                                String x_f1 = x_f.substring(0, 6);
                                String x_f2 = x_f.substring(6, 8);
                                alTxt.setText(x_f1 + "20" + x_f2);
                                buscar(); // request focus prox campo
                            } else {
                                if (largo != 10) {
                                    JOptionPane.showMessageDialog(this, "Error en fecha");
                                    alTxt.setText("");
                                    alTxt.requestFocus(); // request focus mismo campo
                                } else {
                                    String veinte = alTxt.getText().substring(6, 8);
                                    if (!veinte.equals("20")) {
                                        JOptionPane.showMessageDialog(this, "Error en AÑO");
                                        alTxt.requestFocus(); // request focus mismo campo
                                    } else {
                                        buscar(); // request focus prox campo
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_alTxtKeyPressed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void comboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_comboKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (combo.getSelectedIndex() > 0) {
                filtroTxt.setText("");
                filtroTxt.setEnabled(false);
                try {
                    Integer seleccion = combo.getSelectedIndex();
                    producto = productos.get(seleccion - 1);
                    codigoTxt.setText(String.valueOf(producto.getCodigo()));
                    String cod = codigoTxt.getText();
                    Integer c = Integer.valueOf(cod);
                    producto = null;
                    try {
                        producto = new ProductoService().getAllProductoByCodigo(c);
                    } catch (Exception ex) {
                        Logger.getLogger(CantidadVentaPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (producto != null) {
                        nombreTxt.setText(producto.getDetalle());
                        deTxt.requestFocus();
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Error - buscar producto");
                    Logger.getLogger(FacturaFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_comboKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CantidadVentaPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CantidadVentaPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CantidadVentaPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CantidadVentaPeriodoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CantidadVentaPeriodoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alTxt;
    private javax.swing.JTextField codigoTxt;
    private javax.swing.JComboBox<String> combo;
    private javax.swing.JTextField deTxt;
    private javax.swing.JTextField filtroTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nombreTxt;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        codigoTxt.setText("");
        nombreTxt.setText("");
        filtroTxt.setText("");
        deTxt.setText("");
        alTxt.setText("");
        combo.removeAllItems();
        combo.addItem("");
    }

    private void buscar() {
        limpiarTabla();
        Double total = 0.00;
        Date df = new Date();
        try {
            df = sdf.parse(deTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CantidadVentaPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Date af = new Date();
        try {
            af = sdf.parse(alTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CantidadVentaPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        renglonesB = null;
        try {
            renglonesB = new RenglonFacturaService().getRenglonesFcByFechas(df, af);
        } catch (Exception ex) {
            Logger.getLogger(CantidadVentaPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        renglonesN = null;
        try {
            renglonesN = new ActivityRowService().getRowByFecha(df, af);
        } catch (Exception ex) {
            Logger.getLogger(CantidadVentaPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        if (renglonesB != null && !renglonesB.isEmpty()) {
            for (RenglonFactura r : renglonesB) {
                if (r.getProducto().getId().equals(producto.getId())) {
                    Object ob[] = new Object[3];
                    ob[0] = sdf.format(r.getIvaVentas().getFecha());
                    ob[1] = r.getIvaVentas().getCliente().getRazonSocial();
                    ob[2] = dec.format(r.getCantidad());
                    total += r.getCantidad();
                    tbl.addRow(ob);
                }
            }
        }
        if (renglonesN != null && !renglonesN.isEmpty()) {
            for (ActivityRow a : renglonesN) {
                Integer co = a.getCodigoProducto();
                if (co.equals(producto.getCodigo())) {
                    Object ob[] = new Object[3];
                    ob[0] = sdf.format(a.getActivity().getFecha());
                    String codi = a.getActivity().getCustomer().getCodigo();
                    Cliente cli = null;
                    try {
                        cli = new ClienteService().getClienteByCodigo(codi);
                    } catch (Exception ex) {
                        Logger.getLogger(CantidadVentaPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    ob[1] = cli.getRazonSocial();
                    ob[2] = dec.format(a.getCantidad());
                    total += a.getCantidad();
                    tbl.addRow(ob);
                }
            }
        }
        Object o[] = new Object[3];
        o[1] = "TOTAL";
        o[2] = dec.format(total);
        tbl.addRow(o);
        tabla.setModel(tbl);
    }

    private void limpiarTabla() {
        int rows = tabla.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void llenarCombo() {
        String filtro = filtroTxt.getText();
        productos = new ArrayList<Producto>();
        try {
            productos = new ProductoService().getProductosByFiltroActivos(filtro);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error - leyendo Productos");
            Logger.getLogger(FacturaFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        DefaultComboBoxModel model = (DefaultComboBoxModel) combo.getModel();
        if (productos != null && !productos.isEmpty()) {
            for (Producto pro : productos) {
                model.addElement(pro.getDetalle());
            }
            combo.setModel(model);
        }
    }
}
