/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.Usuario;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ProductoService;
import ar.com.ventas.services.UsuarioService;
import ar.com.ventas.util.LectorDeExcel;
import java.io.File;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class AbmStockFrame extends javax.swing.JFrame {

    private List<Producto> productos = null;
    private Usuario usuario;
    private final Integer nivel = 1;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private String fil;
    private Boolean nombre;

    /**
     * Creates new form AbmStockFrame
     */
    public AbmStockFrame(Usuario u, String f, Boolean nombre) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        xNombreRb.setSelected(true);
        xCodigoRb.setSelected(false);
        filtroTxt.setText("");
        this.usuario = u;
        this.fil = f;
        this.nombre = nombre;
        if (usuario != null) {
            llenarTabla2();
        } else {
            if (xNombreRb.isSelected()) {
                this.nombre = true;
            } else {
                this.nombre = false;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        filtroTxt = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        establecerBtn = new javax.swing.JButton();
        xNombreRb = new javax.swing.JRadioButton();
        xCodigoRb = new javax.swing.JRadioButton();
        ingresoFcBtn = new javax.swing.JButton();
        egresoFcBtn = new javax.swing.JButton();
        importarStockBtn = new javax.swing.JButton();
        egresoInternoBtn = new javax.swing.JButton();
        ingresoInternoBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("STOCK DE PRODUCTOS");

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Detalle", "Stock Actual", "Stock Mínimo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        jLabel1.setText("Filtro:");

        filtroTxt.setText("FILTRO");
        filtroTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filtroTxtKeyPressed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        establecerBtn.setText("Establecer");
        establecerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                establecerBtnActionPerformed(evt);
            }
        });

        xNombreRb.setText("X Nombre");
        xNombreRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xNombreRbActionPerformed(evt);
            }
        });

        xCodigoRb.setText("X Código");
        xCodigoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xCodigoRbActionPerformed(evt);
            }
        });

        ingresoFcBtn.setText("Ing.X Fc.");
        ingresoFcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresoFcBtnActionPerformed(evt);
            }
        });

        egresoFcBtn.setText("Egr.X Cpbte.");
        egresoFcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                egresoFcBtnActionPerformed(evt);
            }
        });

        importarStockBtn.setText("Importar Stock");
        importarStockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importarStockBtnActionPerformed(evt);
            }
        });

        egresoInternoBtn.setText("Egreso Interno");
        egresoInternoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                egresoInternoBtnActionPerformed(evt);
            }
        });

        ingresoInternoBtn.setText("Ingreso Interno");
        ingresoInternoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingresoInternoBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 806, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(xNombreRb)
                                .addGap(18, 18, 18)
                                .addComponent(xCodigoRb)
                                .addGap(18, 18, 18)
                                .addComponent(importarStockBtn)
                                .addGap(18, 18, 18)
                                .addComponent(ingresoFcBtn)
                                .addGap(18, 18, 18)
                                .addComponent(egresoFcBtn))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(filtroTxt)
                                .addGap(18, 18, 18)
                                .addComponent(buscarBtn)
                                .addGap(18, 18, 18)
                                .addComponent(ingresoInternoBtn)
                                .addGap(18, 18, 18)
                                .addComponent(egresoInternoBtn)
                                .addGap(18, 18, 18)
                                .addComponent(establecerBtn)
                                .addGap(18, 18, 18)
                                .addComponent(volverBtn)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(jLabel1)
                    .addComponent(filtroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarBtn)
                    .addComponent(establecerBtn)
                    .addComponent(egresoInternoBtn)
                    .addComponent(ingresoInternoBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xNombreRb)
                    .addComponent(xCodigoRb)
                    .addComponent(importarStockBtn)
                    .addComponent(egresoFcBtn)
                    .addComponent(ingresoFcBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        buscar();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void establecerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_establecerBtnActionPerformed
        if (usuario == null) {
            usuario = habilitado();
        }
        if (usuario != null) {
            establecer();
        }
    }//GEN-LAST:event_establecerBtnActionPerformed

    private void filtroTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            buscar();
        }
    }//GEN-LAST:event_filtroTxtKeyPressed

    private void xNombreRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xNombreRbActionPerformed
        xNombreRb.setSelected(true);
        nombre = true;
        xCodigoRb.setSelected(false);
    }//GEN-LAST:event_xNombreRbActionPerformed

    private void xCodigoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xCodigoRbActionPerformed
        xNombreRb.setSelected(false);
        nombre = false;
        xCodigoRb.setSelected(true);
    }//GEN-LAST:event_xCodigoRbActionPerformed

    private void ingresoFcBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresoFcBtnActionPerformed
        if (usuario == null) {
            usuario = habilitado();
        }
        if (usuario != null) {
            stockPorFactura(usuario);
        }
    }//GEN-LAST:event_ingresoFcBtnActionPerformed

    private void egresoFcBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_egresoFcBtnActionPerformed
        if (usuario == null) {
            usuario = habilitado();
        }
        if (usuario != null) {
            egresoPorFactura(usuario);
        }
    }//GEN-LAST:event_egresoFcBtnActionPerformed

    private void importarStockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importarStockBtnActionPerformed
        if (usuario == null) {
            usuario = habilitado();
        }
        if (usuario != null) {
            importarStock(usuario);
        }
    }//GEN-LAST:event_importarStockBtnActionPerformed

    private void ingresoInternoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingresoInternoBtnActionPerformed
        if (usuario == null) {
            usuario = habilitado();
        }
        if (usuario != null) {
            ingresoInterno();
        }
    }//GEN-LAST:event_ingresoInternoBtnActionPerformed

    private void egresoInternoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_egresoInternoBtnActionPerformed
        if (usuario == null) {
            usuario = habilitado();
        }
        if (usuario != null) {
            egresoInterno();
        }
    }//GEN-LAST:event_egresoInternoBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AbmStockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AbmStockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AbmStockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AbmStockFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AbmStockFrame(null, null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarBtn;
    private javax.swing.JButton egresoFcBtn;
    private javax.swing.JButton egresoInternoBtn;
    private javax.swing.JButton establecerBtn;
    private javax.swing.JTextField filtroTxt;
    private javax.swing.JButton importarStockBtn;
    private javax.swing.JButton ingresoFcBtn;
    private javax.swing.JButton ingresoInternoBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    private javax.swing.JRadioButton xCodigoRb;
    private javax.swing.JRadioButton xNombreRb;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void buscar() {
        fil = filtroTxt.getText();
        llenarTabla();
    }

    private void establecer() {
        int r = tabla.getSelectedRow();
        if (r < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Producto");
            return;
        }
        Producto p = productos.get(r);
        EstablecerStockFrame isf = new EstablecerStockFrame(p, usuario, fil, nombre);
        isf.setVisible(true);
        this.dispose();
    }

    private void llenarTabla() {
        limpiarTabla();
        productos = null;
        if (filtroTxt.getText().isEmpty()) {
            try {
                if (xNombreRb.isSelected()) {
                    productos = new ProductoService().getProductosActivosByNombre();
                } else {
                    productos = new ProductoService().getProductosActivosByCodigo();
                }
            } catch (Exception ex) {
                Logger.getLogger(AbmStockFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            String filtro = filtroTxt.getText();
            try {
                if (xNombreRb.isSelected()) {
                    productos = new ProductoService().getProductosActivosByFiltroDetalle(filtro);
                } else {
                    productos = new ProductoService().getProductosActivosByFiltroNumerico(filtro);
                }
            } catch (Exception ex) {
                Logger.getLogger(AbmStockFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (productos != null && !productos.isEmpty()) {
            DecimalFormat df = new DecimalFormat("#0.0");
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (Producto p : productos) {
                Object ob[] = new Object[4];
                ob[0] = p.getCodigo();
                ob[1] = p.getDetalle();
                if (p.getStock() != null) {
                    ob[2] = df.format(p.getStock());
                } else {
                    ob[2] = df.format(0.0);
                }
                if (p.getStockMinimo() != null) {
                    ob[3] = df.format(p.getStockMinimo());
                } else {
                    ob[3] = df.format(0.0);
                }
                tbl.addRow(ob);
            }
            tabla.setModel(tbl);
        }
    }

    private void limpiarTabla() {
        int rows = tabla.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }

    private void stockPorFactura(Usuario u) {
        IngresarStockConFacturaFrame isf = new IngresarStockConFacturaFrame(u, fil, nombre);
        isf.setVisible(true);
        this.dispose();
    }

    private void egresoPorFactura(Usuario u) {
        EgresoStockConFacturaFrame escff = new EgresoStockConFacturaFrame(u, fil, nombre);
        escff.setVisible(true);
        this.dispose();
    }

    private Usuario habilitado() {
        usuario = null;
        JTextField field = new JTextField("");
        String[] options = {"Ingresar"};
        int result = JOptionPane.showOptionDialog(
                null,
                field,
                "Autorización de USUARIO",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                0);
        if (field.getText().isEmpty()) {
            usuario = null;
            return usuario;
        }
        switch (result) {
            case 0:
                int cod = Integer.valueOf(field.getText());
                try {
                    usuario = new UsuarioService().getUsuarioByCodigo(cod);
                } catch (Exception ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (usuario != null) {
                    if (usuario.getActivo()) {
                        JPasswordField field2 = new JPasswordField("");
                        String[] opts = {"Ingresar"};
                        int resulta = JOptionPane.showOptionDialog(
                                null,
                                field2,
                                "CONTRASEÑA: " + usuario.getNombre() + ", Autorización",
                                JOptionPane.OK_CANCEL_OPTION,
                                JOptionPane.QUESTION_MESSAGE,
                                null,
                                opts,
                                0);
                        switch (resulta) {
                            case 0:
                                int contra = Integer.valueOf(new String(field2.getPassword()));
                                if (contra == usuario.getContrasena()) {
                                    if (usuario.getNivel() > nivel) {
                                        JOptionPane.showMessageDialog(this, "Usuario no Habilitado");
                                        usuario = null;
                                    } else {
                                        String f1 = sdf.format(usuario.getFecha());
                                        String f2 = sdf.format(new Date());
                                        if (usuario.getNivel() == 2) {
                                            if (!f1.equals(f2)) {
                                                JOptionPane.showMessageDialog(this, "Permiso de Usuario Vencido");
                                                usuario = null;
                                            }
                                        }
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "Contraseña incorrecta");
                                    usuario = null;
                                }
                                break;
                            case -1:
                                usuario = null;
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "USUARIO Inactivo");
                        usuario = null;
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No existe el Usuario");
                    usuario = null;
                }
                break;
        }
        return usuario;
    }

    private void importarStock(Usuario u) {
        seleccionarArchivoImportar(u);
    }

    private void seleccionarArchivoImportar(Usuario u) {
        JFileChooser selector = new JFileChooser();
        selector.showOpenDialog(this);
        File archivo = selector.getSelectedFile();
        if (archivo != null) {
            if (LectorDeExcel.validarExtension(archivo)) {
                ImportarStockFrame inf = new ImportarStockFrame(archivo, u, "", true);
                inf.setVisible(true);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "El formato elegido no está soportado.",
                        "Atencion",
                        JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    private void llenarTabla2() {
        filtroTxt.setText(fil);
        if (nombre) {
            xNombreRb.setSelected(true);
            xCodigoRb.setSelected(false);
        } else {
            xNombreRb.setSelected(false);
            xCodigoRb.setSelected(true);
        }
        buscar();
    }

    private void ingresoInterno() {
        int r = tabla.getSelectedRow();
        if (r < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Producto");
            return;
        }
        Producto p = productos.get(r);
        IngresarStockFrame esf = new IngresarStockFrame(p, usuario, fil, nombre);
        esf.setVisible(true);
        this.dispose();
    }

    private void egresoInterno() {
        int r = tabla.getSelectedRow();
        if (r < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Producto");
            return;
        }
        Producto p = productos.get(r);
        EgresoStockFrame esf = new EgresoStockFrame(p, usuario, fil, nombre);
        esf.setVisible(true);
        this.dispose();
    }
}
