/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.Configuracion;
import ar.com.ventas.entities.Pedido;
import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.RenglonPedido;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.ConfiguracionService;
import ar.com.ventas.services.RenglonPedidoService;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import static java.lang.Math.rint;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class VerPedidoFrame extends javax.swing.JFrame {

    public List<RenglonPedido> renglonPedido = new ArrayList<RenglonPedido>();
    private Pedido pedido;
    private String textoPedidoPapel;
    private String fechaPedidoPapel;
    private String clientePedidoPapel;
    private String codigoClientePedidoPapel;
    private String direccionPedidoPapel;
    private String cuitPedidoPapel;
    //private String condicionVentaPedidoPapel;
    private String vencimientoPedidoPapel;
    private String inscripcionClientePedidoPapel;
    private String nombresColumnaPedidoPapel;
    private String[] renglones = null;
    private String texto1PedidoPapel;
    private String texto2PedidoPapel;
    private String texto3PedidoPapel;
    private String totalDeudaPedidoPapel;
    private String lineaTotalesPedidoPapel;
    private String totalPagarPedidoPapel;
    private String importeTotalPedidoPapel;
    private String cantidadesPedidoPapel;
    private Date fecha;
    private SimpleDateFormat sdf;
    private Cliente clientePedido = null;
    private Producto producto = null;
    //private DefaultTableModel tabla = null;
    private Double totalPedido = 0.00;
    private Double totalImpuesto = 0.00;
    private Double totalIva = 0.00;
    private Double totalGravado = 0.00;
    //private Double totalGravadoCigarrillos = 0.00;
    private Double totalNoGravado = 0.0;
    //private Double gravado = 0.00;
    private Double noGravado = 0.00;
    private Float descuento = 0F;
    //private Double iva = 0.00;
    private Float porcentualIva;
    private Double impuesto = null;
    private Double totalLinea = 0.00;
    private Boolean tieneDto = false;
    private Cliente clienteSeleccionado;
    private Producto productoSeleccionado;
    private Float cantidad;
    private Integer categoriaIva = 1;
    private DecimalFormat df = new DecimalFormat("#0.00");
    private DecimalFormat df1 = new DecimalFormat("#0");
    private DecimalFormat df2 = new DecimalFormat("#0.0");
    private Double saldoCliente = 0.00;
    private String filtro = "";
    private String letraPedido;
    private Integer numeroPedido;
    private Configuracion config = null;
    private Double precioFinal = 0.0;
    private Integer nro = 0;
    private Integer maxNro = 40;
    private Integer cantidadAtadosMassalin;
    private Integer cantidadAtadosNobleza;
    public Boolean encontrado;
    private Cliente cl;
    private Double totalDescuento = 0.0;
    private Double gravadoVarios = 0.00;
    private Double totalGravadoCompleto = 0.0;

    /**
     * Creates new form PedidoFrame
     *
     * @param pedido
     */
    public VerPedidoFrame(Pedido pedido, Cliente cl) {
        getContentPane().setBackground(new java.awt.Color(192, 192, 192));
        initComponents();
        this.setLocationRelativeTo(null);
        this.pedido = pedido;
        this.cl = cl;
        limpiarCampos();
        bloquearCampos();
//      levanto el modelo creado del frame
        //tabla = (DefaultTableModel) tablaPedido.getModel();
        cancelarBtn.setEnabled(true);
        codigoTxt.setText(pedido.getCliente().getCodigo());
        buscar();
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPedido = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        codigoTxt = new javax.swing.JTextField();
        razonSocialTxt = new javax.swing.JTextField();
        fechaTxt = new javax.swing.JTextField();
        ivaTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        totalTxt = new javax.swing.JTextField();
        terminarBtn = new javax.swing.JButton();
        cancelarBtn = new javax.swing.JButton();
        descuentoGlobalLbl = new javax.swing.JLabel();
        descuentoGlobalTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        descuentoVolumenTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        totalDeudaTxt = new javax.swing.JTextField();
        texto1PiePedidoTxt = new javax.swing.JTextField();
        texto2PiePedidoTxt = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        cantidadAtadosMassalinTxt = new javax.swing.JTextField();
        cantidadAtadosNoblezaTxt = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        cantidadItemsTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        totalMassalinTxt = new javax.swing.JTextField();
        totalNoblezaTxt = new javax.swing.JTextField();
        cuitTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        numeroPedidoTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("A Y M . PEDIDO");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tablaPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CÃ³digo", "Cant", "Detalle", "P.Unit", "Gravado", "Impuesto", "IVA", "dto.", "SubTotal", "Sug."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaPedido);
        if (tablaPedido.getColumnModel().getColumnCount() > 0) {
            tablaPedido.getColumnModel().getColumn(0).setPreferredWidth(30);
            tablaPedido.getColumnModel().getColumn(1).setPreferredWidth(10);
            tablaPedido.getColumnModel().getColumn(2).setPreferredWidth(330);
            tablaPedido.getColumnModel().getColumn(3).setPreferredWidth(20);
            tablaPedido.getColumnModel().getColumn(4).setPreferredWidth(25);
            tablaPedido.getColumnModel().getColumn(5).setPreferredWidth(25);
            tablaPedido.getColumnModel().getColumn(6).setPreferredWidth(25);
            tablaPedido.getColumnModel().getColumn(7).setPreferredWidth(20);
            tablaPedido.getColumnModel().getColumn(8).setPreferredWidth(30);
            tablaPedido.getColumnModel().getColumn(9).setPreferredWidth(20);
        }

        jLabel1.setText("Cliente:");

        jLabel2.setText("Iva:");

        jLabel4.setText("Fecha:");

        codigoTxt.setText("CODIGO");
        codigoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoTxtKeyPressed(evt);
            }
        });

        razonSocialTxt.setText("RAZON SOCIAL");

        fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaTxt.setText("FECHA");

        ivaTxt.setText("IVA");

        jLabel8.setText("TOTAL PEDIDO:");

        totalTxt.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        totalTxt.setForeground(new java.awt.Color(255, 0, 0));
        totalTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalTxt.setText("TOTAL");

        terminarBtn.setText("Terminar Pedido");
        terminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terminarBtnActionPerformed(evt);
            }
        });

        cancelarBtn.setText("Cancelar Pedido");
        cancelarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarBtnActionPerformed(evt);
            }
        });

        descuentoGlobalLbl.setText("Desc.:");

        descuentoGlobalTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        descuentoGlobalTxt.setText("DESC");

        jLabel12.setText("Descuento");

        descuentoVolumenTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        descuentoVolumenTxt.setText("DESCEUNTO");

        jLabel13.setText("Total Deuda:");

        totalDeudaTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        totalDeudaTxt.setForeground(new java.awt.Color(51, 0, 204));
        totalDeudaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalDeudaTxt.setText("TOTAL DEUDA");

        texto1PiePedidoTxt.setText("TEXTO 1 PIE PEDIDO");

        texto2PiePedidoTxt.setText("TEXTO 2 PIE PEDIDO");

        jLabel15.setText("Massalin:");

        jLabel17.setText("Nobleza:");

        cantidadAtadosMassalinTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cantidadAtadosMassalinTxt.setText("Cant Mass");

        cantidadAtadosNoblezaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cantidadAtadosNoblezaTxt.setText("Cant Nobl");

        jLabel18.setText("Cant. Items:");

        cantidadItemsTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cantidadItemsTxt.setText("Cantidad Items");

        jLabel9.setText("Importe:");

        jLabel10.setText("Importe:");

        totalMassalinTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalMassalinTxt.setText("IMP.MASS.");

        totalNoblezaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalNoblezaTxt.setText("IMP.NOBL.");

        cuitTxt.setText("CUIT");

        jLabel11.setText("NÃºmero Pedido:");

        numeroPedidoTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numeroPedidoTxt.setText("NUM");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(texto2PiePedidoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 676, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cantidadAtadosMassalinTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalMassalinTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cantidadAtadosNoblezaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(cancelarBtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(terminarBtn))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(totalNoblezaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(totalDeudaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel18))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(cantidadItemsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(totalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(texto1PiePedidoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 676, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(descuentoVolumenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ivaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel11))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(87, 87, 87)
                                        .addComponent(razonSocialTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cuitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(descuentoGlobalLbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(descuentoGlobalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(numeroPedidoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 968, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(codigoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(razonSocialTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descuentoGlobalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descuentoGlobalLbl)
                    .addComponent(cuitTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ivaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(numeroPedidoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(descuentoVolumenTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(texto1PiePedidoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(totalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(texto2PiePedidoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(cantidadItemsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(cantidadAtadosMassalinTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(totalMassalinTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(cantidadAtadosNoblezaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(totalNoblezaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalDeudaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(cancelarBtn)
                    .addComponent(terminarBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarBtnActionPerformed
        int escape = JOptionPane.showConfirmDialog(null, "Esta seguro de abandonar el Pedido?", "AtenciÃ³n", JOptionPane.YES_NO_OPTION);
        // 0 = si; 1 = no
        if (escape == 0) {
            abandonarPedido();
        } else {
            terminarBtn.setEnabled(true);
            tablaPedido.setEnabled(true);
        }
    }//GEN-LAST:event_cancelarBtnActionPerformed

    private void terminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terminarBtnActionPerformed
        int escape = JOptionPane.showConfirmDialog(null, "Confirma Imprimir?",
                "IMPRESION",
                JOptionPane.YES_NO_OPTION);
        if (escape == 0) {
//            texto1PiePedidoTxt.setEnabled(true);
//            texto2PiePedidoTxt.setEnabled(true);
//            texto1PiePedidoTxt.requestFocus();
            terminarPedido();
        }
    }//GEN-LAST:event_terminarBtnActionPerformed

    private boolean isNumeric(KeyEvent evt) {
        String cod = String.valueOf(evt.getKeyChar());
        try {
            Integer.parseInt(cod);
        } catch (NumberFormatException ex) {
            return false;
        }
        return true;
    }

    private void codigoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (!codigoTxt.getText().isEmpty()) {
                cancelarBtn.setEnabled(true);
                buscar();
            }
        } else {
            if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
                MainFrame mf = new MainFrame();
                mf.setVisible(true);
                this.dispose();
            } else {
                if (evt.getKeyCode() != 8 // back space
                        && evt.getKeyCode() != 37 //flecha izquierda
                        && evt.getKeyCode() != 39 //flecha derecha
                        && evt.getKeyCode() != 17 //Ctrl
                        && evt.getKeyCode() != 16 //Mayuscula
                        && evt.getKeyCode() != 38 //flecha arriba
                        && evt.getKeyCode() != 40 //flecha abajo
                        && evt.getKeyCode() != 67 //C
                        && evt.getKeyCode() != 20 //traba mayusculas
                        && evt.getKeyCode() != 27 //Escape
                        && evt.getKeyCode() != 86 //V
                        && evt.getKeyCode() != 36 //Inicio
                        && evt.getKeyCode() != 35 //fin
                        && evt.getKeyCode() != 155 //Insert
                        // && evt.getKeyCode() != 110  // punto decimal
                        //&& evt.getKeyCode() != 45 // Menos
                        && evt.getKeyCode() != 127) { // Suprimir
                    if (!isNumeric(evt)) {
                        JOptionPane.showMessageDialog(this, "Solo nÃºmeros");
                        codigoTxt.setText("");
                        codigoTxt.requestFocus();
                    }
                }
            }
        }
    }//GEN-LAST:event_codigoTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerPedidoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerPedidoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerPedidoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerPedidoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VerPedidoFrame(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelarBtn;
    private javax.swing.JTextField cantidadAtadosMassalinTxt;
    private javax.swing.JTextField cantidadAtadosNoblezaTxt;
    private javax.swing.JTextField cantidadItemsTxt;
    private javax.swing.JTextField codigoTxt;
    private javax.swing.JTextField cuitTxt;
    private javax.swing.JLabel descuentoGlobalLbl;
    private javax.swing.JTextField descuentoGlobalTxt;
    private javax.swing.JTextField descuentoVolumenTxt;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JTextField ivaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField numeroPedidoTxt;
    private javax.swing.JTextField razonSocialTxt;
    private javax.swing.JTable tablaPedido;
    private javax.swing.JButton terminarBtn;
    private javax.swing.JTextField texto1PiePedidoTxt;
    private javax.swing.JTextField texto2PiePedidoTxt;
    private javax.swing.JTextField totalDeudaTxt;
    private javax.swing.JTextField totalMassalinTxt;
    private javax.swing.JTextField totalNoblezaTxt;
    private javax.swing.JTextField totalTxt;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        texto1PiePedidoTxt.setText("");
        cuitTxt.setText("");
        texto2PiePedidoTxt.setText("");
        cantidadAtadosMassalinTxt.setText("");
        cantidadAtadosNoblezaTxt.setText("");
        ivaTxt.setText("");
        codigoTxt.setText("");
        fechaTxt.setText("");
        razonSocialTxt.setText("");
        totalTxt.setText("");
        totalTxt.setText("0.00");
        descuentoVolumenTxt.setText("0.00");
        totalDeudaTxt.setText("0.00");
        cantidadAtadosMassalin = 0;
        cantidadAtadosNobleza = 0;
        cantidadItemsTxt.setText("");
        descuentoGlobalTxt.setText("");
        totalMassalinTxt.setText("");
        totalNoblezaTxt.setText("");
    }

    private void bloquearCampos() {
        ivaTxt.setEditable(false);
        codigoTxt.setEnabled(true);
        codigoTxt.setEditable(true);
        fechaTxt.setEditable(false);
        razonSocialTxt.setEditable(false);
        totalTxt.setEnabled(false);
        descuentoVolumenTxt.setEnabled(false);
        totalDeudaTxt.setEnabled(false);
        cancelarBtn.setEnabled(false);
        if (nro > 0) {
            terminarBtn.setEnabled(true);
        } else {
            terminarBtn.setEnabled(false);
        }
        cantidadItemsTxt.setEnabled(false);
        texto1PiePedidoTxt.setEnabled(false);
        texto2PiePedidoTxt.setEnabled(false);
        cantidadAtadosMassalinTxt.setEditable(false);
        cantidadAtadosNoblezaTxt.setEditable(false);
        descuentoGlobalTxt.setEditable(false);
        totalMassalinTxt.setEditable(false);
        totalNoblezaTxt.setEditable(false);
    }

    private void buscar() {
        filtro = "";
        Long id = (long) 1;
        try {
            Configuracion conf = new ConfiguracionService().getFacturas(id);
            porcentualIva = conf.getIva();
        } catch (Exception ex) {
            Logger.getLogger(VerPedidoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        sdf = new SimpleDateFormat("dd/MM/yyyy");
        fecha = Calendar.getInstance().getTime();
        //Cliente cli = new Cliente();
        categoriaIva = 4;
        try {
            clientePedido = new ClienteService().getClienteByCodigo(codigoTxt.getText());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error - cliente");
            Logger.getLogger(VerPedidoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (clientePedido != null) {
            razonSocialTxt.setText(clientePedido.getRazonSocial());
            cuitTxt.setText(clientePedido.getCuit());
            fechaTxt.setText(sdf.format(pedido.getFecha()));
            if (clientePedido.getCategoriaDeIva() != null) {
                if (clientePedido.getCategoriaDeIva() == 1) {
                    ivaTxt.setText("Resp. Inscripto");
                }
                if (clientePedido.getCategoriaDeIva() == 2) {
                    ivaTxt.setText("Monotributo");
                }
                if (clientePedido.getCategoriaDeIva() == 4) {
                    ivaTxt.setText("Consumidor Final");
                }
                categoriaIva = clientePedido.getCategoriaDeIva();
            } else {
                ivaTxt.setText("Consumidor Final");
            }
            if (clientePedido.getDescuento() != null) {
                descuentoGlobalTxt.setText(df2.format(clientePedido.getDescuento()));
                descuento = clientePedido.getDescuento();
            } else {
                descuentoGlobalTxt.setText(df2.format(0));
                descuento = 0F;
            }
            Boolean terminar = false;
            codigoTxt.setEditable(false);
            descuentoVolumenTxt.setEnabled(true);
            descuentoVolumenTxt.setEditable(false);
            totalTxt.setEnabled(true);
            totalTxt.setEditable(false);
            totalDeudaTxt.setEnabled(true);
            totalDeudaTxt.setEditable(false);
            cancelarBtn.setEnabled(true);
        }
    }

    private void terminarPedido() {
        Integer categoriaIva = 0;
        Pedido pedido = new Pedido();

//        System.out.println(totalGravado);
//        System.out.println(totalIva);
//        System.out.println(totalImpuesto);
//        System.out.println(totalPedido);
//        System.exit(0);
        categoriaIva = clientePedido.getCategoriaDeIva();
        saldoCliente = clientePedido.getSaldo();
        Long id = (long) 1;
        try {
            config = new ConfiguracionService().getFacturas(id);
        } catch (Exception ex) {
            Logger.getLogger(VerPedidoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (categoriaIva.equals(1)) {
            letraPedido = "A";
            // es inscriptp
            numeroPedido = config.getNumeroPedido();
            numeroPedido += 1;
            config.setNumeroPedido(numeroPedido);
//            try {
//                new ConfiguracionService().updateConfiguracion(config);
//            } catch (Exception ex) {
//                Logger.getLogger(VerPedidoFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
        } else {
            letraPedido = "B";
            // el resto de las categorias
            numeroPedido = config.getNumeroPedido();
            numeroPedido += 1;
            config.setNumeroPedido(numeroPedido);
//            try {
//                new ConfiguracionService().updateConfiguracion(config);
//            } catch (Exception ex) {
//                Logger.getLogger(VerPedidoFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
        }
//        pedido.setCliente(clientePedido);
//        pedido.setDescuentoGlobal(0.0);
//        pedido.setExento(0.0);
//        pedido.setFecha(fecha);
//        pedido.setGravado(totalGravado);
//        pedido.setImpuesto(totalImpuesto);
//        pedido.setIva(totalIva);
//        pedido.setNoGravado(0.0);
//        pedido.setTotal(totalPedido);
//        pedido.setLetra(letraPedido);
//        pedido.setNumeroPedido(numeroPedido);
//        pedido.setFacturado(false);
//        pedido.setTextoPiePedido1(texto1PiePedidoTxt.getText());
//        pedido.setTextoPiePedido2(texto2PiePedidoTxt.getText());
//        for (RenglonPedido rePe : renglonPedido) {
//            rePe.setPedido(pedido);
//            Integer cod = rePe.getProducto().getCodigo();
//            try {
//                producto = new ProductoService().getProductoByCodigo(cod);
//            } catch (Exception ex) {
//                Logger.getLogger(VerPedidoFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            rePe.setProducto(producto);
//        }
//        try {
//            //new PedidoService().savePedidoCompleto(pedido, renglonPedido);
//        } catch (Exception ex) {
//            Logger.getLogger(VerPedidoFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
        generarPedido();
        ReimpresionDocumentoPorClienteFrame rdpcf = new ReimpresionDocumentoPorClienteFrame(cl);
        rdpcf.setVisible(true);
        this.dispose();
    }

    private void generarPedido() {
        renglones = new String[maxNro];
        textoPedidoPapel = "PEDIDO WEB";
        fechaPedidoPapel = sdf.format(fecha);
        clientePedidoPapel = razonSocialTxt.getText();
        codigoClientePedidoPapel = clientePedido.getCodigo();
        direccionPedidoPapel = clientePedido.getDomicilio().getCalle() + " " + clientePedido.getDomicilio().getNumero() + " - " + clientePedido.getDomicilio().getLocalidad();
        cuitPedidoPapel = clientePedido.getCuit();
        String condVta = "";
        Date fechaVto = fecha;
        Calendar cal = new GregorianCalendar();
        cal.setTime(fecha);
        condVta = "                      ";
        //condicionVentaPedidoPapel = condVta;
        vencimientoPedidoPapel = sdf.format(fechaVto);
        String catego = "";
        if (clientePedido.getCategoriaDeIva().equals(1)) {
            catego = "Responsable Inscripto       ";
        }
        if (clientePedido.getCategoriaDeIva().equals(2)) {
            catego = "Monotributo                 ";
        }
        if (clientePedido.getCategoriaDeIva().equals(3)) {
            catego = "Exento                      ";
        }
        if (clientePedido.getCategoriaDeIva().equals(4)) {
            catego = "Consumidor Final            ";
        }
        inscripcionClientePedidoPapel = catego;
        if (categoriaIva != 1) {
            //                                    1         2         3         4         5         6         7         8         9        10
            //                           1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
            nombresColumnaPedidoPapel = "  IT  CANT                   DETALLE                  P.UNIT.    DESC.   IMPORTE       IMP.     TOTAL     SUG";
        } else {
            nombresColumnaPedidoPapel = "  IT  CANT                   DETALLE                 P.UNIT.    DESC.   GRAVADO      IVA       IMP.     TOTAL     SUG";
        }
        DecimalFormat df = new DecimalFormat("#0.00");
        int maxTabla = tablaPedido.getRowCount();
        for (int r = 0; r < maxNro; r++) {
            if (r < maxTabla) {
                String str0 = String.valueOf(r + 1);
                int largo = str0.length();
                if (largo < 2) {
                    renglones[r] = " " + str0 + " ";
                } else {
                    renglones[r] = str0 + " ";
                }
                str0 = tablaPedido.getValueAt(r, 1).toString();
                largo = str0.length();
                if (largo == 1) {
                    renglones[r] = renglones[r] + "    " + str0;
                }
                if (largo == 2) {
                    renglones[r] = renglones[r] + "   " + str0;
                }
                if (largo == 3) {
                    renglones[r] = renglones[r] + "  " + str0;
                }
                if (largo == 4) {
                    renglones[r] = renglones[r] + " " + str0;
                }
                if (largo == 5) {
                    renglones[r] = renglones[r] + str0;
                }
                if (largo == 6) {
                    renglones[r] = renglones[r] + str0;
                }
                str0 = tablaPedido.getValueAt(r, 2).toString();
                String espacio = " ";
                largo = str0.length();
                if (largo > 40) {
                    str0 = str0.substring(0, 40);
                    tablaPedido.setValueAt(str0, r, 2);
                }
                for (int l = largo; l < 40; l++) {
                    espacio += " ";
                }
                renglones[r] = renglones[r] + " " + tablaPedido.getValueAt(r, 2) + espacio;;
                if (categoriaIva != 1) {
//                  aqui detalle de importes no inscripto en IVA           *****
// Precio Unitario
                    str0 = tablaPedido.getValueAt(r, 3).toString();
                    str0 = str0.replace(",", ".");
                    Double doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Descuento
                    str0 = tablaPedido.getValueAt(r, 7).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "     ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Importe
                    str0 = tablaPedido.getValueAt(r, 4).toString();
                    str0 = str0.replace(",", ".");
                    Double calculo = Double.valueOf(str0);
                    str0 = tablaPedido.getValueAt(r, 6).toString();
                    str0 = str0.replace(",", ".");
                    calculo += Double.valueOf(str0);
                    str0 = String.valueOf(calculo);
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Impuesto
                    str0 = tablaPedido.getValueAt(r, 5).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "       ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
//  Total linea
                    str0 = tablaPedido.getValueAt(r, 8).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Sugerido
                    str0 = tablaPedido.getValueAt(r, 9).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "    ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
                } else {
                    // aqui detalle importes inscripto
// Precio Unitario
                    str0 = tablaPedido.getValueAt(r, 3).toString();
                    str0 = str0.replace(",", ".");
                    Double doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "     ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Descuento
                    str0 = tablaPedido.getValueAt(r, 7).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "     ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Gravado
                    str0 = tablaPedido.getValueAt(r, 4).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Iva
                    str0 = tablaPedido.getValueAt(r, 6).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "     ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Impuesto
                    str0 = tablaPedido.getValueAt(r, 5).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "       ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
//  Total linea
                    str0 = tablaPedido.getValueAt(r, 8).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "      ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble) + " ";
// Sugerido
                    str0 = tablaPedido.getValueAt(r, 9).toString();
                    str0 = str0.replace(",", ".");
                    doble = Double.valueOf(str0);
                    largo = doble.intValue();
                    espacio = "    ";
                    largo = String.valueOf(largo).length();
                    espacio = espacio.substring(largo);
                    renglones[r] = renglones[r] + espacio + df.format(doble);
                }
            } else {
                // agregar renglon en blanco
                renglones[r] = " ";
            }
        }
// Saldo Cliente
        String str0 = String.valueOf(saldoCliente);
        str0 = str0.replace(",", ".");
        Double doble = Double.valueOf(str0);
        int largo = doble.intValue();
        String espacio = "          ";
        largo = String.valueOf(largo).length();
        espacio = espacio.substring(largo);
        totalDeudaPedidoPapel = espacio + df.format(doble);
// Total Pedido
        str0 = String.valueOf(totalPedido);
        str0 = str0.replace(",", ".");
        doble = Double.valueOf(str0);
        largo = doble.intValue();
        espacio = "        ";
        largo = String.valueOf(largo).length();
        espacio = espacio.substring(largo);
        importeTotalPedidoPapel = espacio + df.format(doble);
// Linea Totales
        if (categoriaIva != 1) {
            str0 = String.valueOf(totalImpuesto);
            str0 = str0.replace(",", ".");
            doble = Double.valueOf(str0);
            largo = doble.intValue();
            espacio = "                                                                            ";
            largo = String.valueOf(largo).length();
            espacio = espacio.substring(largo);
            lineaTotalesPedidoPapel = espacio + df.format(doble);
        } else {
            str0 = String.valueOf(totalGravado);
            str0 = str0.replace(",", ".");
            doble = Double.valueOf(str0);
            largo = doble.intValue();
            espacio = "           ";
            largo = String.valueOf(largo).length();
            espacio = espacio.substring(largo);
            lineaTotalesPedidoPapel = espacio + df.format(doble);
            str0 = String.valueOf(totalImpuesto);
            str0 = str0.replace(",", ".");
            doble = Double.valueOf(str0);
            largo = doble.intValue();
            espacio = "           ";
            largo = String.valueOf(largo).length();
            espacio = espacio.substring(largo);
            lineaTotalesPedidoPapel += espacio + df.format(doble);
            str0 = String.valueOf(totalIva);
            str0 = str0.replace(",", ".");
            doble = Double.valueOf(str0);
            largo = doble.intValue();
            espacio = "                                 ";
            largo = String.valueOf(largo).length();
            espacio = espacio.substring(largo);
            lineaTotalesPedidoPapel += espacio + df.format(doble);
        }
// Total a Pagar
        Double totalPagar = saldoCliente;
        str0 = String.valueOf(totalPagar);
        str0 = str0.replace(",", ".");
        doble = Double.valueOf(str0);
        largo = doble.intValue();
        espacio = "          ";
        largo = String.valueOf(largo).length();
        espacio = espacio.substring(largo);
        totalPagarPedidoPapel = espacio + df.format(doble);
// Cantidades atados
        cantidadesPedidoPapel = "                  CANT.ATADOS NOBLEZA: " + String.valueOf(cantidadAtadosNobleza);
        cantidadesPedidoPapel += "                 CANT ATADOS MASSALIN: " + String.valueOf(cantidadAtadosMassalin);
        texto1PedidoPapel = texto1PiePedidoTxt.getText();
        texto2PedidoPapel = texto2PiePedidoTxt.getText();
        texto3PedidoPapel = "-";
        PrinterJob pj = PrinterJob.getPrinterJob();
        PageFormat pf = pj.defaultPage();
        Paper paper = new Paper();
        double margin = 8;
        paper.setImageableArea(margin, margin, paper.getWidth() - margin * 2, paper.getHeight() - margin * 2);
        pf.setPaper(paper);
        pj.setPrintable(new MyPrintable(), pf);
//        if (pj.printDialog()) {
        try {
            pj.print();
        } catch (PrinterException e) {
            System.out.println(e);
        }
//        }
    }

    private void calcularTotales() {
        totalGravado = 0.0;
//        totalGravadoCigarrillos = 0.00;
        totalIva = 0.0;
        totalImpuesto = 0.0;
        totalPedido = 0.0;
        nro = 0;
        cantidadAtadosMassalin = 0;
        cantidadAtadosNobleza = 0;
        Double acumuladoParaDescuentoGlobal = 0.0;
        Double importeTotalMassalin = 0.0;
        Double importeTotalNobleza = 0.0;
        for (RenglonPedido renFa : renglonPedido) {
            //totalPedido += renFa.getTotal();
            if (renFa.getProducto().getRubro().getCodigo().equals(1)) {
                cantidadAtadosMassalin += renFa.getCantidad().intValue();
                importeTotalMassalin += renFa.getTotal();
                totalImpuesto += renFa.getImpuesto();
            }
            if (renFa.getProducto().getRubro().getCodigo().equals(2)) {
                cantidadAtadosNobleza += renFa.getCantidad().intValue();
                importeTotalNobleza += renFa.getTotal();
                totalImpuesto += renFa.getImpuesto();
            }
            if (clientePedido.getCategoriaDeIva().equals(1)) {
//          IVA DISCRIMINADO                
                totalPedido += renFa.getTotal();
                if (renFa.getProducto().getRubro().getCodigo().equals(5)) {
                    acumuladoParaDescuentoGlobal += renFa.getGravado();
                }
            } else {
//          CONSUMIDOR FINAL
                totalPedido += renFa.getTotal();
                if (renFa.getProducto().getRubro().getCodigo().equals(5)) {
                    acumuladoParaDescuentoGlobal += renFa.getTotal();
                }
            }
            nro += 1;
            renFa.setItemNro(nro);
        }
//        String tgcig = df.format(totalGravadoCigarrillos);
//        totalGravadoCigarrillos = Double.valueOf(tgcig.replace(",", "."));
        totalDescuento = acumuladoParaDescuentoGlobal * descuento / 100;
        String td = df.format(totalDescuento);
        descuentoVolumenTxt.setText(td);
        totalDescuento = Double.valueOf(td.replace(",", "."));
        if (clientePedido.getCategoriaDeIva().equals(1)) {
            Double t1 = totalPedido - totalImpuesto;
            totalGravadoCompleto = t1 / (1 + (porcentualIva / 100));
            String tgc = df.format(totalGravadoCompleto);
            totalGravadoCompleto = Double.valueOf(tgc.replace(",", "."));
            totalGravado = totalGravadoCompleto - totalDescuento;
            String tg = df.format(totalGravado);
            totalGravado = Double.valueOf(tg.replace(",", "."));
            totalIva = totalGravado * porcentualIva / 100;
            String ti = df.format(totalIva);
            totalIva = Double.valueOf(ti.replace(",", "."));
            String tim = df.format(totalImpuesto);
            totalImpuesto = Double.valueOf(tim.replace(",", "."));
            totalPedido = totalGravado + totalIva + totalImpuesto;
            String tf = df.format(totalPedido);
            totalPedido = Double.valueOf(tf.replace(",", "."));
//            gravadoVarios = totalGravado - totalGravadoCigarrillos;
            String gv = df.format(gravadoVarios);
            gravadoVarios = Double.valueOf(gv.replace(",", "."));
//            System.out.println("gravado Compl " + totalGravadoCompleto);
//            System.out.println("gravado       " + totalGravado);
//            System.out.println("iva           " + totalIva);
//            System.out.println("impuesto      " + totalImpuesto);
//            System.out.println("descuento     " + totalDescuento);
//            System.out.println("total factura " + totalFactura);
//            System.out.println("grav.cig      " + totalGravadoCigarrillos);
//            System.out.println("grv.vs        " + gravadoVarios);
        } else {
            String tf = df.format(totalPedido - totalDescuento);
            totalPedido = Double.valueOf(tf.replace(",", "."));
            totalTxt.setText(tf);
            String ti = df.format(totalImpuesto);
            totalImpuesto = Double.valueOf(ti.replace(",", "."));
            totalGravado = (totalPedido - totalImpuesto) / (1 + (porcentualIva / 100));
            String tg = df.format(totalGravado);
            totalGravado = Double.valueOf(tg.replace(",", "."));
            totalIva = totalGravado * porcentualIva / 100;
            String tiv = df.format(totalIva);
            totalIva = Double.valueOf(tiv.replace(",", "."));
//            gravadoVarios = totalGravado - totalGravadoCigarrillos;
            String gv = df.format(gravadoVarios);
            gravadoVarios = Double.valueOf(gv.replace(",", "."));
//            System.out.println("gravado       " + totalGravado);
//            System.out.println("iva           " + totalIva);
//            System.out.println("impuesto      " + totalImpuesto);
//            System.out.println("descuento     " + totalDescuento);
//            System.out.println("total factura " + totalFactura);
//            System.out.println("grav.cig      " + totalGravadoCigarrillos);
//            System.out.println("grv.vs        " + gravadoVarios);
        }
//        JOptionPane.showMessageDialog(this, "ver");
        cantidadAtadosNoblezaTxt.setText(String.valueOf(cantidadAtadosNobleza));
        totalNoblezaTxt.setText(String.valueOf(df.format(importeTotalNobleza)));
        cantidadAtadosMassalinTxt.setText(String.valueOf(cantidadAtadosMassalin));
        totalMassalinTxt.setText(String.valueOf(df.format(importeTotalMassalin)));
        cantidadItemsTxt.setText(String.valueOf(nro));
        totalTxt.setText(String.valueOf(df.format(totalPedido)));
//        clientePedido.setImporteMostrador(totalPedido);
        
//        String tg0 = df.format((((totalPedido
//                - totalImpuesto) / (1 + (porcentualIva / 100)))
//                * 100) / 100);
//        totalGravado = Double.valueOf(tg0.replace(",","."));
//        tg0 = df.format((totalGravado
//                * (porcentualIva / 100) * 100) / 100);
//        totalIva = Double.valueOf(tg0.replace(",","."));
//        cantidadAtadosNoblezaTxt.setText(String.valueOf(cantidadAtadosNobleza));
//        totalNoblezaTxt.setText(String.valueOf(df.format(importeTotalNobleza)));
//        cantidadAtadosMassalinTxt.setText(String.valueOf(cantidadAtadosMassalin));
//        totalMassalinTxt.setText(String.valueOf(df.format(importeTotalMassalin)));
//        cantidadItemsTxt.setText(String.valueOf(nro));
//        totalTxt.setText(String.valueOf(df.format(totalPedido)));
//        totalDeudaTxt.setText(df.format(saldoCliente + totalPedido));
    }

    private void abandonarPedido() {
        ReimpresionDocumentoPorClienteFrame rdpcf = new ReimpresionDocumentoPorClienteFrame(cl);
        rdpcf.setVisible(true);
        this.dispose();
    }

    private void calcularLinea(Float cantid, Double precio, Float impuest) {
        precioFinal = rint(((precio
                * (1 + (porcentualIva / 100)))
                + impuest) * 100) / 100;

        // por cantidad
        totalLinea = rint(precioFinal * cantid * 100) / 100;
        impuesto = rint(impuest * cantid * 100) / 100;
        Double calculo = (totalLinea - impuesto)
                / (1 + (porcentualIva / 100));
        //gravado = rint((calculo) * 100) / 100;
        //iva = rint((gravado * porcentualIva
        //        / 100) * 100) / 100;
    }

    private void llenarTabla() {
        texto1PiePedidoTxt.setText(pedido.getTextoPiePedido1());
        texto2PiePedidoTxt.setText(pedido.getTextoPiePedido2());
        numeroPedidoTxt.setText(pedido.getNumeroPedido().toString());
        renglonPedido = null;
        try {
            renglonPedido = new RenglonPedidoService().getAllRenglonPedidoFromPedido(pedido);
        } catch (Exception ex) {
            Logger.getLogger(VerPedidoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (renglonPedido != null && !renglonPedido.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tablaPedido.getModel();
            for (RenglonPedido rp : renglonPedido) {
                Object ob[] = new Object[10];
                ob[0] = rp.getProducto().getCodigo();
                ob[1] = rp.getCantidad();
                ob[2] = rp.getDescripcion();
                ob[3] = df.format(rp.getTotal() / rp.getCantidad());
                ob[4] = df.format(rp.getGravado());
                ob[5] = df.format(rp.getImpuesto());
                ob[6] = df.format(rp.getIva());
                ob[7] = df.format(rp.getDescuento());
                ob[8] = df.format(rp.getTotal());
                ob[9] = df.format(rp.getSugerido());
                tbl.addRow(ob);
            }
            tablaPedido.setModel(tbl);
            calcularTotales();
            terminarBtn.setEnabled(true);
        }
    }

    class MyPrintable implements Printable {

        public int print(Graphics g, PageFormat pf, int pageIndex) {
            if (pageIndex != 0) {
                return NO_SUCH_PAGE;
            }
            Graphics2D g2 = (Graphics2D) g;
            g2.setFont(new Font("Monospaced", Font.PLAIN, 8));
            g2.setPaint(Color.black);
            int row = 45;
            //                1234567890123456789012345678901234567890123456789012345678901234567890
            g2.setFont(new Font("Monospaced", Font.PLAIN, 14));
            String espacio = "                              ";
            g2.drawString(espacio + "X", 30, row);
            g2.setFont(new Font("Monospaced", Font.PLAIN, 8));
            espacio = "                                                         ";
            g2.drawString(espacio + textoPedidoPapel, 30, row);
            row += 25;
            //         123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
            espacio = "                                                                           ";
            g2.drawString(espacio + fechaPedidoPapel, 30, row);
            espacio = "            ";
            row += 50;
            g2.drawString(espacio + clientePedidoPapel, 30, row);
            g2.drawString(codigoClientePedidoPapel, 480, row);
            row += 15;
            espacio = "            ";
            g2.drawString(espacio + direccionPedidoPapel, 30, row);
            row += 15;
            g2.drawString(cuitPedidoPapel, 100, row);
            g2.drawString(inscripcionClientePedidoPapel, 360, row);
            row += 25;
            g2.drawString("Ref.Interna:" + letraPedido + " " + numeroPedido, 150, row);
            //g2.drawString(condicionVentaPedidoPapel, 150, row);
            g2.drawString(vencimientoPedidoPapel, 400, row);
            row += 25;
            g2.drawString(nombresColumnaPedidoPapel, 30, row);
            row += 15;
            for (int x = 0; x < maxNro; x++) {
                if (renglones[x] != null) {
                    g2.drawString(renglones[x], 40, row);
                }
                row += 10;
            }
            row += 20;
            if (clientePedido.getTieneDescuento()) {
                g2.drawString("Descuento: " + descuento + "% Total descuento: " + df.format(totalDescuento), 30, row);
            }
            row += 20;
            g2.drawString(lineaTotalesPedidoPapel, 30, row);
            g2.setFont(new Font("Monospaced", Font.BOLD, 11));
            g2.drawString(importeTotalPedidoPapel, 490, row);
            g2.setFont(new Font("Monospaced", Font.PLAIN, 9));
            row += 21;
            //g2.drawString("SALDO ANTERIOR: " + totalDeudaPedidoPapel, 403, row);
            //row += 10;
            //g2.drawString("SALDO TOTAL:    " + totalPagarPedidoPapel, 403, row);
            row += 10;
            espacio = "     ";
            g2.setFont(new Font("Monospaced", Font.BOLD, 9));
            g2.drawString(espacio + texto1PedidoPapel, 30, row);
            row += 10;
            g2.drawString(espacio + texto2PedidoPapel, 30, row);
            row += 10;
            g2.drawString(espacio + texto3PedidoPapel, 30, row);
            g2.setFont(new Font("Monospaced", Font.PLAIN, 9));
            row += 15;
//            g2.drawString(espacio + texto4PedidoPapel, 30, row);
//            row += 20;
            g2.drawString(cantidadesPedidoPapel, 30, row);
            return PAGE_EXISTS;
        }
    }
}
