/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ComprobanteCompras;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ComprobanteComprasService;
import ar.com.ventas.services.ProveedorService;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class ComprobantesPendientesFrame extends javax.swing.JFrame {

    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private Integer menu;
    /**
     * Creates new form ComprobantesPendientesFrame
     */
    public ComprobantesPendientesFrame(Integer menu) {
        initComponents();
        this.menu = menu;
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        deFechaTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        aFechaTxt = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        ctaCteBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("COMPROBANTES COMPRA PENDIENTES DE PAGO");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Tipo", "Núm.Compr.", "Código", "Proveedor", "Factura", "Deuda"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setPreferredWidth(40);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(25);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(40);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(300);
            tabla.getColumnModel().getColumn(5).setPreferredWidth(40);
            tabla.getColumnModel().getColumn(6).setPreferredWidth(40);
        }

        jLabel1.setText("de:");

        deFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deFechaTxt.setText("DE FECHA");
        deFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                deFechaTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("al:");

        aFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        aFechaTxt.setText("A FECHA");
        aFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aFechaTxtKeyPressed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        ctaCteBtn.setText("Ver Cta. Cte.");
        ctaCteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctaCteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buscarBtn)
                        .addGap(18, 18, 18)
                        .addComponent(ctaCteBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(deFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(aFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarBtn)
                    .addComponent(volverBtn)
                    .addComponent(ctaCteBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (deFechaTxt.getText().isEmpty()) {
                deFechaTxt.setText(sdf.format(new Date()));
                deFechaTxt.requestFocus();
            } else {
                int largo = deFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    deFechaTxt.setText(deFechaTxt.getText() + "/" + f);
                    aFechaTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        deFechaTxt.setText(deFechaTxt.getText() + an);
                        aFechaTxt.requestFocus();
                    } else {
                        if (largo != 8) {
                            if (largo != 10) {
                                JOptionPane.showMessageDialog(this, "Error en fecha");
                                deFechaTxt.setText("");
//                          request focus mismo campo
                                deFechaTxt.requestFocus();
                            } else {
                                String veinte = deFechaTxt.getText().substring(6, 8);
                                if (!veinte.equals("20")) {
                                    JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                    deFechaTxt.requestFocus();
                                } else {
                                    aFechaTxt.requestFocus();
                                }
                            }
                        } else {
                            String x_f = deFechaTxt.getText();
                            String x_f1 = x_f.substring(0, 6);
                            String x_f2 = x_f.substring(6, 8);
                            deFechaTxt.setText(x_f1 + "20" + x_f2);
                            aFechaTxt.requestFocus();// request focus prox campo
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_deFechaTxtKeyPressed

    private void aFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (aFechaTxt.getText().isEmpty()) {
                aFechaTxt.setText(sdf.format(new Date()));
                aFechaTxt.requestFocus();
            } else {
                int largo = aFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    aFechaTxt.setText(aFechaTxt.getText() + "/" + f);
                    buscar();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        aFechaTxt.setText(aFechaTxt.getText() + an);
                        buscar();
                    } else {
                        if (largo != 8) {
                            if (largo != 10) {
                                JOptionPane.showMessageDialog(this, "Error en fecha");
                                aFechaTxt.setText("");
//                          request focus mismo campo
                                aFechaTxt.requestFocus();
                            } else {
                                String veinte = aFechaTxt.getText().substring(6, 8);
                                if (!veinte.equals("20")) {
                                    JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                    aFechaTxt.requestFocus();
                                } else {
                                    buscar();
                                }
                            }
                        } else {
                            String x_f = aFechaTxt.getText();
                            String x_f1 = x_f.substring(0, 6);
                            String x_f2 = x_f.substring(6, 8);
                            aFechaTxt.setText(x_f1 + "20" + x_f2);
                            buscar(); // request focus prox campo
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_aFechaTxtKeyPressed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        buscar();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void ctaCteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctaCteBtnActionPerformed
        verCtaCte();
    }//GEN-LAST:event_ctaCteBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ComprobantesPendientesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ComprobantesPendientesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ComprobantesPendientesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComprobantesPendientesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ComprobantesPendientesFrame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField aFechaTxt;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JButton ctaCteBtn;
    private javax.swing.JTextField deFechaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        deFechaTxt.setText("");
        aFechaTxt.setText("");
    }

    private void buscar() {
        borrarTabla();
        Date f1 = new Date();
        Date f2 = new Date();
        try {
            f1 = sdf.parse(deFechaTxt.getText());
            if (!aFechaTxt.getText().isEmpty()) {
                f2 = sdf.parse(aFechaTxt.getText());
            }
        } catch (ParseException ex) {
            Logger.getLogger(ComprobantesPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR en FECHA");
            return;
        }
        List<ComprobanteCompras> comprobantes = null;
        try {
            comprobantes = new ComprobanteComprasService().getComprobantesPendientesEntreFechas(f1, f2);
        } catch (Exception ex) {
            Logger.getLogger(ComprobantesPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (comprobantes != null && !comprobantes.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            Double s1 = 0.0;
            Double s2 = 0.0;
            Double sp1 = 0.0;
            Double sp2 = 0.0;
            Long p = null;
            for (ComprobanteCompras c : comprobantes) {
                if (p == null) {
                    p = c.getProveedor().getId();
                    sp1 += c.getTotal();
                    sp2 += c.getTotal() - c.getPagado();
                } else {
                    if (p.equals(c.getProveedor().getId())) {
                        sp1 += c.getTotal();
                        sp2 += c.getTotal() - c.getPagado();
                    } else {
                        Object ob[] = new Object[7];
                        ob[4] = "SUBTOTALES ---->";
                        ob[5] = df.format(sp1);
                        ob[6] = df.format(sp2);
                        tbl.addRow(ob);
                        ob[4] = " ";
                        ob[5] = " ";
                        ob[6] = " ";
                        tbl.addRow(ob);
                        sp1 = c.getTotal();
                        sp2 = c.getTotal() - c.getPagado();
                        p = c.getProveedor().getId();
                    }
                }
                Object ob[] = new Object[7];
                String tmp = "0000" + c.getNumeroSucursal().toString();
                int tmp1 = tmp.length();
                String tmp2 = "00000000" + c.getNumeroFactura().toString();
                int tmp3 = tmp2.length();
                ob[0] = sdf.format(c.getFechaFactura());
                ob[1] = "FC";
                ob[2] = c.getLetra() + " " + tmp.substring(tmp1 - 4, tmp1) + " " + tmp2.substring(tmp3 - 8, tmp3);
                ob[3] = c.getProveedor().getCodigo();
                ob[4] = c.getProveedor().getRazonSocial();
                ob[5] = df.format(c.getTotal());
                ob[6] = df.format(c.getTotal() - c.getPagado());
                s1 += c.getTotal();
                s2 += c.getTotal() - c.getPagado();
                tbl.addRow(ob);
            }
            Object ob[] = new Object[7];
            ob[4] = "SUBTOTALES ---->";
            ob[5] = df.format(sp1);
            ob[6] = df.format(sp2);
            tbl.addRow(ob);
            ob[4] = " ";
            ob[5] = " ";
            ob[6] = " ";
            tbl.addRow(ob);
            ob[4] = "TOTALES ---->";
            ob[5] = df.format(s1);
            ob[6] = df.format(s2);
            tbl.addRow(ob);
            tabla.setModel(tbl);
        }
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void borrarTabla() {
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        int rows = tbl.getRowCount();
        if (rows > 0) {
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }

    private void verCtaCte() {
        int row = tabla.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un proveedor");
            return;
        }
        String s = "";
        if (tabla.getValueAt(row, 3) != null) {
            s = tabla.getValueAt(row, 3).toString();
        }
        if (s.length() < 1) {
            JOptionPane.showMessageDialog(this, "la linea seleccionada Debe contener un proveedor");
            return;
        }
        int cod = Integer.valueOf(s);
        Proveedor p = null;
        try {
            p = new ProveedorService().getProveedorByCodigo(cod);
        } catch (Exception ex) {
            Logger.getLogger(ComprobantesPendientesFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (p != null) {
            CuentaCorrienteProveedorFrame ccpf = new CuentaCorrienteProveedorFrame(p, menu);
            ccpf.setVisible(true);
            this.dispose();
        }
    }
}
