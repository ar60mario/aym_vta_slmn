/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Activity;
import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.IvaVentas;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ActivityService;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.IvaVentasService;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class ListaFacturas extends javax.swing.JFrame {

    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private Date fechaDe;
    private Date fechaA;
    private List<IvaVentas> facturas = null;
    private List<Activity> facts = null;

    /**
     * Creates new form ListaFacturas
     */
    public ListaFacturas() {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        initComponents();
        limpiarCampos();
        desdeFechaTxt.requestFocus();
        //buscarFacturas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        desdeFechaTxt = new javax.swing.JTextField();
        hastaFechaTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPresupuestos = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        buscarBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaFacturas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("LISTADO MOVIMIENTOS ENTRE FECHAS");

        jLabel2.setText("Desde:");

        jLabel3.setText("Hasta:");

        desdeFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        desdeFechaTxt.setText("DESDE");
        desdeFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                desdeFechaTxtKeyPressed(evt);
            }
        });

        hastaFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hastaFechaTxt.setText("HASTA");
        hastaFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hastaFechaTxtKeyPressed(evt);
            }
        });

        tablaPresupuestos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Cód.Cliente", "Nombre Cliente", "Nro. Presupuesto", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaPresupuestos);
        if (tablaPresupuestos.getColumnModel().getColumnCount() > 0) {
            tablaPresupuestos.getColumnModel().getColumn(2).setPreferredWidth(250);
            tablaPresupuestos.getColumnModel().getColumn(3).setPreferredWidth(170);
        }

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        tablaFacturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Cód.Cliente", "Nombre Cliente", "Nro.Factura", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaFacturas);
        if (tablaFacturas.getColumnModel().getColumnCount() > 0) {
            tablaFacturas.getColumnModel().getColumn(2).setPreferredWidth(250);
            tablaFacturas.getColumnModel().getColumn(3).setPreferredWidth(170);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buscarBtn)
                .addGap(18, 18, 18)
                .addComponent(volverBtn)
                .addContainerGap(170, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarBtn)
                    .addComponent(volverBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        borrarTablas();
        buscarFacturas();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void desdeFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_desdeFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (desdeFechaTxt.getText().isEmpty()) {
                desdeFechaTxt.setText(sdf.format(new Date()));
                desdeFechaTxt.requestFocus();
            } else {
                int largo = desdeFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    desdeFechaTxt.setText(desdeFechaTxt.getText() + "/" + f);
                    hastaFechaTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        desdeFechaTxt.setText(desdeFechaTxt.getText() + an);
                        hastaFechaTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            desdeFechaTxt.setText("");
//                          request focus mismo campo
                            desdeFechaTxt.requestFocus();
                        } else {
                            String veinte = desdeFechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                desdeFechaTxt.requestFocus();
                            } else {
                                hastaFechaTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_desdeFechaTxtKeyPressed

    private void hastaFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hastaFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (hastaFechaTxt.getText().isEmpty()) {
                hastaFechaTxt.setText(sdf.format(new Date()));
                hastaFechaTxt.requestFocus();
            } else {
                int largo = hastaFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    hastaFechaTxt.setText(hastaFechaTxt.getText() + "/" + f);
                    borrarTablas();
                    buscarFacturas();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        hastaFechaTxt.setText(hastaFechaTxt.getText() + an);
                        borrarTablas();
                        buscarFacturas();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            hastaFechaTxt.setText("");
//                          request focus mismo campo
                            hastaFechaTxt.requestFocus();
                        } else {
                            String veinte = hastaFechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                                hastaFechaTxt.requestFocus();
                            } else {
                                borrarTablas();
                                buscarFacturas();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_hastaFechaTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaFacturas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaFacturas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaFacturas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaFacturas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListaFacturas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarBtn;
    private javax.swing.JTextField desdeFechaTxt;
    private javax.swing.JTextField hastaFechaTxt;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaFacturas;
    private javax.swing.JTable tablaPresupuestos;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void buscarFacturas() {
        facturas = null;
        try {
            fechaA = sdf.parse(hastaFechaTxt.getText());
            fechaDe = sdf.parse(desdeFechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(ListaFacturas.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            facturas = new IvaVentasService().getFacturasEntreFechas(fechaDe, fechaA);
            facts = new ActivityService().getAllActivityByPeriodo(fechaDe, fechaA);
        } catch (Exception ex) {
            Logger.getLogger(ListaFacturas.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (facturas != null && !facturas.isEmpty()) {
            DefaultTableModel dtm = (DefaultTableModel) tablaFacturas.getModel();
            for (IvaVentas fact : facturas) {
                Object ob[] = new Object[5];
                ob[0] = sdf.format(fact.getFecha());
                if (fact.getCliente() != null) {
                    ob[1] = fact.getCliente().getCodigo();
                    ob[2] = fact.getCliente().getRazonSocial();
                } else {
                    ob[2] = "ANULADA";
                }
                ob[3] = fact.getNumeroFactura();
                ob[4] = df.format(fact.getTotal());
                dtm.addRow(ob);
            }
            tablaFacturas.setModel(dtm);
        }
        if (facts != null && !facts.isEmpty()) {
            DefaultTableModel dtm = (DefaultTableModel) tablaPresupuestos.getModel();
            for (Activity fact : facts) {
                Object ob[] = new Object[5];
                ob[0] = sdf.format(fact.getFecha());
                if (fact.getCustomer() != null) {
                    String cod = fact.getCustomer().getCodigo();
                    Cliente cli = null;
                    try {
                        cli = new ClienteService().getClienteByCodigo(cod);
                    } catch (Exception ex) {
                        Logger.getLogger(ListaFacturas.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (cli != null) {
                        if (cli.getRazonSocial() != null) {
                            ob[1] = cli.getCodigo();
                            ob[2] = cli.getRazonSocial();
                        } else {
                            ob[2] = "ANULADA";
                        }
                    } else {
                        ob[2] = "ANULADA";
                    }
                } else {
                    ob[2] = "ANULADA";
                }
                ob[3] = fact.getNumeroFactura();
                ob[4] = df.format(fact.getTotal());
                dtm.addRow(ob);
            }
            tablaPresupuestos.setModel(dtm);
        }
    }

    private void limpiarCampos() {
        desdeFechaTxt.setText("");
        hastaFechaTxt.setText("");
        Date fecha = new Date();
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DATE, -30);
        desdeFechaTxt.setText(sdf.format(calendar.getTime()));
        hastaFechaTxt.setText(sdf.format(fecha));
        fechaDe = calendar.getTime();
        fechaA = fecha;
    }

    private void borrarTablas() {
        int rows = tablaFacturas.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tablaFacturas.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
                facturas.remove(0);
            }
            tablaFacturas.setModel(tbl);
        }
        rows = tablaPresupuestos.getRowCount();
        if (rows > 0) {
            DefaultTableModel tbl = (DefaultTableModel) tablaPresupuestos.getModel();
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
                facts.remove(0);
            }
            tablaPresupuestos.setModel(tbl);
        }
    }
}
