/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ComprobanteCompras;
import ar.com.ventas.entities.ConfiguracionProveedor;
import ar.com.ventas.entities.CuentaCorrienteProveedor;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.entities.RcCo;
import ar.com.ventas.entities.ReciboProveedor;
import ar.com.ventas.entities.SeguimientoCompras;
import ar.com.ventas.services.ComprobanteComprasService;
import ar.com.ventas.services.ConfiguracionProveedorService;
import ar.com.ventas.services.CuentaCorrienteProveedorService;
import ar.com.ventas.services.ProveedorService;
import ar.com.ventas.services.RcCoService;
import ar.com.ventas.services.ReciboProveedorService;
import ar.com.ventas.services.SeguimientoComprasService;
import static java.lang.Long.compare;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mario
 */
public class IngresarPagoFrame extends javax.swing.JFrame {

    private ComprobanteCompras factura;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private Integer menu;

    /**
     * Creates new form IngresarPagoFrame
     */
    public IngresarPagoFrame(ComprobanteCompras c, Integer menu) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        this.factura = c;
        this.menu = menu;
        llenarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        numeroTxt = new javax.swing.JTextField();
        fechaTxt = new javax.swing.JTextField();
        totalTxt = new javax.swing.JTextField();
        pendienteTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        pagarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        pagoTxt = new javax.swing.JTextField();
        proveedorTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("PAGO DE COMPROBANTE COMPRAS");

        jLabel1.setText("Fecha:");

        jLabel2.setText("NÃºm. Comprobante:");

        jLabel3.setText("Total:");

        jLabel4.setText("Saldo pendiente:");

        numeroTxt.setText("NUMERO CPBTE");

        fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaTxt.setText("FECHA");
        fechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fechaTxtKeyPressed(evt);
            }
        });

        totalTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalTxt.setText("TOTAL FACTURA");

        pendienteTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pendienteTxt.setText("SALDO PENDIENTE");

        jLabel5.setText("Importe Aplicar:");

        pagarBtn.setText("Pagar");
        pagarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pagarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        pagoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        pagoTxt.setText("IMPORTE A APLICAR");
        pagoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pagoTxtKeyPressed(evt);
            }
        });

        proveedorTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        proveedorTxt.setText("PROVEEDOR");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(proveedorTxt)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pagarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numeroTxt)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(totalTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                                    .addComponent(pendienteTxt)
                                    .addComponent(pagoTxt))
                                .addGap(0, 150, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(proveedorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(numeroTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(totalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(pendienteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(pagoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pagarBtn)
                    .addComponent(volverBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void pagarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pagarBtnActionPerformed
        int escape = JOptionPane.showConfirmDialog(null,
                "Esta seguro de generar este pago?",
                "Atencion", JOptionPane.YES_NO_OPTION);
        if (escape == 0) {
            pagar3();
        }
    }//GEN-LAST:event_pagarBtnActionPerformed

    private void pagoTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pagoTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            int escape = JOptionPane.showConfirmDialog(null,
                    "Esta seguro de generar este pago?",
                    "Atencion", JOptionPane.YES_NO_OPTION);
            if (escape == 0) {
                pagar3();
            }
        }
    }//GEN-LAST:event_pagoTxtKeyPressed

    private void fechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (fechaTxt.getText().isEmpty()) {
                fechaTxt.setText(sdf.format(new Date()));
                fechaTxt.requestFocus();
            } else {
                int largo = fechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    fechaTxt.setText(fechaTxt.getText() + "/" + f);
                    pagoTxt.requestFocus();
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        fechaTxt.setText(fechaTxt.getText() + an);
                        pagoTxt.requestFocus();
                    } else {
                        if (largo != 10) {
                            JOptionPane.showMessageDialog(this, "Error en fecha");
                            fechaTxt.setText("");
//                          request focus mismo campo
                            fechaTxt.requestFocus();
                        } else {
                            String veinte = fechaTxt.getText().substring(6, 8);
                            if (!veinte.equals("20")) {
                                JOptionPane.showMessageDialog(this, "Error en AÃO");
//                              request focus mismo campo
                                fechaTxt.requestFocus();
                            } else {
                                pagoTxt.requestFocus();
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_fechaTxtKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IngresarPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IngresarPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IngresarPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngresarPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IngresarPagoFrame(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField numeroTxt;
    private javax.swing.JButton pagarBtn;
    private javax.swing.JTextField pagoTxt;
    private javax.swing.JTextField pendienteTxt;
    private javax.swing.JTextField proveedorTxt;
    private javax.swing.JTextField totalTxt;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarCampos() {
        fechaTxt.setText(sdf.format(new Date()));
        String let = factura.getLetra() + " ";
        String suc = "0000" + factura.getNumeroSucursal().toString();
        String num = "00000000" + factura.getNumeroFactura().toString();
        int ls = suc.length();
        int ln = num.length();
        String nf = let + suc.substring(ls - 4, ls) + "-" + num.substring(ln - 8, ln);
        numeroTxt.setText(nf);
        numeroTxt.setEditable(false);
        totalTxt.setEditable(false);
        pendienteTxt.setEditable(false);
        totalTxt.setText(df.format(factura.getTotal()));
        pendienteTxt.setText(df.format(factura.getTotal() - factura.getPagado()));
        pagoTxt.setText("");
        //System.out.println(factura.getProveedor().getRazonSocial());
        proveedorTxt.setText(factura.getProveedor().getRazonSocial());
        proveedorTxt.setEditable(false);
        fechaTxt.requestFocus();
    }

    private void volver() {
        Proveedor pr = factura.getProveedor();
        VerComprobantesCompraImpagosByProveedorFrame mf = new VerComprobantesCompraImpagosByProveedorFrame(pr, menu);
        mf.setVisible(true);
        this.dispose();
    }

    private void pagar() {
        if (pagoTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un importe.");
            pagoTxt.requestFocus();
            return;
        }
        int nr1 = 0;
        try {
            ConfiguracionProveedor cfg = new ConfiguracionProveedorService().getFacturas(1L);
            nr1 = cfg.getNumeroReciboCompras();
            nr1 += 1;
            cfg.setNumeroReciboCompras(nr1);
            new ConfiguracionProveedorService().updateConfiguracion(cfg);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Double imp = Double.valueOf(pagoTxt.getText());
        Double deu = factura.getTotal() - factura.getPagado();
        String s = df.format(factura.getTotal() - factura.getPagado()).replaceAll(",", ".");
        String s1 = df.format(imp).replaceAll(",", ".");
        Proveedor proveedor = null;
        Double saldo = 0.0;
        int cod = factura.getProveedor().getCodigo();
        try {
            proveedor = new ProveedorService().getProveedorByCodigo(cod);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (s1.equals(s)) {
            saldo = proveedor.getSaldo();
            SeguimientoCompras sc = null;
            try {
                sc = new SeguimientoComprasService().getByComprobante(factura);
            } catch (Exception ex) {
                Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (sc != null) {
                sc.setPago(true);
                try {
                    sc = new SeguimientoComprasService().updateSeguimientoCompras(sc);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            saldo -= imp;
            proveedor.setSaldo(saldo);
            try {
                new ProveedorService().updateProveedor(proveedor);
            } catch (Exception ex) {
                Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR");
            }
            Double pag = factura.getTotal();
            factura.setPagado(pag);
            factura.setEstaPago(true);
            try {
                new ComprobanteComprasService().updateComprobante(factura);
            } catch (Exception ex) {
                Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if (imp > deu) {
                JOptionPane.showMessageDialog(this, "Debe ingresar importe menor.");
                pagoTxt.setText("");
                pagoTxt.requestFocus();
                return;
            }
            saldo = proveedor.getSaldo();
            saldo -= imp;
            proveedor.setSaldo(saldo);
            try {
                new ProveedorService().updateProveedor(proveedor);
            } catch (Exception ex) {
                Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR");
            }
            Double pag = factura.getPagado();
            factura.setPagado(pag + imp);
            Double x1 = factura.getTotal() * 100;
            Double x2 = factura.getPagado() * 100;
            Long x01 = x1.longValue();
            Long x02 = x2.longValue();
            if (compare(x01, x02) == 0) {
                factura.setEstaPago(true);
            }
            try {
                new ComprobanteComprasService().updateComprobante(factura);
            } catch (Exception ex) {
                Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        CuentaCorrienteProveedor ccp = new CuentaCorrienteProveedor();
        ReciboProveedor rp = new ReciboProveedor();
        Date fecha = new Date();
        try {
            fecha = sdf.parse(fechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        rp.setNumero(nr1);
        rp.setFecha(fecha);
        rp.setImporte(imp);
        rp.setProveedor(proveedor);
        rp.setImporteImputado(imp);
        rp.setImputado(true);
        try {
            rp = new ReciboProveedorService().saveRecibo(rp);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        ccp.setReciboProveedor(rp);
        ccp.setDebe(0.00);
        ccp.setHaber(imp);
        ccp.setSaldo(saldo);
        ccp.setProveedor(proveedor);
        ccp.setFecha(fecha);
        try {
            new CuentaCorrienteProveedorService().saveCtaCteProveedor(ccp);
        } catch (Exception ex) {
            Logger.getLogger(NuevoComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        RcCo rco = new RcCo();
        rco.setComprobanteCompras(factura);
        rco.setReciboProveedor(rp);
        rco.setAnulado(false);
        rco.setImporteRc(imp);
        rco.setImporteFc(factura.getTotal());
        rco.setImputadoFc(imp);
        rco.setImputadoRc(imp);
        rco.setImputadoNc(0.00);
        try {
            new RcCoService().saveRecibo(rco);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Calendar cal = Calendar.getInstance();
        cal.setTime(fecha);
        cal.add(Calendar.DATE, -365);
        Date fecha1 = cal.getTime();
        Date fecha2 = new Date();
        List<CuentaCorrienteProveedor> ccp1 = null;
        try {
            ccp1 = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(proveedor, fecha1, fecha2);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Double sa = 0.0;
        int x = 0;
        for (CuentaCorrienteProveedor cc1 : ccp1) {
            if (x == 0) {
                sa = cc1.getSaldo();
                x = 1;
            } else {
                sa += cc1.getDebe() - cc1.getHaber();
                cc1.setSaldo(sa);
                try {
                    new CuentaCorrienteProveedorService().updateCtaCteProveedor(cc1);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        System.out.println(imp);
        System.out.println(factura.getTotal());
        JOptionPane.showMessageDialog(this, "Pago aplicado");
        CuentaCorrienteProveedorFrame ccpf = new CuentaCorrienteProveedorFrame(proveedor, menu);
        ccpf.setVisible(true);
        this.dispose();
    }

    private void pagar2() {
        if (pagoTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un importe.");
            pagoTxt.requestFocus();
            return;
        }
        Double pagoIngresado = 0.00;
        try {
            pagoIngresado = Double.valueOf(pagoTxt.getText().replace(",", "."));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "ERROR EN EL IMPORTE INGRESADO");
            return;
        }
        int nr1 = 0;
        try {
            ConfiguracionProveedor cfg = new ConfiguracionProveedorService().getFacturas(1L);
            nr1 = cfg.getNumeroReciboCompras();
            nr1 += 1;
            cfg.setNumeroReciboCompras(nr1);
//            new ConfiguracionProveedorService().updateConfiguracion(cfg);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Double imp = pagoIngresado;
        Double deu = factura.getTotal() - factura.getPagado();
        String s = df.format(factura.getTotal() - factura.getPagado()).replaceAll(",", ".");
        String s1 = df.format(imp).replaceAll(",", ".");
        Proveedor proveedor = null;
        Double saldo = 0.0;
        int cod = factura.getProveedor().getCodigo();
        try {
            proveedor = new ProveedorService().getProveedorByCodigo(cod);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (s1.equals(s)) {
            saldo = proveedor.getSaldo();
            saldo -= imp;
            proveedor.setSaldo(saldo);
//            try {
//                new ProveedorService().updateProveedor(proveedor);
//            } catch (Exception ex) {
//                Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
//                JOptionPane.showMessageDialog(this, "ERROR");
//            }
            Double pag = factura.getTotal();
            factura.setPagado(pag);
            factura.setEstaPago(true);
//            try {
//                new ComprobanteComprasService().updateComprobante(factura);
//            } catch (Exception ex) {
//                Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
        } else {
            if (imp > deu) {
                JOptionPane.showMessageDialog(this, "Debe ingresar importe menor.");
                pagoTxt.setText("");
                pagoTxt.requestFocus();
                return;
            }
            saldo = proveedor.getSaldo();
            saldo -= imp;
            proveedor.setSaldo(saldo);
//            try {
//                new ProveedorService().updateProveedor(proveedor);
//            } catch (Exception ex) {
//                Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
//                JOptionPane.showMessageDialog(this, "ERROR");
//            }
            Double pag = factura.getPagado();
            factura.setPagado(pag + imp);
            Double x1 = factura.getTotal() * 100;
            Double x2 = factura.getPagado() * 100;
            Long x01 = x1.longValue();
            Long x02 = x2.longValue();
            if (compare(x01, x02) == 0) {
                factura.setEstaPago(true);
            }
//            try {
//                new ComprobanteComprasService().updateComprobante(factura);
//            } catch (Exception ex) {
//                Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
        }
        CuentaCorrienteProveedor ccp = new CuentaCorrienteProveedor();
        ReciboProveedor rp = new ReciboProveedor();
        Date fecha = new Date();
        try {
            fecha = sdf.parse(fechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        rp.setNumero(nr1);
        rp.setFecha(fecha);
        rp.setImporte(imp);
        rp.setProveedor(proveedor);
        rp.setImporteImputado(imp);
        rp.setImputado(true);
        try {
            rp = new ReciboProveedorService().saveRecibo(rp);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        ccp.setReciboProveedor(rp);
        ccp.setDebe(0.00);
        ccp.setHaber(imp);
        ccp.setSaldo(saldo);
        ccp.setProveedor(proveedor);
        ccp.setFecha(fecha);
//        try {
//            new CuentaCorrienteProveedorService().saveCtaCteProveedor(ccp);
//        } catch (Exception ex) {
//            Logger.getLogger(NuevoComprobanteComprasFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
        RcCo rco = new RcCo();
        rco.setComprobanteCompras(factura);
        rco.setReciboProveedor(rp);
        rco.setAnulado(false);
        rco.setImporteRc(imp);
        rco.setImporteFc(factura.getTotal());
        rco.setImputadoFc(imp);
        rco.setImputadoRc(imp);
        rco.setImputadoNc(0.00);
//        try {
//            new RcCoService().saveRecibo(rco);
//        } catch (Exception ex) {
//            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
        Calendar cal = Calendar.getInstance();
        cal.setTime(fecha);
        cal.add(Calendar.DATE, -365);
        Date fecha1 = cal.getTime();
        Date fecha2 = new Date();
        List<CuentaCorrienteProveedor> ccp1 = null;
        try {
            ccp1 = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(proveedor, fecha1, fecha2);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Double sa = 0.0;
        int x = 0;
        for (CuentaCorrienteProveedor cc1 : ccp1) {
            if (x == 0) {
                sa = cc1.getSaldo();
                x = 1;
            } else {
                sa += cc1.getDebe() - cc1.getHaber();
                cc1.setSaldo(sa);
//                try {
//                    new CuentaCorrienteProveedorService().updateCtaCteProveedor(cc1);
//                } catch (Exception ex) {
//                    Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
            }
        }
//        System.out.println(imp);
//        System.out.println(factura.getTotal());
        JOptionPane.showMessageDialog(this, "Pago aplicado");
        CuentaCorrienteProveedorFrame ccpf = new CuentaCorrienteProveedorFrame(proveedor, menu);
        ccpf.setVisible(true);
        this.dispose();
    }

    private void pagar3() {
        if (pagoTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un importe.");
            pagoTxt.requestFocus();
            return;
        }
        Date fecha;
        Date a = new Date();
        try {
            fecha = sdf.parse(fechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "ERROR EN FORMATO DE FECHA");
            return;
        }
        if (fecha.after(a)) {
            JOptionPane.showMessageDialog(this, "Error fecha posterior a HOY");
            fechaTxt.requestFocus();
            return;
        }
        
        int nr1 = 0;
        ConfiguracionProveedor cfg;
        try {
             cfg = new ConfiguracionProveedorService().getFacturas(1L);
            nr1 = cfg.getNumeroReciboCompras();
            nr1 += 1;
            cfg.setNumeroReciboCompras(nr1);
//            new ConfiguracionProveedorService().updateConfiguracion(cfg);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        Double imp = Double.valueOf(pagoTxt.getText());
        Long id_factura = factura.getId();
        Long id_proveedor = factura.getProveedor().getId();
        try {
            factura = new ComprobanteComprasService().getById(id_factura);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Proveedor p = null;
        try {
            p = new ProveedorService().getProveedorById(id_proveedor);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Double saldo = p.getSaldo();
        saldo -= imp;
        p.setSaldo(saldo);
        List<CuentaCorrienteProveedor> ccp1 = null;
        try {
            ccp1 = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(p, fecha, a);
        } catch (Exception ex) {
            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Double deu = factura.getTotal() - factura.getPagado();
        String s = df.format(factura.getTotal() - factura.getPagado()).replaceAll(",", ".");
        String s1 = df.format(imp).replaceAll(",", ".");
        if (s.equals(s1)) {
            factura.setEstaPago(true);
            factura.setPagado(factura.getTotal());
        } else {
            if (imp > deu) {
                JOptionPane.showMessageDialog(this, "DEBE INGRESAR UN IMPORTE MENOR");
                pagoTxt.requestFocus();
                return;
            }
            factura.setPagado(factura.getPagado() + imp);
        }
        
        int x = 0;
        Double sa = 0.0;
        ReciboProveedor rp = new ReciboProveedor();
        RcCo rco = new RcCo();
        CuentaCorrienteProveedor ccp = new CuentaCorrienteProveedor();
        ccp.setSaldo(saldo);
        if (ccp1 != null && !ccp1.isEmpty()) {
            String f1 = sdf.format(ccp1.get(0).getFecha());
            String f2 = sdf.format(fecha);
            if (f1.equals(f2)) {
                for (CuentaCorrienteProveedor cc1 : ccp1) {
                    f1 = sdf.format(cc1.getFecha());
                    Double debe = cc1.getDebe();
                    Double haber = cc1.getHaber();
                    Double saldo_x = cc1.getSaldo();
                    if (!f1.equals(f2)) {
                        if (x == 0) {
                            sa = saldo_x + haber - debe;
                            sa = sa - imp;
                            ccp.setSaldo(sa);
                            x = 1;
                            sa = sa + debe - haber;
                            cc1.setSaldo(sa);
                            System.out.println("saldo: " + sa);
                            System.out.println("saldo_x" + saldo_x);
                            System.out.println("debe:" + debe);
                            System.out.println("haber:" + haber);
                            System.out.println("imp rc:" + imp);
                            System.out.println("id:" + cc1.getId());
                            JOptionPane.showMessageDialog(this, "VER");
                        } else {
                            sa = sa + debe - haber;
                            cc1.setSaldo(sa);
                        }
                    }
                }
            } else {
                if (ccp1.get(0).getFecha().after(fecha)) { // DESPUES
                    for (CuentaCorrienteProveedor cc1 : ccp1) {
                        Double debe = cc1.getDebe();
                        Double haber = cc1.getHaber();
                        Double saldo_x = cc1.getSaldo();
                        if (x == 0) {
                            sa = saldo_x + haber - debe;
                            sa -= imp;
                            ccp.setSaldo(sa);
                            x = 1;
                            sa = sa + debe - haber;
                            cc1.setSaldo(sa);
                        } else {
                            sa = sa + debe - haber;
                            cc1.setSaldo(sa);
                            x = 1;
                        }
                    }
                }
            }
        } else {
            ccp1 = null;
            ccp.setSaldo(saldo);
        }
        
        rp.setFecha(fecha);
        rp.setImporte(imp);
        rp.setImporteImputado(imp);
        rp.setImputado(true);
        rp.setNumero(nr1);
        rp.setProveedor(p);
        
        rco.setComprobanteCompras(factura);
        rco.setReciboProveedor(rp);
        rco.setAnulado(false);
        rco.setImporteRc(imp);
        rco.setImporteFc(factura.getTotal());
        rco.setImputadoFc(imp);
        rco.setImputadoRc(imp);
        rco.setImputadoNc(0.00);
        rco.setImporteNc(0.00);
        
        
        ccp.setReciboProveedor(rp);
        ccp.setDebe(0.00);
        ccp.setHaber(imp);
//        ccp.setSaldo(sa);
        ccp.setProveedor(p);
        ccp.setFecha(fecha);
        
        
        // save recibo rp
        // save RcCo rco
        // save CtaCteProv ccp
        
        // update proveedor
        // update factura
        // update configuracion proveedor cfg
        
        try {
            new CuentaCorrienteProveedorService().saveMovimientoCompletoCtaCteProveedor2(ccp, 
                    ccp1, rp, p, cfg, factura, rco);
        } catch (Exception ex) {
            Logger.getLogger(IngresarAnticipoProveedorFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        JOptionPane.showMessageDialog(this, "Pago aplicado");
        CuentaCorrienteProveedorFrame ccpf = new CuentaCorrienteProveedorFrame(p, menu);
        ccpf.setVisible(true);
        this.dispose();
//        String resultado = "";
//        if(resultado.equals("A")){
//            JOptionPane.showMessageDialog(this, "PAGO REGISTRADO CORRECTAMENTE");
//            volver();
//        }
//        JOptionPane.showMessageDialog(this, "ERROR REGISTRANDO EL PAGO");
    }
}
