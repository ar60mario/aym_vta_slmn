/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Cliente;
//import ar.com.ventas.entities.Pedido;
import ar.com.ventas.entities.Request;
import ar.com.ventas.services.ClienteService;
//import ar.com.ventas.services.PedidoService;
import ar.com.ventas.services.RequestService;
//import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
//import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
//import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class PedidosPendientes extends javax.swing.JFrame {

    public String filtro = "";
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private final DecimalFormat df = new DecimalFormat("#0.00");
    //private final List<Cliente> clientesActivos = null;
    //private final List<Customer> cuestomers = null;
    //private Customer clienteSeleccionado = null;
    private Cliente clienteSel;
    private List<Request> pedidos = null;
    //private final List<Request> pedidosFiltrado = new ArrayList<>();

    /**
     * Creates new form PedidosPendientes
     */
    public PedidosPendientes() {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        initComponents();
        this.setLocationRelativeTo(null);
        limpiarCampos();
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        volverBtn = new javax.swing.JButton();
        facturarBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPedidos = new javax.swing.JTable();
        eliminarBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        facturarBtn.setText("Presupuesto");
        facturarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                facturarBtnActionPerformed(evt);
            }
        });

        tablaPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Cliente", "Número", "Fecha", "Importe", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaPedidos);
        if (tablaPedidos.getColumnModel().getColumnCount() > 0) {
            tablaPedidos.getColumnModel().getColumn(1).setPreferredWidth(270);
        }

        eliminarBtn.setText("Eliminar");
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 805, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(facturarBtn)
                        .addGap(177, 177, 177)
                        .addComponent(eliminarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn)
                        .addGap(100, 100, 100)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(volverBtn)
                    .addComponent(facturarBtn)
                    .addComponent(eliminarBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        FacturarFrame ff = new FacturarFrame();
        ff.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void facturarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_facturarBtnActionPerformed
        facturarPedido();
    }//GEN-LAST:event_facturarBtnActionPerformed

    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        eliminarPedido();
    }//GEN-LAST:event_eliminarBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PedidosPendientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PedidosPendientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PedidosPendientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PedidosPendientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PedidosPendientes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton eliminarBtn;
    private javax.swing.JButton facturarBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaPedidos;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void facturarPedido() {
        if (!(tablaPedidos.getSelectedRow() < 0)) {
            Request pedidoSeleccionado = pedidos.get(tablaPedidos.getSelectedRow());
            String codigo = pedidoSeleccionado.getCliente().getCodigo();

            try {
                clienteSel = new ClienteService().getClienteByCodigo(codigo);
                //clienteSeleccionado = new CustomerService().getCustomerByCodigo(codigo);
            } catch (Exception ex) {
                Logger.getLogger(PedidosPendientes.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (clienteSel.getVendedor() != null) {
                FacturaPedidoFrame fpf = new FacturaPedidoFrame(clienteSel, pedidoSeleccionado);
                fpf.setVisible(true);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar un Vendedor para este Cliente");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Pedido para Facturar");
        }
    }

    private void limpiarCampos() {
        sdf = new SimpleDateFormat("dd/MM/yyyy");
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DATE, -30);
    }

    private void borrarTabla() {
        DefaultTableModel model = (DefaultTableModel) tablaPedidos.getModel();
        int row = tablaPedidos.getRowCount();
        if (row > 0) {
            for (int n = 0; n < row; n++) {
                model.removeRow(0);
            }
        }
    }

    private void llenarTabla() {
        try {
            pedidos = new RequestService().getAllRequestsDisponibles();

        } catch (Exception ex) {
            Logger.getLogger(PedidosPendientes.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        if (pedidos != null) {
            DefaultTableModel tabla = (DefaultTableModel) tablaPedidos.getModel();
            for (Request pe : pedidos) {
                Object[] fila = new Object[6];
                String codigoC = pe.getCliente().getCodigo();
                fila[0] = codigoC;
                Cliente cliC = null;
                try {
                    cliC = new ClienteService().getClienteByCodigo(codigoC);
                } catch (Exception ex) {
                    Logger.getLogger(PedidosPendientes.class.getName()).log(Level.SEVERE, null, ex);
                }
                fila[1] = cliC.getRazonSocial();
                fila[2] = pe.getNumeroPedido();
                fila[3] = sdf.format(pe.getFecha());
                fila[4] = df.format(pe.getTotal());
                if (pe.getAnulado() != null) {
                    if (pe.getAnulado()) {
                        fila[5] = " Anulado";
                    } else {
                        if (pe.getFacturado()) {
                            fila[5] = " Facturado";
                        } else {
                            fila[5] = " Disponible";
                        }
                    }
                } else {
                    if (pe.getFacturado() != null) {
                        if (pe.getFacturado()) {
                            fila[5] = " Facturado";
                        } else {
                            fila[5] = " Disponible";
                        }
                    } else {
                        fila[5] = " Disponible";
                    }
                }
                tabla.addRow(fila);
            }
            tablaPedidos.setModel(tabla);
        }
    }

    private void eliminarPedido() {
        int row = tablaPedidos.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un ara eliminar");
        } else {
            Request pedido = pedidos.get(row);
            int escape = JOptionPane.showConfirmDialog(null,
                    "Esta seguro de Eliminar Pedido?",
                    "Atencion",
                    JOptionPane.YES_NO_OPTION);
            if (escape == 0) {
                pedido.setFacturado(true);
                try {
                    new RequestService().updateRequest(pedido);
                    borrarTabla();
                    llenarTabla();
                } catch (Exception ex) {
                    Logger.getLogger(PedidosPendientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
}
