/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ComprobanteCompras;
import ar.com.ventas.entities.ComprobanteComprasDetalle;
import ar.com.ventas.entities.CuentaCorrienteProveedor;
import ar.com.ventas.entities.IvaCompras;
import ar.com.ventas.entities.Periodo;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.entities.SeguimientoCompras;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ComprobanteComprasDetalleService;
import ar.com.ventas.services.ComprobanteComprasService;
import ar.com.ventas.services.CuentaCorrienteProveedorService;
import ar.com.ventas.services.IvaComprasServices;
import ar.com.ventas.services.PeriodoService;
import ar.com.ventas.services.ProveedorService;
import ar.com.ventas.services.SeguimientoComprasService;
import java.awt.Rectangle;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrador
 */
public class AbmComprobantesCompraFrame extends javax.swing.JFrame {

    private List<ComprobanteCompras> ivaComprasLista = null;
    private List<Periodo> periodos = null;
    private int selectRow;
    private ComprobanteCompras ivaCompra;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private Integer row19;
    private Date fd0 = new Date();
    private Date fa0 = new Date();

    /**
     * Creates new form AbmIvaCompras
     *
     * @param fd
     * @param fa
     */
    public AbmComprobantesCompraFrame(Date fd, Date fa, Integer row19) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        setExtendedState(6); // this.MAXIMIZED_BOTH
        this.row19 = row19;
        this.fd0 = fd;
        this.fa0 = fa;
        if (row19 < 0) {
            limpiarCampos();
        } else {
            llenarCampos();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ivaCompras = new javax.swing.JScrollPane();
        tablaIvaCompras = new javax.swing.JTable();
        nuevoBtn = new javax.swing.JButton();
        modificarBtn = new javax.swing.JButton();
        atrasBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        desdeFechaTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        hastaFechaTxt = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        eliminarBtn = new javax.swing.JButton();
        enviarAlLibroBtn = new javax.swing.JButton();
        convertirBtn = new javax.swing.JButton();
        verComprobanteBtn = new javax.swing.JButton();
        cambiarPeriodoBtn = new javax.swing.JButton();
        comboP = new javax.swing.JComboBox<>();
        modificarImportesBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("ABM-COMPROBANTE COMPRAS");

        tablaIvaCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha Factura", "Período", "Fecha Entrega", "Tipo", "Número", "Proveedor", "Importe", "En Libro"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ivaCompras.setViewportView(tablaIvaCompras);
        if (tablaIvaCompras.getColumnModel().getColumnCount() > 0) {
            tablaIvaCompras.getColumnModel().getColumn(0).setPreferredWidth(70);
            tablaIvaCompras.getColumnModel().getColumn(3).setPreferredWidth(10);
            tablaIvaCompras.getColumnModel().getColumn(4).setPreferredWidth(70);
            tablaIvaCompras.getColumnModel().getColumn(5).setPreferredWidth(250);
            tablaIvaCompras.getColumnModel().getColumn(6).setPreferredWidth(70);
            tablaIvaCompras.getColumnModel().getColumn(7).setPreferredWidth(50);
        }

        nuevoBtn.setText("Nuevo");
        nuevoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoBtnActionPerformed(evt);
            }
        });

        modificarBtn.setText("Modificar");
        modificarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarBtnActionPerformed(evt);
            }
        });

        atrasBtn.setText("Volver");
        atrasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atrasBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Desde Fecha:");

        desdeFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        desdeFechaTxt.setText("DDEF");
        desdeFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                desdeFechaTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Hasta Fecha:");

        hastaFechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hastaFechaTxt.setText("HTAF");
        hastaFechaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hastaFechaTxtKeyPressed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        eliminarBtn.setText("Eliminar");
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });

        enviarAlLibroBtn.setText("Enviar a Libro Iva");
        enviarAlLibroBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarAlLibroBtnActionPerformed(evt);
            }
        });

        convertirBtn.setText("Convertir");
        convertirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertirBtnActionPerformed(evt);
            }
        });

        verComprobanteBtn.setText("Ver comprobante");
        verComprobanteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verComprobanteBtnActionPerformed(evt);
            }
        });

        cambiarPeriodoBtn.setText("Cambiar Fecha Período");
        cambiarPeriodoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarPeriodoBtnActionPerformed(evt);
            }
        });

        comboP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        modificarImportesBtn.setText("Modificar Importes");
        modificarImportesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarImportesBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ivaCompras, javax.swing.GroupLayout.DEFAULT_SIZE, 1084, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buscarBtn)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nuevoBtn)
                        .addGap(18, 18, 18)
                        .addComponent(modificarImportesBtn)
                        .addGap(18, 18, 18)
                        .addComponent(enviarAlLibroBtn)
                        .addGap(18, 18, 18)
                        .addComponent(convertirBtn)
                        .addGap(240, 240, 240)
                        .addComponent(cambiarPeriodoBtn)
                        .addGap(18, 18, 18)
                        .addComponent(comboP, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(atrasBtn)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(modificarBtn)
                .addGap(18, 18, 18)
                .addComponent(eliminarBtn)
                .addGap(18, 18, 18)
                .addComponent(verComprobanteBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(desdeFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(hastaFechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ivaCompras, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modificarBtn)
                    .addComponent(eliminarBtn)
                    .addComponent(verComprobanteBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(atrasBtn)
                    .addComponent(enviarAlLibroBtn)
                    .addComponent(convertirBtn)
                    .addComponent(cambiarPeriodoBtn)
                    .addComponent(comboP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nuevoBtn)
                    .addComponent(modificarImportesBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nuevoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoBtnActionPerformed
        nuevo();
    }//GEN-LAST:event_nuevoBtnActionPerformed

    private void atrasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atrasBtnActionPerformed
        volver();
    }//GEN-LAST:event_atrasBtnActionPerformed

    private void modificarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarBtnActionPerformed
        modificar();
    }//GEN-LAST:event_modificarBtnActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        buscar();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void desdeFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_desdeFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (desdeFechaTxt.getText().isEmpty()) {
                desdeFechaTxt.setText(sdf.format(new Date()));
                desdeFechaTxt.requestFocus(); //mismo campo
            } else {
                int largo = desdeFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    desdeFechaTxt.setText(desdeFechaTxt.getText() + "/" + f);
                    hastaFechaTxt.requestFocus(); // request focus prox campo
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        desdeFechaTxt.setText(desdeFechaTxt.getText() + an);
                        hastaFechaTxt.requestFocus(); // request focus prox campo
                    } else {
                        if (largo == 8) {
                            String x_f = desdeFechaTxt.getText();
                            String x_f1 = x_f.substring(0, 6);
                            String x_f2 = x_f.substring(6, 8);
                            desdeFechaTxt.setText(x_f1 + "20" + x_f2);
                            hastaFechaTxt.requestFocus(); // request focus prox campo
                        } else {
                            if (largo != 10) {
                                JOptionPane.showMessageDialog(this, "Error en fecha");
                                desdeFechaTxt.setText("");
                                desdeFechaTxt.requestFocus(); // request focus mismo campo
                            } else {
                                String veinte = desdeFechaTxt.getText().substring(6, 8);
                                if (!veinte.equals("20")) {
                                    JOptionPane.showMessageDialog(this, "Error en AÑO");
                                    desdeFechaTxt.requestFocus(); // request focus mismo campo
                                } else {
                                    hastaFechaTxt.requestFocus(); // request focus prox campo
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_desdeFechaTxtKeyPressed

    private void hastaFechaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hastaFechaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (hastaFechaTxt.getText().isEmpty()) {
                hastaFechaTxt.setText(sdf.format(new Date()));
                hastaFechaTxt.requestFocus(); //mismo campo
            } else {
                int largo = hastaFechaTxt.getText().length();
                if (largo == 2) {
                    Calendar cal = Calendar.getInstance();
                    int mes = cal.get(Calendar.MONTH) + 1;
                    int anio = cal.get(Calendar.YEAR);
                    String an = String.valueOf(anio);
                    String f = "0" + String.valueOf(mes);
                    if (f.length() > 2) {
                        f = f.substring(1, 3);
                    }
                    f = f + "/" + an;
                    hastaFechaTxt.setText(hastaFechaTxt.getText() + "/" + f);
                    buscar(); // request focus prox campo
                } else {
                    if (largo == 5) {
                        Calendar cal = Calendar.getInstance();
                        int anio = cal.get(Calendar.YEAR);
                        String an = "/" + String.valueOf(anio);
                        hastaFechaTxt.setText(hastaFechaTxt.getText() + an);
                        buscar(); // request focus prox campo
                    } else {
                        if (largo == 8) {
                            String x_f = hastaFechaTxt.getText();
                            String x_f1 = x_f.substring(0, 6);
                            String x_f2 = x_f.substring(6, 8);
                            hastaFechaTxt.setText(x_f1 + "20" + x_f2);
                            buscar(); // request focus prox campo
                        } else {
                            if (largo != 10) {
                                JOptionPane.showMessageDialog(this, "Error en fecha");
                                hastaFechaTxt.setText("");
                                hastaFechaTxt.requestFocus(); // request focus mismo campo
                            } else {
                                String veinte = hastaFechaTxt.getText().substring(6, 8);
                                if (!veinte.equals("20")) {
                                    JOptionPane.showMessageDialog(this, "Error en AÑO");
                                    hastaFechaTxt.requestFocus(); // request focus mismo campo
                                } else {
                                    buscar(); // request focus prox campo
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_hastaFechaTxtKeyPressed

    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        eliminar();
    }//GEN-LAST:event_eliminarBtnActionPerformed

    private void enviarAlLibroBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarAlLibroBtnActionPerformed
        enviar();
    }//GEN-LAST:event_enviarAlLibroBtnActionPerformed

    private void convertirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertirBtnActionPerformed
        convertir();
    }//GEN-LAST:event_convertirBtnActionPerformed

    private void verComprobanteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verComprobanteBtnActionPerformed
        verCpbte();
    }//GEN-LAST:event_verComprobanteBtnActionPerformed

    private void cambiarPeriodoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarPeriodoBtnActionPerformed
        cambiarFechaPeriodo();
    }//GEN-LAST:event_cambiarPeriodoBtnActionPerformed

    private void modificarImportesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarImportesBtnActionPerformed
        modificarImportes();
    }//GEN-LAST:event_modificarImportesBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AbmComprobantesCompraFrame(null, null, 0).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton atrasBtn;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JButton cambiarPeriodoBtn;
    private javax.swing.JComboBox<String> comboP;
    private javax.swing.JButton convertirBtn;
    private javax.swing.JTextField desdeFechaTxt;
    private javax.swing.JButton eliminarBtn;
    private javax.swing.JButton enviarAlLibroBtn;
    private javax.swing.JTextField hastaFechaTxt;
    private javax.swing.JScrollPane ivaCompras;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton modificarBtn;
    private javax.swing.JButton modificarImportesBtn;
    private javax.swing.JButton nuevoBtn;
    private javax.swing.JTable tablaIvaCompras;
    private javax.swing.JButton verComprobanteBtn;
    // End of variables declaration//GEN-END:variables

    private void modificar() {
        ivaCompra = null;
        selectRow = tablaIvaCompras.getSelectedRow();
        if (selectRow > -1) {
            ivaCompra = this.getIvaComprasSeleccionado();
            if (ivaCompra != null) {
                row19 = selectRow;
//                System.out.println(ivaCompra);
//                System.out.println(row0);
//                System.out.println(fd0);
//                System.out.println(fa0);
                ModificaComprobanteComprasFrame mccf = new ModificaComprobanteComprasFrame(ivaCompra, fd0, fa0, row19);
                mccf.setVisible(true);
                this.dispose();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una factura para modificar");
        }
    }

    private void modificarImportes() {
        ivaCompra = null;
        selectRow = tablaIvaCompras.getSelectedRow();
        if (selectRow > -1) {
            ivaCompra = this.getIvaComprasSeleccionado2();
            if (ivaCompra != null) {
                row19 = selectRow;
//                System.out.println(ivaCompra);
//                System.out.println(row0);
//                System.out.println(fd0);
//                System.out.println(fa0);
                ModificaComprobanteComprasFrame1 mccf = new ModificaComprobanteComprasFrame1(ivaCompra, fd0, fa0, row19);
                mccf.setVisible(true);
                this.dispose();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una factura para modificar");
        }
    }

    private void limpiarCampos() {
        fd0 = new Date();
        fa0 = new Date();
        cargarPeriodos();
        Calendar cal = Calendar.getInstance();
        cal.setTime(fd0);
        cal.set(Calendar.DAY_OF_MONTH, 1);
        fd0 = cal.getTime();
        desdeFechaTxt.setText(sdf.format(fd0));
        hastaFechaTxt.setText(sdf.format(fa0));
    }

    private void llenarCampos() {
        desdeFechaTxt.setText(sdf.format(fd0));
        hastaFechaTxt.setText(sdf.format(fa0));
//        DefaultTableModel tbl = (DefaultTableModel) tablaIvaCompras.getModel();
        cargarPeriodos();
        buscar();
        //tablaIvaCompras
        System.out.println(row19);
        System.out.println(fd0);
        System.out.println(fa0);
        Rectangle rect = tablaIvaCompras.getCellRect(row19, 0, true);
        tablaIvaCompras.scrollRectToVisible(rect);
        tablaIvaCompras.clearSelection();
        tablaIvaCompras.setRowSelectionInterval(row19, row19);
//        tablaIvaCompras.setModel(tablaIvaCompras); // poner visible la tabla
    }

    private ComprobanteCompras getIvaComprasSeleccionadoConvertir() {
        int filaSeleccionada = tablaIvaCompras.getSelectedRow();
        if (filaSeleccionada != -1) {
            ComprobanteCompras ivaCompras = ivaComprasLista.get(filaSeleccionada);
            if (ivaCompras.getEsDebito()) {
                JOptionPane.showMessageDialog(this, "NO CORRESPONDE CONVERTIR");
                return null;
            }
            if (ivaCompras.getPagado() > 0.0) {
                JOptionPane.showMessageDialog(this, "DEBE DESAPLICAR COMPROBANTE");
                return null;
            }
            if (ivaCompras.getLetra().equals("X")) {
                return ivaCompras;
            } else {
                JOptionPane.showMessageDialog(this, "NO ES DOCUMENTO CONVERTIBLE");
                return null;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una Factura de la lista.");
        }
        return null;

    }

    private ComprobanteCompras getIvaComprasSeleccionado() {
        int filaSeleccionada = tablaIvaCompras.getSelectedRow();
        if (filaSeleccionada != -1) {
            ComprobanteCompras ivaCompras = ivaComprasLista.get(filaSeleccionada);
            if (ivaCompras.getPagado() > 0.0) {
                JOptionPane.showMessageDialog(this, "DEBE DESAPLICAR COMPROBANTE");
                return null;
            }
            //if (ivaCompras.getLetra().equals("X")) {
            return ivaCompras;
            //}
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una Factura de la lista.");
        }
        return null;
    }

    private ComprobanteCompras getIvaComprasSeleccionado2() {
        int filaSeleccionada = tablaIvaCompras.getSelectedRow();
        if (filaSeleccionada != -1) {
            ComprobanteCompras ivaC = ivaComprasLista.get(filaSeleccionada);
//            if (ivaCompras.getPagado() > 0.0) {
//                JOptionPane.showMessageDialog(this, "DEBE DESAPLICAR COMPROBANTE");
//                return null;
//            }
//            //if (ivaCompras.getLetra().equals("X")) {
            return ivaC;
            //}
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una Factura de la lista.");
        }
        return null;
    }

    private ComprobanteCompras getIvaComprasSeleccionadoParaVer() {
        int filaSeleccionada = tablaIvaCompras.getSelectedRow();
        if (filaSeleccionada != -1) {
            ComprobanteCompras ivaCompras = ivaComprasLista.get(filaSeleccionada);
            return ivaCompras;
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Comprobante de la lista.");
        }
        return null;
    }

    private void buscar() {
        limpiarTabla();
        Date dde = new Date();
        Date hta = new Date();
        try {
            dde = sdf.parse(desdeFechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            hta = sdf.parse(hastaFechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        fd0 = dde;
        fa0 = hta;
        DefaultTableModel defaultTableModel = (DefaultTableModel) tablaIvaCompras.getModel();
        try {
            ivaComprasLista = new ComprobanteComprasService().getComprobantesEntreFechas(dde, hta);
        } catch (Exception ex) {
            Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ivaComprasLista != null && !ivaComprasLista.isEmpty()) {
            for (ComprobanteCompras ic : ivaComprasLista) {
                Object[] fila = new Object[8];
                String let = ic.getLetra() + " ";
                String suc = "0000" + ic.getNumeroSucursal().toString();
                int ls = suc.length();
                String num = "00000000" + ic.getNumeroFactura().toString();
                int ln = num.length();
                fila[0] = sdf.format(ic.getFechaFactura());
                fila[1] = sdf.format(ic.getFechaPeriodo());
                if (ic.getFechaEntrega() != null) {
                    fila[2] = sdf.format(ic.getFechaEntrega());
                } else {
                    fila[2] = " ";
                }
                fila[3] = ic.getTipoComprobante();
                fila[4] = let + suc.substring(ls - 4, ls) + "-" + num.substring(ln - 8, ln);
                fila[5] = ic.getProveedor().getRazonSocial();
                if (ic.getEsDebito()) {
                    fila[6] = df.format(ic.getTotal());
                } else {
                    fila[6] = df.format(-ic.getTotal());
                }
                if (ic.getEnLibro() != null) {
                    if (ic.getEnLibro()) {
                        fila[7] = "En Libro";
                    } else {
                        fila[7] = "NO";
                    }
                } else {
                    fila[7] = "NO";
                }
                defaultTableModel.addRow(fila);
            }
            tablaIvaCompras.setModel(defaultTableModel);
        }
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void eliminar() {
        Date dde = new Date();
        Date hta = new Date();
        try {
            dde = sdf.parse(desdeFechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        int row = tablaIvaCompras.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un comprobante a eliminar");
            return;
        }
        ComprobanteCompras cc = ivaComprasLista.get(row);
        if (cc.getEnLibro()) {
            JOptionPane.showMessageDialog(this, "Primero eliminelo de Libro Iva antes de eliminar");
            return;
        }
        if (cc.getEstaPago()) {
            JOptionPane.showMessageDialog(this, "Este comprobante tiene pago imputado,\ndesaplique pago primero");
            return;
        } else {
            if (cc.getPagado() > 0.00) {
                JOptionPane.showMessageDialog(this, "Este comprobante tiene PAGO PARCIAL imputado,\ndesaplique pago primero");
                return;
            }
        }
        int opcion = JOptionPane.showConfirmDialog(null, "Elimina el comprobante seleccionado?", "Alerta", JOptionPane.YES_NO_OPTION);
        if (opcion == 0) {
            if (cc.getTieneDetalle()) {
                List<ComprobanteComprasDetalle> ccx = null;
                try {
                    ccx = new ComprobanteComprasDetalleService().getDetalleByComprobante(cc);
                    for (ComprobanteComprasDetalle cx1 : ccx) {
                        new ComprobanteComprasDetalleService().deleteComprobanteDetalle(cx1);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            CuentaCorrienteProveedor ccp = null;
            try {
                ccp = new CuentaCorrienteProveedorService().getCtaCteByComprobante(cc);
            } catch (Exception ex) {
                Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (ccp != null) {
                Double debe = ccp.getDebe();
                Double haber = ccp.getHaber();
                Double saldo = ccp.getSaldo();
                Proveedor p = ccp.getProveedor();
                p.setSaldo(p.getSaldo() - debe + haber);
                try {
                    new ProveedorService().updateProveedor(p);
                } catch (Exception ex) {
                    Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

                List<CuentaCorrienteProveedor> lccp = null;
                try {
                    lccp = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(p, dde, hta);
                } catch (Exception ex) {
                    Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                int pri = 0;
                Double inicio = 0.0;
                if (lccp != null && !lccp.isEmpty()) {
                    for (CuentaCorrienteProveedor ct : lccp) {
                        if (pri == 0) {
                            pri = 1;
                            if (!ct.getId().equals(ccp.getId())) {
                                inicio = ct.getSaldo() - ct.getDebe();
                            } else {
                                inicio = saldo;
                            }
                        } else {
                            if (!ct.getId().equals(ccp.getId())) {
                                inicio += (ct.getDebe() - ct.getHaber());
                                ct.setSaldo(inicio);
                                try {
                                    new CuentaCorrienteProveedorService().updateCtaCteProveedor(ct);
                                } catch (Exception ex) {
                                    Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }

                    }
                }
                try {
                    new CuentaCorrienteProveedorService().deleteCtaCteProveedor(ccp);
                } catch (Exception ex) {
                    Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                SeguimientoCompras sc1 = null;
                try {
                    sc1 = new SeguimientoComprasService().getByComprobante(cc);
                } catch (Exception ex) {
                    Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (sc1 != null) {
                    try {
                        new SeguimientoComprasService().deleteSeguimientoCompras(sc1);
                    } catch (Exception ex) {
                        Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                try {
                    new ComprobanteComprasService().deleteComprobante(cc);
                } catch (Exception ex) {
                    Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                Calendar cal = Calendar.getInstance();
                cal.setTime(dde);
                cal.add(Calendar.DATE, -365);
                Date fecha1 = cal.getTime();
                Date fecha2 = new Date();
                List<CuentaCorrienteProveedor> ccp1 = null;
                try {
                    ccp1 = new CuentaCorrienteProveedorService().getCtaCteProvByProvMasFechas(p, fecha1, fecha2);
                } catch (Exception ex) {
                    Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                Double sa = 0.0;
                int x = 0;
                for (CuentaCorrienteProveedor cc1 : ccp1) {
                    if (x == 0) {
                        sa = cc1.getSaldo();
                        x = 1;
                    } else {
                        sa += cc1.getDebe() - cc1.getHaber();
                        cc1.setSaldo(sa);
                        try {
                            new CuentaCorrienteProveedorService().updateCtaCteProveedor(cc1);
                        } catch (Exception ex) {
                            Logger.getLogger(IngresarPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
            buscar();
        } else {
            JOptionPane.showMessageDialog(this, "No se eliminará el documento");
        }
    }

    private void enviar() {
        int row = tablaIvaCompras.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un comprobante para enviar al libro IVA");
            return;
        }
        ComprobanteCompras cc = ivaComprasLista.get(row);
        if (cc.getEnLibro()) {
            JOptionPane.showMessageDialog(this, "El comprobante ya esta en libro Iva");
            return;
        }
        String letra = cc.getLetra();
//        System.out.println("X" + letra + "X");
        if (letra.equals("A")) {
            IvaCompras ic = new IvaCompras();
            ic.setTotal(cc.getTotal());
            ic.setGravado(cc.getGravado());
            ic.setIva(cc.getIva());
            ic.setComprobante(cc);
            ic.setCredito(!cc.getEsDebito());
            ic.setFechaFactura(cc.getFechaFactura());
            ic.setFechaPeriodo(cc.getFechaPeriodo());
            ic.setLetra(cc.getLetra());
            ic.setNoGravado(cc.getNoGravado());
            ic.setNumeroFactura(cc.getNumeroFactura());
            ic.setNumeroSucursal(cc.getNumeroSucursal());
            ic.setOtro(cc.getOtro());
            ic.setPercepcionIiBb(cc.getPercepcionIiBb());
            ic.setPercepcionIva(cc.getPercepcionIva());
            ic.setProveedor(cc.getProveedor());
            ic.setImpuestoInterno(cc.getImpuestoInterno());
            try {
                new IvaComprasServices().saveIvaCompras(ic);
            } catch (Exception ex) {
                Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            cc.setEnLibro(true);
            try {
                new ComprobanteComprasService().updateComprobante(cc);
                JOptionPane.showMessageDialog(this, "El comprobante se grabo correctamente en libro Iva");
            } catch (Exception ex) {
                Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            if (letra.equals("C")) {
                IvaCompras ic = new IvaCompras();
                ic.setTotal(cc.getTotal());
                ic.setGravado(cc.getGravado());
                ic.setIva(cc.getIva());
                ic.setComprobante(cc);
                ic.setCredito(!cc.getEsDebito());
                ic.setFechaFactura(cc.getFechaFactura());
                ic.setFechaPeriodo(cc.getFechaPeriodo());
                ic.setLetra(cc.getLetra());
                ic.setNoGravado(cc.getNoGravado());
                ic.setNumeroFactura(cc.getNumeroFactura());
                ic.setNumeroSucursal(cc.getNumeroSucursal());
                ic.setOtro(cc.getOtro());
                ic.setPercepcionIiBb(cc.getPercepcionIiBb());
                ic.setPercepcionIva(cc.getPercepcionIva());
                ic.setProveedor(cc.getProveedor());
                ic.setImpuestoInterno(cc.getImpuestoInterno());
                try {
                    new IvaComprasServices().saveIvaCompras(ic);
                } catch (Exception ex) {
                    Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                cc.setEnLibro(true);
                try {
                    new ComprobanteComprasService().updateComprobante(cc);
                    JOptionPane.showMessageDialog(this, "El comprobante se grabo correctamente en libro Iva");
                } catch (Exception ex) {
                    Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(this, "SOLO PUEDE COMPROBANTES A, C");
            }
        }
        buscar();
    }

    private void limpiarTabla() {
        DefaultTableModel tbl = (DefaultTableModel) tablaIvaCompras.getModel();
        int row = tbl.getRowCount();
        for (int i = 0; i < row; i++) {
            tbl.removeRow(0);
        }
        tablaIvaCompras.setModel(tbl);
        ivaComprasLista = null;
    }

    private void nuevo() {
        NuevoComprobanteComprasFrame niv = new NuevoComprobanteComprasFrame(null, null, 0);
        niv.setVisible(true);
        this.dispose();
    }

    private void convertir() {
        ivaCompra = null;
        selectRow = tablaIvaCompras.getSelectedRow();
        if (selectRow > -1) {
            ivaCompra = this.getIvaComprasSeleccionadoConvertir();
            if (ivaCompra != null) {
                row19 = selectRow;
                ConvertirComprobanteComprasFrame micf = new ConvertirComprobanteComprasFrame(ivaCompra, fd0, fa0, row19);
                micf.setVisible(true);
                this.dispose();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un Comprobante para CONVERTIR");
        }
    }

    private void verCpbte() {
        ivaCompra = null;
        selectRow = tablaIvaCompras.getSelectedRow();
        if (selectRow > -1) {
            ivaCompra = this.getIvaComprasSeleccionadoParaVer();
            if (ivaCompra != null) {
                row19 = selectRow;
                VerComprobanteComprasFrame micf = new VerComprobanteComprasFrame(ivaCompra, fd0, fa0, row19);
                micf.setVisible(true);
                this.dispose();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un comprobante para visualizar");
        }
    }

    private void cambiarFechaPeriodo() {
        int row = tablaIvaCompras.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una factura para modificar");
            return;
        }
        int row2 = comboP.getSelectedIndex();
        if (row2 < 1) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un período para modificar la factura");
            return;
        }
        ComprobanteCompras comprobante = ivaComprasLista.get(row);
        Periodo periodo = periodos.get(row2 - 1);
        Date fp1 = periodo.getDesdeFecha();
        Date fp2 = comprobante.getFechaPeriodo();
        if (fp1.equals(fp2)) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un período diferente modificar la factura");
            return;
        }
        int a = JOptionPane.showConfirmDialog(this, "CONFIRMA MODIFICAR PERIODO?", "Atención", JOptionPane.YES_NO_OPTION);
        if (a == 0) {
            comprobante.setFechaPeriodo(fp1);
            try {
                comprobante = new ComprobanteComprasService().updateComprobante(comprobante);
            } catch (Exception ex) {
                Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "ERROR NRO. 948");
                return;
            }
            llenarTabla();
            if (comprobante.getEnLibro()) {
                IvaCompras ivaCompras = null;
                try {
                    ivaCompras = new IvaComprasServices().getIvaComprasByComprobanteCompras(comprobante);
                } catch (Exception ex) {
                    Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR NRO. 958");
                    return;
                }
                ivaCompras.setFechaPeriodo(fp1);
                try {
                    ivaCompras = new IvaComprasServices().updateIvaCompras(ivaCompras);
                } catch (Exception ex) {
                    Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "ERROR NRO. 965");
                    return;
                }
                JOptionPane.showMessageDialog(this, "COMPROBANTES ACTUALIZADOS");
            }
        }
    }

    private void cargarPeriodos() {
        periodos = null;
        comboP.removeAllItems();
        comboP.addItem("");
        try {
            periodos = new PeriodoService().getAllPeriodosAbiertos();
        } catch (Exception ex) {
            Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (periodos != null && !periodos.isEmpty()) {
            for (Periodo p : periodos) {
                comboP.addItem(p.getDetalle());
            }
        }
    }

    private void llenarTabla() {
        limpiarTabla();
        Date dde = new Date();
        Date hta = new Date();
        try {
            dde = sdf.parse(desdeFechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            hta = sdf.parse(hastaFechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        fd0 = dde;
        fa0 = hta;
        DefaultTableModel defaultTableModel = (DefaultTableModel) tablaIvaCompras.getModel();
        try {
            ivaComprasLista = new ComprobanteComprasService().getComprobantesEntreFechas(dde, hta);
        } catch (Exception ex) {
            Logger.getLogger(AbmComprobantesCompraFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (ivaComprasLista != null && !ivaComprasLista.isEmpty()) {
            for (ComprobanteCompras ic : ivaComprasLista) {
                Object[] fila = new Object[8];
                String let = ic.getLetra() + " ";
                String suc = "0000" + ic.getNumeroSucursal().toString();
                int ls = suc.length();
                String num = "00000000" + ic.getNumeroFactura().toString();
                int ln = num.length();
                fila[0] = sdf.format(ic.getFechaFactura());
                fila[1] = sdf.format(ic.getFechaPeriodo());
                if (ic.getFechaEntrega() != null) {
                    fila[2] = sdf.format(ic.getFechaEntrega());
                } else {
                    fila[2] = " ";
                }
                fila[3] = ic.getTipoComprobante();
                fila[4] = let + suc.substring(ls - 4, ls) + "-" + num.substring(ln - 8, ln);
                fila[5] = ic.getProveedor().getRazonSocial();
                if (ic.getEsDebito()) {
                    fila[6] = df.format(ic.getTotal());
                } else {
                    fila[6] = df.format(-ic.getTotal());
                }
                if (ic.getEnLibro() != null) {
                    if (ic.getEnLibro()) {
                        fila[7] = "En Libro";
                    } else {
                        fila[7] = "NO";
                    }
                } else {
                    fila[7] = "NO";
                }
                defaultTableModel.addRow(fila);
            }
            tablaIvaCompras.setModel(defaultTableModel);
        }
    }
}
