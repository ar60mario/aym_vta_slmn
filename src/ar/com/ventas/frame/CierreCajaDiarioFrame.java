/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Activity;
import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.Configuracion;
import ar.com.ventas.entities.Customer;
import ar.com.ventas.entities.Dia;
import ar.com.ventas.entities.IvaVentas;
import ar.com.ventas.entities.Payment;
import ar.com.ventas.entities.Recibo;
import ar.com.ventas.entities.ReciboProveedor;
import ar.com.ventas.entities.Routines;
import ar.com.ventas.entities.Stores;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ActivityService;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.ConfiguracionService;
import ar.com.ventas.services.CustomerService;
import ar.com.ventas.services.IvaVentasService;
import ar.com.ventas.services.PaymentService;
import ar.com.ventas.services.ReciboProveedorService;
import ar.com.ventas.services.ReciboService;
import ar.com.ventas.services.RoutinesService;
import ar.com.ventas.services.StoreService;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mario
 */
public class CierreCajaDiarioFrame extends javax.swing.JFrame {

    private Date fecha;
    private Date fechaA;
    private final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private final DecimalFormat df = new DecimalFormat("#0.00");
    private Stores caja = null;
    private Double subTotalIngresos;
    private Double subtotalEgresos;
    private Double totalFacturado;
    private Double totalFacOf;
    private Double deudoresAnteriorOf;
    private Double deudoresAnteriorCf;
    private Double deudoresHoyCf;
    private Double deudoresHoyOf;
    private Double saldoCli;
    private Double saldoCliente;
    private Double saldoCli2;
    private Double saldoCliente2;
    private Double inicial;
    private Double efectivo;
    private Double vales;
    private Double diferencia;
    private Double totalRc = 0.0;
    private Double totalPy = 0.0;
    private Double tpp = 0.0;
    private Integer opcion = 0;
    private Double saldosInactivosAnteriorCF = 0.0;
    private Double saldosInactivosAnteriorOF = 0.0;
    private Double saldosInactivosHoyCF = 0.0;
    private Double saldosInactivosHoyOF = 0.0;
    

    /**
     * Creates new form CierreCajaDiarioFrame
     *
     * @param opcion
     */
    public CierreCajaDiarioFrame(Integer opcion) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        this.setLocationRelativeTo(null);
        this.opcion = opcion;
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        saldoDeudCfTxt = new javax.swing.JTextField();
        subtotalIngresosTxt = new javax.swing.JTextField();
        guardarBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        fechaTxt = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        cerradoCbx = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cajaInicialTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        deudoresHoyTxt = new javax.swing.JTextField();
        depositosEfectivoTxt = new javax.swing.JTextField();
        valesTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        subtotalEgresosTxt = new javax.swing.JTextField();
        diferenciaTxt = new javax.swing.JTextField();
        totalFacturadoTxt = new javax.swing.JTextField();
        volverBtn = new javax.swing.JButton();
        calcularBtn = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        totalFactOfTxt = new javax.swing.JTextField();
        fechaAnteriorTxt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        saldoDeuOfAnteriorTxt = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        deudoresOfHoyTxt = new javax.swing.JTextField();
        salirBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        totalFacturadoSumadoTxt = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        totalDeudoresSumadoTxt = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        totalDeudoresHoyTxt = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        totalPagoProveedoresTxt = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        totalRecibosCobranzaTxt = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        diferenciaDeudoresTxt = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        saldosInactivosAnteriorCfTxt = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        saldosInactivosHoyCfTxt = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        saldosInactivosAnteriorOfTxt = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        saldosInactivosHoyOfTxt = new javax.swing.JTextField();
        devolucionesTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("CIERRE DE CAJA DIARIO");

        jLabel2.setText("Dep√≥sitos Efectivo:");

        jLabel3.setText("Vales:");

        saldoDeudCfTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        saldoDeudCfTxt.setText("SALDO DEUDORES");

        subtotalIngresosTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        subtotalIngresosTxt.setText("SUBTOTAL");

        guardarBtn.setText("Guardar");
        guardarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("/--------------fecha-------------\\");

            fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
            fechaTxt.setText("FECHA");

            buscarBtn.setText("Buscar");
            buscarBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    buscarBtnActionPerformed(evt);
                }
            });

            cerradoCbx.setText("Cerrado");

            jLabel5.setText("Subtotal:");

            jLabel6.setText("Saldo Deud CF anterior:");

            jLabel7.setText("Total Facturado CF:");

            jLabel8.setText("Subtotal:");

            jLabel9.setText("Caja inicial:");

            cajaInicialTxt.setBackground(new java.awt.Color(255, 204, 255));
            cajaInicialTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            cajaInicialTxt.setText("CAJA INICIAL");

            jLabel10.setText("Deudores CF hoy:");

            deudoresHoyTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            deudoresHoyTxt.setText("DEUDORES CF HOY");

            depositosEfectivoTxt.setBackground(new java.awt.Color(255, 204, 255));
            depositosEfectivoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            depositosEfectivoTxt.setText("DEPOSITOS");

            valesTxt.setBackground(new java.awt.Color(255, 204, 255));
            valesTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            valesTxt.setText("VALES");

            jLabel11.setText("Diferencia:");

            subtotalEgresosTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            subtotalEgresosTxt.setText("SUBTOTAL");

            diferenciaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            diferenciaTxt.setText("DIFERENCIA");

            totalFacturadoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            totalFacturadoTxt.setText("TOTAL FACTURADO");

            volverBtn.setText("Volver");
            volverBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    volverBtnActionPerformed(evt);
                }
            });

            calcularBtn.setText("Calcular");
            calcularBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    calcularBtnActionPerformed(evt);
                }
            });

            jLabel12.setText("/-------Fecha anterior---------\\");

                jLabel13.setText("Total Facturado OF:");

                totalFactOfTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                totalFactOfTxt.setText("FACTURADO OF");

                fechaAnteriorTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
                fechaAnteriorTxt.setText("FECHA ANT");

                jLabel14.setText("Saldo Deud OF anterior:");

                saldoDeuOfAnteriorTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                saldoDeuOfAnteriorTxt.setText("SALDO DEU OF");

                jLabel15.setText("Deudores OF hoy:");

                deudoresOfHoyTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                deudoresOfHoyTxt.setText("DEUDORES OF HOY");

                salirBtn.setText("Salir");
                salirBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        salirBtnActionPerformed(evt);
                    }
                });

                jLabel1.setText("Total facturado Sumado:");

                totalFacturadoSumadoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                totalFacturadoSumadoTxt.setText("TOTAL FC SUMA");

                jLabel16.setText("Total Deudores Sumado:");

                totalDeudoresSumadoTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                totalDeudoresSumadoTxt.setText("SUMA DEUDORES ANTES");

                jLabel17.setText("Total Deudores Hoy:");

                totalDeudoresHoyTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                totalDeudoresHoyTxt.setText("TOTAL DEU HOY");

                jLabel18.setText("Total Pago Proveedores:");

                totalPagoProveedoresTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                totalPagoProveedoresTxt.setText("PAGO PROVEEDORES");

                jLabel19.setText("Total Recibos Cobranza:");

                totalRecibosCobranzaTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                totalRecibosCobranzaTxt.setText("TOTAL RECIBOS");

                jLabel20.setText("Diferencia Deudores:");

                diferenciaDeudoresTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                diferenciaDeudoresTxt.setText("DIF DEUDORES");

                jLabel21.setText("Saldos Inactivo Anterior CF:");

                saldosInactivosAnteriorCfTxt.setBackground(new java.awt.Color(153, 255, 153));
                saldosInactivosAnteriorCfTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                saldosInactivosAnteriorCfTxt.setText("SALD_INAC_ANTER_CF");

                jLabel22.setText("Saldos Inactivos Hoy CF:");

                saldosInactivosHoyCfTxt.setBackground(new java.awt.Color(153, 255, 153));
                saldosInactivosHoyCfTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                saldosInactivosHoyCfTxt.setText("SALD_INAC_HOY_CF");

                jLabel23.setText("Saldos Inactivo Anterior OF:");

                saldosInactivosAnteriorOfTxt.setBackground(new java.awt.Color(153, 255, 255));
                saldosInactivosAnteriorOfTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                saldosInactivosAnteriorOfTxt.setText("SALD_INAC_ANTER_OF");

                jLabel24.setText("Saldos Inactivos Hoy OF:");

                saldosInactivosHoyOfTxt.setBackground(new java.awt.Color(153, 255, 255));
                saldosInactivosHoyOfTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                saldosInactivosHoyOfTxt.setText("SALD_INAC_HOY_OF");

                devolucionesTxt.setBackground(new java.awt.Color(255, 255, 102));
                devolucionesTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                devolucionesTxt.setText("DEVOLUCIONES");

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel11))
                                        .addGap(73, 73, 73)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(subtotalEgresosTxt)
                                            .addComponent(diferenciaTxt)
                                            .addComponent(valesTxt)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel15)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel21)
                                            .addComponent(jLabel22)
                                            .addComponent(jLabel24))
                                        .addGap(41, 41, 41)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(depositosEfectivoTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(deudoresOfHoyTxt)
                                            .addComponent(cajaInicialTxt)
                                            .addComponent(deudoresHoyTxt)
                                            .addComponent(saldosInactivosHoyCfTxt)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(saldosInactivosAnteriorCfTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(subtotalIngresosTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                                    .addComponent(saldoDeuOfAnteriorTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                                    .addComponent(saldoDeudCfTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                                    .addComponent(totalFactOfTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                                    .addComponent(totalFacturadoTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                                    .addComponent(saldosInactivosAnteriorOfTxt))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(saldosInactivosHoyOfTxt))))
                                .addGap(63, 63, 63)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel17)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel20)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(devolucionesTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(totalDeudoresHoyTxt)
                                            .addComponent(totalDeudoresSumadoTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(totalFacturadoSumadoTxt)
                                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(totalPagoProveedoresTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(totalRecibosCobranzaTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(diferenciaDeudoresTxt))
                                        .addGap(36, 36, 36)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12)
                                            .addComponent(fechaAnteriorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4)
                                            .addComponent(calcularBtn)
                                            .addComponent(guardarBtn)
                                            .addComponent(buscarBtn)
                                            .addComponent(cerradoCbx)
                                            .addComponent(volverBtn)
                                            .addComponent(salirBtn))))
                                .addGap(22, 22, 22))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                );
                layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(totalFacturadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(totalFactOfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalFacturadoSumadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(saldoDeudCfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(saldoDeuOfAnteriorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fechaAnteriorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalDeudoresSumadoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(saldosInactivosAnteriorCfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(saldosInactivosAnteriorOfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(subtotalIngresosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(calcularBtn)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(guardarBtn)
                            .addComponent(totalPagoProveedoresTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(cajaInicialTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buscarBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(deudoresHoyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deudoresOfHoyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel15)
                                .addComponent(totalDeudoresHoyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cerradoCbx)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(saldosInactivosHoyCfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(saldosInactivosHoyOfTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(devolucionesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(depositosEfectivoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(jLabel19)))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(valesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(volverBtn)
                            .addComponent(totalRecibosCobranzaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(subtotalEgresosTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(diferenciaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(salirBtn)
                            .addComponent(diferenciaDeudoresTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

                pack();
            }// </editor-fold>//GEN-END:initComponents

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        buscarFecha();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void guardarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBtnActionPerformed
        int escape = JOptionPane.showConfirmDialog(null, "CONFIRMA CIERRE DE CAJA?\n"
                + "RECUERDE QUE REALIZARA UN BACKUP PRIMERO",
                "CIERRE DE CAJA",
                JOptionPane.YES_NO_OPTION);
        if (escape == 0) {
            backup();
            guardarCaja();
        }
    }//GEN-LAST:event_guardarBtnActionPerformed

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void calcularBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularBtnActionPerformed
        calcular(0);
    }//GEN-LAST:event_calcularBtnActionPerformed

    private void salirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBtnActionPerformed
        salir();
    }//GEN-LAST:event_salirBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CierreCajaDiarioFrame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarBtn;
    private javax.swing.JTextField cajaInicialTxt;
    private javax.swing.JButton calcularBtn;
    private javax.swing.JCheckBox cerradoCbx;
    private javax.swing.JTextField depositosEfectivoTxt;
    private javax.swing.JTextField deudoresHoyTxt;
    private javax.swing.JTextField deudoresOfHoyTxt;
    private javax.swing.JTextField devolucionesTxt;
    private javax.swing.JTextField diferenciaDeudoresTxt;
    private javax.swing.JTextField diferenciaTxt;
    private javax.swing.JTextField fechaAnteriorTxt;
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JButton guardarBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField saldoDeuOfAnteriorTxt;
    private javax.swing.JTextField saldoDeudCfTxt;
    private javax.swing.JTextField saldosInactivosAnteriorCfTxt;
    private javax.swing.JTextField saldosInactivosAnteriorOfTxt;
    private javax.swing.JTextField saldosInactivosHoyCfTxt;
    private javax.swing.JTextField saldosInactivosHoyOfTxt;
    private javax.swing.JButton salirBtn;
    private javax.swing.JTextField subtotalEgresosTxt;
    private javax.swing.JTextField subtotalIngresosTxt;
    private javax.swing.JTextField totalDeudoresHoyTxt;
    private javax.swing.JTextField totalDeudoresSumadoTxt;
    private javax.swing.JTextField totalFactOfTxt;
    private javax.swing.JTextField totalFacturadoSumadoTxt;
    private javax.swing.JTextField totalFacturadoTxt;
    private javax.swing.JTextField totalPagoProveedoresTxt;
    private javax.swing.JTextField totalRecibosCobranzaTxt;
    private javax.swing.JTextField valesTxt;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void limpiarCampos() {
        fecha = new Date();
        fechaA = new Date();
        Routines conf = null;
        try {
            conf = new RoutinesService().getFacturas(1L);
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (conf.getUltimaFechaSistema() != null) {
            fecha = conf.getUltimaFechaSistema();
            if (conf.getUltimaFechaCierre() != null) {
                fechaA = conf.getUltimaFechaCierre();
            }
        }
//        System.out.println(fechaA);
//        JOptionPane.showMessageDialog(this, df);
        totalFacturadoTxt.setText("");
        devolucionesTxt.setText("");
        totalFactOfTxt.setText("");
        saldoDeudCfTxt.setText("");
        deudoresHoyTxt.setText("");
        subtotalIngresosTxt.setText("");
        subtotalEgresosTxt.setText("");
        cajaInicialTxt.setText("0.00");
        depositosEfectivoTxt.setText("0.00");
        valesTxt.setText("0.00");
        diferenciaTxt.setText("");
        fechaTxt.setText(sdf.format(fecha));
        fechaAnteriorTxt.setText(sdf.format(fechaA));
        saldoDeuOfAnteriorTxt.setText("");
        deudoresOfHoyTxt.setText("");
        totalFacturadoTxt.setEditable(false);
        devolucionesTxt.setEditable(false);
        totalFactOfTxt.setEditable(false);
        saldoDeuOfAnteriorTxt.setEditable(false);
        saldoDeudCfTxt.setEditable(false);
        subtotalIngresosTxt.setEditable(false);
        subtotalEgresosTxt.setEditable(false);
        deudoresHoyTxt.setEditable(false);
        deudoresOfHoyTxt.setEditable(false);
        diferenciaTxt.setEditable(false);
        fechaAnteriorTxt.setEditable(false);
        totalFacturadoSumadoTxt.setEditable(false);
        totalDeudoresSumadoTxt.setEditable(false);
        totalPagoProveedoresTxt.setEditable(false);
        totalDeudoresHoyTxt.setEditable(false);
        totalRecibosCobranzaTxt.setEditable(false);
        diferenciaDeudoresTxt.setEditable(false);
        jLabel18.setVisible(false);
        totalPagoProveedoresTxt.setVisible(false);
        jLabel20.setVisible(false);
        diferenciaDeudoresTxt.setVisible(false);
        saldosInactivosAnteriorCfTxt.setText("");
        saldosInactivosHoyCfTxt.setText("");
        if (opcion == 1) {
            calcular(opcion);
            buscarBtn.setVisible(true);
            volverBtn.setVisible(true);
            salirBtn.setVisible(false);
        } else {
            buscarBtn.setVisible(false);
            volverBtn.setVisible(false);
            salirBtn.setVisible(true);
        }
    }

    private void buscarFecha() {
        fecha = null;
        try {
            fecha = sdf.parse(fechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Fecha err√≥nea");
            fechaTxt.requestFocus();
        }
        if (fecha != null) {
            caja = null;
            try {
                caja = new StoreService().getMovimientoCajaByFecha(fecha);
            } catch (Exception ex) {
                Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (caja != null) {
                fechaA = caja.getFechaAnterior();
                totalFacturado = caja.getTotalFacturadoCf();
                totalFacOf = caja.getTotalFacturadoOf();
                if (caja.getSaldoDeudorAnteriorCf() != null) {
                    deudoresAnteriorCf = caja.getSaldoDeudorAnteriorCf();
                } else {
                    deudoresAnteriorCf = 0.00;
                }
                if (caja.getSaldoDeudorAnteriorOf() != null) {
                    deudoresAnteriorOf = caja.getSaldoDeudorAnteriorOf();
                } else {
                    deudoresAnteriorOf = 0.00;
                }
                subTotalIngresos = caja.getSubtotalArriba();
                inicial = caja.getCajaInicial();
                deudoresHoyCf = caja.getTotalDeudoresHoyCf();
                deudoresHoyOf = caja.getTotalDeudoresHoyOf();
                efectivo = caja.getTotalDeposito();
                vales = caja.getTotalVales();
                subtotalEgresos = caja.getSubtotalAbajo();
                diferencia = caja.getDiferencia();
                fechaAnteriorTxt.setText(sdf.format(fechaA));
                totalFacturadoTxt.setText(df.format(totalFacturado));
                totalFactOfTxt.setText(df.format(totalFacOf));
                saldoDeudCfTxt.setText(df.format(deudoresAnteriorCf));
                saldoDeuOfAnteriorTxt.setText(df.format(deudoresAnteriorOf));
                subtotalIngresosTxt.setText(df.format(subTotalIngresos));
                cajaInicialTxt.setText(df.format(inicial));
                deudoresHoyTxt.setText(df.format(deudoresHoyCf));
                deudoresOfHoyTxt.setText(df.format(deudoresHoyOf));
                depositosEfectivoTxt.setText(df.format(efectivo));
                valesTxt.setText(df.format(vales));
                subtotalEgresosTxt.setText(df.format(subtotalEgresos));
                diferenciaTxt.setText(df.format(diferencia));
                if (caja.getCerrado()) {
                    cerradoCbx.setSelected(true);
                    cajaInicialTxt.setEditable(false);
                    depositosEfectivoTxt.setEditable(false);
                    valesTxt.setEditable(false);
                } else {
                    cerradoCbx.setSelected(false);
                }
                if(caja.getSaldosInactivosAnteriorCf() != null){
                    saldosInactivosAnteriorCfTxt.setText(df.format(caja.getSaldosInactivosAnteriorCf()));
                }else{
                    saldosInactivosAnteriorCfTxt.setText(df.format(0.0));
                }
                if(caja.getSaldosInactivosAnteriorOf() != null){
                    saldosInactivosAnteriorOfTxt.setText(df.format(caja.getSaldosInactivosAnteriorOf()));
                }else{
                    saldosInactivosAnteriorOfTxt.setText(df.format(0.0));
                }
                if(caja.getSaldosInactivosHoyCf() != null){
                    saldosInactivosHoyCfTxt.setText(df.format(caja.getSaldosInactivosHoyCf()));
                }else{
                    saldosInactivosHoyCfTxt.setText(df.format(0.0));
                }
                if(caja.getSaldosInactivosHoyOf() != null){
                    saldosInactivosHoyOfTxt.setText(df.format(caja.getSaldosInactivosHoyOf()));
                }else{
                    saldosInactivosHoyOfTxt.setText(df.format(0.0));
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se encuentran Movimientos en esa fecha");
                fechaTxt.requestFocus();
            }
        } else {
            JOptionPane.showMessageDialog(this, "La fecha no es v√°lida");
            fechaTxt.requestFocus();
        }
    }

    private void guardarCaja() {
        if (subTotalIngresos == null) {
            JOptionPane.showMessageDialog(this, "Debe calcular Primero");
            return;
        }
        caja = null;
        try {
            caja = new StoreService().getMovimientoCajaByFecha(fecha);
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (caja == null) {
            caja = new Stores();
            caja.setFecha(fecha);
            caja.setFechaAnterior(fechaA);
            caja.setTotalFacturadoCf(totalFacturado);
            caja.setTotalFacturadoOf(totalFacOf);
            caja.setSaldoDeudorAnteriorCf(deudoresAnteriorCf);
            caja.setSaldoDeudorAnteriorOf(deudoresAnteriorOf);
            caja.setSubtotalArriba(subTotalIngresos);
            caja.setCajaInicial(inicial);
            caja.setTotalDeudoresHoyCf(deudoresHoyCf);
            caja.setTotalDeudoresHoyOf(deudoresHoyOf);
            caja.setTotalDeposito(efectivo);
            caja.setTotalVales(vales);
            caja.setSubtotalAbajo(subtotalEgresos);
            caja.setDiferencia(diferencia);
            caja.setSaldosInactivosAnteriorCf(saldosInactivosAnteriorCF);
            caja.setSaldosInactivosAnteriorOf(saldosInactivosAnteriorOF);
            caja.setSaldosInactivosHoyCf(saldosInactivosHoyCF);
            caja.setSaldosInactivosHoyOf(saldosInactivosHoyOF);
            if (cerradoCbx.isSelected()) {
                caja.setCerrado(true);
            } else {
                caja.setCerrado(false);
            }
            caja.setCobranza(totalRc);
            caja.setPayments(totalPy);
            try {
                new StoreService().saveMovimientoCaja(caja);

            } catch (Exception ex) {
                Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            caja.setFecha(fecha);
            caja.setFechaAnterior(fechaA);
            caja.setTotalFacturadoCf(totalFacturado);
            caja.setTotalFacturadoOf(totalFacOf);
            caja.setSaldoDeudorAnteriorCf(deudoresAnteriorCf);
            caja.setSaldoDeudorAnteriorOf(deudoresAnteriorOf);
            caja.setSubtotalArriba(subTotalIngresos);
            caja.setCajaInicial(inicial);
            caja.setTotalDeudoresHoyCf(deudoresHoyCf);
            caja.setTotalDeudoresHoyOf(deudoresHoyOf);
            caja.setTotalDeposito(efectivo);
            caja.setTotalVales(vales);
            caja.setSubtotalAbajo(subtotalEgresos);
            caja.setSaldosInactivosAnteriorCf(saldosInactivosAnteriorCF);
            caja.setSaldosInactivosAnteriorOf(saldosInactivosAnteriorOF);
            caja.setDiferencia(diferencia);
            if (cerradoCbx.isSelected()) {
                caja.setCerrado(true);
            } else {
                caja.setCerrado(false);
            }
            caja.setCobranza(totalRc);
            caja.setPayments(totalPy);
            try {
                new StoreService().updateMovimientoCaja(caja);
            } catch (Exception ex) {
                Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        Routines conf = null;
        Configuracion confi = null;
        try {
            conf = new RoutinesService().getFacturas(1L);
            confi = new ConfiguracionService().getFacturas(1L);
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        conf.setUltimaFechaCierre(fecha);
        conf.setUltimaFechaSistema(fecha);
        confi.setUltimaFechaCierre(fecha);
        confi.setUltimaFechaSistema(fecha);
        try {
            new RoutinesService().updateRoutines(conf);
            new ConfiguracionService().updateConfiguracion(confi);
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        JOptionPane.showMessageDialog(this, "Movimiento Guardado correctamente");
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void calcular(Integer opc) {
        if (opc == 1) {
            Date dt = new Date();
            fechaTxt.setText(sdf.format(dt));
        }
        //totalRecibosCobranzaTxt.setText(df.format(totalRc + totalPy));
        totalRc = 0.0;
        totalPy = 0.0;
        subTotalIngresos = 0.0;
        subtotalEgresos = 0.0;
        saldosInactivosAnteriorCF = 0.0;
        saldosInactivosAnteriorOF = 0.0;
        saldosInactivosHoyCF = 0.0;
        saldosInactivosHoyOF = 0.0;
        
        try {
            fecha = sdf.parse(fechaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            fechaA = sdf.parse(fechaAnteriorTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Stores movim = null;
        try {
            movim = new StoreService().getMovimientoCajaByFecha(fechaA);
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (movim != null) {
            deudoresAnteriorCf = movim.getTotalDeudoresHoyCf();
            subTotalIngresos += deudoresAnteriorCf;
            deudoresAnteriorOf = movim.getTotalDeudoresHoyOf();
            subTotalIngresos += deudoresAnteriorOf;
            saldoDeudCfTxt.setText(String.valueOf(df.format(deudoresAnteriorCf)));
            saldoDeuOfAnteriorTxt.setText(String.valueOf(df.format(deudoresAnteriorOf)));
            if(movim.getSaldosInactivosHoyCf() != null){
                saldosInactivosAnteriorCfTxt.setText(df.format(movim.getSaldosInactivosHoyCf()));
                saldosInactivosAnteriorCF = movim.getSaldosInactivosHoyCf();
            }else{
                saldosInactivosAnteriorCfTxt.setText(df.format(0.0));
            }
            if(movim.getSaldosInactivosHoyOf() != null){
                saldosInactivosAnteriorOfTxt.setText(df.format(movim.getSaldosInactivosHoyOf()));
                saldosInactivosAnteriorOF = movim.getSaldosInactivosHoyOf();
            }else{
                saldosInactivosAnteriorOfTxt.setText(df.format(0.0));
            }
            
        } else {
            saldoDeudCfTxt.setText("SIN MOVIMIENTOS");
            saldoDeuOfAnteriorTxt.setText("SIN MOVIMIENTOS");
        }
        
        List<Activity> facturas = null;
        try {
            facturas = new ActivityService().getFcByFecha(fecha);
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        totalFacturado = 0.0;
        if (facturas != null && !facturas.isEmpty()) {
            for (Activity ac : facturas) {
                totalFacturado += ac.getTotal();
            }
            totalFacturadoTxt.setText(String.valueOf(df.format(totalFacturado)));
            subTotalIngresos += totalFacturado;
        } else {
            totalFacturadoTxt.setText("SIN MOVIM");
        }
        List<IvaVentas> fact = null;
        try {
            fact = new IvaVentasService().getFactByFecha(fecha);
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        totalFacOf = 0.0;
        if (fact != null && !fact.isEmpty()) {
            for (IvaVentas fc : fact) {
                totalFacOf += fc.getTotal();
            }
            totalFactOfTxt.setText(String.valueOf(df.format(totalFacOf)));
            subTotalIngresos += totalFacOf;
        } else {
            totalFactOfTxt.setText("SIN MOVIM");
        }
        
        deudoresHoyOf = 0.0;
        deudoresHoyCf = 0.0;
        saldosInactivosHoyCF = 0.0;
        saldosInactivosHoyOF = 0.0;
        
        List<Cliente> clie = null;
        List<Cliente> clie2 = null;
        List<Customer> clientes = null;
        List<Customer> clientes2 = null;
        saldoCli = 0.0;
        saldoCliente = 0.0;
        saldoCli2 = 0.0;
        saldoCliente2 = 0.0;
        
        inicial = 0.0;
        if (cajaInicialTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese un importe");
            cajaInicialTxt.requestFocus();
            return;
        }
        inicial = Double.valueOf(cajaInicialTxt.getText());
        try {
            clie = new ClienteService().getAllClienteConSaldo();
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (clie != null && !clie.isEmpty()) {
            for (Cliente cli : clie) {
                saldoCli += cli.getSaldo();
            }
            deudoresOfHoyTxt.setText(df.format(saldoCli));
            deudoresHoyOf = saldoCli;
        } else {
            deudoresOfHoyTxt.setText("SIN MOVIMIENTOS");
            deudoresHoyOf = 0.0;
        }
        
        try {
            clie2 = new ClienteService().getClientesConSaldoInactivos();
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (clie2 != null && !clie2.isEmpty()) {
            for (Cliente cli : clie2) {
                saldoCli2 += cli.getSaldo();
            }
            saldosInactivosHoyOfTxt.setText(df.format(saldoCli2));
            saldosInactivosHoyOF = saldoCli2;
        } else {
            saldosInactivosHoyOfTxt.setText(df.format(0.0));
            saldosInactivosHoyOF = 0.0;
        }
        
        try {
            clientes = new CustomerService().getAllCustomersConSaldo();
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (clientes != null && !clientes.isEmpty()) {
            for (Customer cu : clientes) {
                saldoCliente += cu.getSaldo();
            }
            deudoresHoyTxt.setText(df.format(saldoCliente));
            deudoresHoyCf = saldoCliente;
        } else {
            deudoresHoyTxt.setText("SIN MOVIMIENTOS");
            deudoresHoyCf = 0.0;
        }
        
        try {
            clientes2 = new CustomerService().getClientesConSaldoInactivos();
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (clientes2 != null && !clientes2.isEmpty()) {
            for (Customer cu : clientes2) {
                saldoCliente2 += cu.getSaldo();
            }
            saldosInactivosHoyCfTxt.setText(df.format(saldoCliente2));
            saldosInactivosHoyCF = saldoCliente2;
        } else {
            saldosInactivosHoyCfTxt.setText(df.format(0.0));
            saldosInactivosHoyCF = 0.0;
        }
        
        if (depositosEfectivoTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese un importe");
            depositosEfectivoTxt.requestFocus();
            return;
        }
        if (valesTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese un importe");
            valesTxt.requestFocus();
            return;
        }
        List<Recibo> recibosOF = null;
        List<Payment> recibosCF = null;
        try {
            recibosOF = new ReciboService().getRecibosByFecha(fecha);
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            recibosCF = new PaymentService().getPaymentByDia(fecha);
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (recibosOF != null && !recibosOF.isEmpty()) {
            for (Recibo r : recibosOF) {
                totalRc += r.getImporte();
            }
        }
        if (recibosCF != null && !recibosCF.isEmpty()) {
            for (Payment r : recibosCF) {
                totalPy += r.getImporte();
            }
        }
        List<ReciboProveedor> recibosP = null;
        try {
            recibosP = new ReciboProveedorService().getRecibosByFechas(fecha);
        } catch (Exception ex) {
            Logger.getLogger(CierreCajaDiarioFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (recibosP != null && !recibosP.isEmpty()) {
            for (ReciboProveedor rp : recibosP) {
                tpp += rp.getImporte();
            }
        }
        subTotalIngresos += saldosInactivosAnteriorCF + saldosInactivosAnteriorOF;
        subtotalIngresosTxt.setText(String.valueOf(df.format(subTotalIngresos)));
        totalRecibosCobranzaTxt.setText(df.format(totalRc + totalPy));
        totalPagoProveedoresTxt.setText(df.format(tpp));
        efectivo = Double.valueOf(depositosEfectivoTxt.getText());
        vales = Double.valueOf(valesTxt.getText());
        subtotalEgresos = efectivo + vales + saldoCli + saldoCliente + inicial + saldosInactivosHoyCF + saldosInactivosHoyOF;
        subtotalEgresosTxt.setText(String.valueOf(df.format(subtotalEgresos)));
        diferencia = subtotalEgresos - subTotalIngresos;
        diferenciaTxt.setText(String.valueOf(df.format(diferencia)));
        totalFacturadoSumadoTxt.setText(df.format(totalFacturado + totalFacOf));

        totalDeudoresSumadoTxt.setText(df.format(deudoresAnteriorCf 
                + deudoresAnteriorOf));
        totalDeudoresHoyTxt.setText(df.format(deudoresHoyCf + deudoresHoyOf));
        diferenciaDeudoresTxt.setText(df.format(deudoresHoyCf + deudoresHoyOf 
                - deudoresAnteriorCf - deudoresAnteriorOf));
    }

    private void salir() {
        System.exit(0);
    }

    private void backup() {
        List<Dia> dias = new ArrayList<>();
        for (Dia d : Dia.values()) {
            Dia dd = d;
            dias.add(d);
        }
        try {
            Process p1 = null;
            Process p2 = null;
//            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            Date date = new Date();
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(date);
//            calendar.add(Calendar.DAY_OF_WEEK,-3);
            int se = calendar.get(Calendar.DAY_OF_WEEK);
            String filepath1 = "\\Backup\\DATA0-VENTAS-(" + dias.get(se - 1).getDetalle() + ").sql";
            String filepath2 = "\\Backup\\DATA1-VENTAS-(" + dias.get(se - 1).getDetalle() + ").sql";
            String batchCommand1 = "";
            String batchCommand2 = "";
            batchCommand1 = "c:\\ventas\\mysqldump.exe" + " -h " + "servidor" + " --port " + "3306" + " -u " + "jos" + " --password=root ventas" + " -r " + "c:\\" + filepath1;
            batchCommand2 = "c:\\ventas\\mysqldump.exe" + " -h " + "servidor" + " --port " + "3306" + " -u " + "jos" + " --password=root sakila" + " -r " + "c:\\" + filepath2;
            Runtime runtime = Runtime.getRuntime();
            p1 = runtime.exec(batchCommand1);
            p2 = runtime.exec(batchCommand2);
            int processComplete = p1.waitFor();
            processComplete = p2.waitFor();
            System.out.println(processComplete);
            JOptionPane.showMessageDialog(this, "BACKUP REALIZADO");
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(this, ioe.getCause());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getCause());
        }
    }
}
