/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ReciboProveedor;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ReciboProveedorService;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class PagosFrame extends javax.swing.JFrame {

    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    private DecimalFormat dfn = new DecimalFormat("00000000");
    private DecimalFormat df = new DecimalFormat("#0.0");

    /**
     * Creates new form PagosFrame
     */
    public PagosFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        limpiarCampos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        desdeTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        hastaTxt = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        volverBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("PAGOS A PROVEEDORES");

        jLabel1.setText("Desde:");

        desdeTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        desdeTxt.setText("DESDE");
        desdeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                desdeTxtKeyPressed(evt);
            }
        });

        jLabel2.setText("Hasta:");

        hastaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hastaTxt.setText("HASTA");
        hastaTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                hastaTxtKeyPressed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Número", "Código", "Proveedor", "Importe"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(3).setPreferredWidth(200);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(desdeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(hastaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buscarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 263, Short.MAX_VALUE)
                        .addComponent(volverBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(desdeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(hastaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarBtn)
                    .addComponent(volverBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void desdeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_desdeTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            desde();
        }
    }//GEN-LAST:event_desdeTxtKeyPressed

    private void hastaTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_hastaTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            hasta();
        }
    }//GEN-LAST:event_hastaTxtKeyPressed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        buscar();
    }//GEN-LAST:event_buscarBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PagosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PagosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PagosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PagosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PagosFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarBtn;
    private javax.swing.JTextField desdeTxt;
    private javax.swing.JTextField hastaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void desde() {
        if (desdeTxt.getText().isEmpty()) {
            desdeTxt.setText(sdf.format(new Date()));
            desdeTxt.requestFocus();
        } else {
            int largo = desdeTxt.getText().length();
            if (largo == 2) {
                Calendar cal = Calendar.getInstance();
                int mes = cal.get(Calendar.MONTH) + 1;
                int anio = cal.get(Calendar.YEAR);
                String an = String.valueOf(anio);
                String f = "0" + String.valueOf(mes);
                if (f.length() > 2) {
                    f = f.substring(1, 3);
                }
                f = f + "/" + an;
                desdeTxt.setText(desdeTxt.getText() + "/" + f);
                hastaTxt.requestFocus();
            } else {
                if (largo == 5) {
                    Calendar cal = Calendar.getInstance();
                    int anio = cal.get(Calendar.YEAR);
                    String an = "/" + String.valueOf(anio);
                    desdeTxt.setText(desdeTxt.getText() + an);
                    hastaTxt.requestFocus();
                } else {
                    if (largo != 10) {
                        JOptionPane.showMessageDialog(this, "Error en fecha");
                        desdeTxt.setText("");
                        desdeTxt.requestFocus();
                    } else {
                        String veinte = desdeTxt.getText().substring(6, 8);
                        if (!veinte.equals("20")) {
                            JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                            desdeTxt.requestFocus();
                        } else {
                            hastaTxt.requestFocus();
                        }
                    }
                }
            }

        }
    }

    private void hasta() {
        if (hastaTxt.getText().isEmpty()) {
            hastaTxt.setText(sdf.format(new Date()));
            hastaTxt.requestFocus();
        } else {
            int largo = hastaTxt.getText().length();
            if (largo == 2) {
                Calendar cal = Calendar.getInstance();
                int mes = cal.get(Calendar.MONTH) + 1;
                int anio = cal.get(Calendar.YEAR);
                String an = String.valueOf(anio);
                String f = "0" + String.valueOf(mes);
                if (f.length() > 2) {
                    f = f.substring(1, 2);
                }
                f = f + "/" + an;
                hastaTxt.setText(hastaTxt.getText() + "/" + f);
                buscar();
            } else {
                if (largo == 5) {
                    Calendar cal = Calendar.getInstance();
                    int anio = cal.get(Calendar.YEAR);
                    String an = "/" + String.valueOf(anio);
                    hastaTxt.setText(hastaTxt.getText() + an);
                    buscar();
                } else {
                    if (largo != 10) {
                        JOptionPane.showMessageDialog(this, "Error en fecha");
                        hastaTxt.setText("");
//                          request focus mismo campo
                        hastaTxt.requestFocus();
                    } else {
                        String veinte = hastaTxt.getText().substring(6, 8);
                        if (!veinte.equals("20")) {
                            JOptionPane.showMessageDialog(this, "Error en AÑO");
//                              request focus mismo campo
                            hastaTxt.requestFocus();
                        } else {
                            buscar();
                        }
                    }
                }
            }
        }
    }

    private void buscar() {
        limpiarTabla();
        Date de = new Date();
        Date al = new Date();
        Double total = 0.0;
        try {
            de = sdf.parse(desdeTxt.getText());
            al = sdf.parse(hastaTxt.getText());
        } catch (ParseException ex) {
            Logger.getLogger(PagosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        List<ReciboProveedor> comprobantes = null;
        try {
            comprobantes = new ReciboProveedorService().getRecibosEntreFechas(de, al);
        } catch (Exception ex) {
            Logger.getLogger(VerFcAbonadasPorPeriodoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (comprobantes != null && !comprobantes.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (ReciboProveedor c : comprobantes) {
                Object ob[] = new Object[5];
                ob[0] = sdf.format(c.getFecha());
                String l = "RC";
                String n = dfn.format(c.getNumero());
                ob[1] = l + " " + n;
                ob[2] = c.getProveedor().getCodigo();
                ob[3] = c.getProveedor().getRazonSocial();
                ob[4] = df.format(c.getImporte());
                total += c.getImporte();
                tbl.addRow(ob);
            }
            Object ob[] = new Object[5];
            ob[2] = "TOTAL";
            ob[4] = df.format(total);
            tbl.addRow(ob);
            tabla.setModel(tbl);
        }
    }

    private void limpiarTabla() {
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        int rows = tbl.getRowCount();
        if (rows > 0) {
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
            tabla.setModel(tbl);
        }
    }

    private void limpiarCampos() {
        desdeTxt.setText("");
        hastaTxt.setText("");
    }
}
