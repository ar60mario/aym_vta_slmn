/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.ComprobanteCompras;
import ar.com.ventas.entities.CuentaCorrienteProveedor;
import ar.com.ventas.entities.Proveedor;
import ar.com.ventas.entities.RcCo;
import ar.com.ventas.entities.ReciboProveedor;
import ar.com.ventas.services.RcCoService;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class ComposicionPagoFrame extends javax.swing.JFrame {

    private final CuentaCorrienteProveedor ccp;
    private DecimalFormat dfs = new DecimalFormat("0000");
    private DecimalFormat dfn = new DecimalFormat("00000000");
    private DecimalFormat df = new DecimalFormat("#0.00");
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

    /**
     * Creates new form ComposicionPagoFrame
     *
     * @param ccp
     */
    public ComposicionPagoFrame(CuentaCorrienteProveedor ccp) {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        this.ccp = ccp;
        fechaTxt.setText("");
        cargarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        provTxt = new javax.swing.JTextField();
        nroFcTxt = new javax.swing.JTextField();
        totalFcTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        volverBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        fechaTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("COMPOSICION PAGO");

        jLabel1.setText("Proveedor:");

        jLabel2.setText("Comprobante:");

        jLabel3.setText("Importe Total:");

        provTxt.setText("PROVEEDOR");

        nroFcTxt.setText("NRO CBTE");

        totalFcTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalFcTxt.setText("TOTAL FC");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Nro. Docum.", "Importe Afectado", "Importe Total del Docum."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Fecha:");

        fechaTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        fechaTxt.setText("FECHA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nroFcTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalFcTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(provTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                                .addComponent(volverBtn)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(provTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(volverBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nroFcTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(totalFcTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(fechaTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ComposicionPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ComposicionPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ComposicionPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComposicionPagoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ComposicionPagoFrame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fechaTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nroFcTxt;
    private javax.swing.JTextField provTxt;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField totalFcTxt;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void cargarDatos() {
        Proveedor p = ccp.getProveedor();
        provTxt.setText(p.getRazonSocial());
        ComprobanteCompras c = ccp.getComprobante();
        ReciboProveedor rp = ccp.getReciboProveedor();
        Double totalAfectado = 0.0;
        Double totalComprobante = 0.0;
        if (c != null) {
            String letra = c.getLetra();
            String suc = dfs.format(c.getNumeroSucursal());
            String nro = dfn.format(c.getNumeroFactura());
            String comprob = letra + " " + suc + "-" + nro;
            nroFcTxt.setText(comprob);
            totalFcTxt.setText(df.format(c.getTotal()));
            fechaTxt.setText(sdf.format(c.getFechaFactura()));
            List<RcCo> rco = null;
            if (c.getEsDebito()) {
                try {
                    rco = new RcCoService().getRcCoByComprobante(c);
                } catch (Exception ex) {
                    Logger.getLogger(ComposicionPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    rco = new RcCoService().getRcCoByNotaCredito(c);
                } catch (Exception ex) {
                    Logger.getLogger(ComposicionPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (rco != null && !rco.isEmpty()) {
                limpiarTabla();
                DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
                for (RcCo rc : rco) {
                    Object ob[] = new Object[4];
                    if (rc.getReciboProveedor() != null) {
                        ob[0] = sdf.format(rc.getReciboProveedor().getFecha());
                        ob[1] = "RC " + dfn.format(rc.getReciboProveedor().getNumero());
                        Double dos = 0.0;
                        Double tres = 0.0;
                        if (rc.getImporteRc() != null) {
                            dos = rc.getImporteRc();
                        }
                        if (rc.getReciboProveedor().getImporte() != null) {
                            tres = rc.getReciboProveedor().getImporte();
                        }
                        if (dos < tres) {
                            ob[2] = df.format(dos);
                            totalAfectado += dos;
                            ob[3] = df.format(tres);
                            totalComprobante += tres;
                        } else {
                            ob[3] = df.format(dos);
                            totalComprobante += dos;
                            ob[2] = df.format(tres);
                            totalAfectado += tres;
                        }
                    } else {
                        if (c.getEsDebito()) {
                            if (rc.getNotaCredito() != null) {
                                ob[0] = sdf.format(rc.getNotaCredito().getFechaFactura());
                                ob[1] = "NC " + rc.getNotaCredito().getLetra() + " "
                                        + dfs.format(rc.getNotaCredito().getNumeroSucursal())
                                        + "-" + dfn.format(rc.getNotaCredito().getNumeroFactura());
                                if (rc.getImputadoNc() != null) {
                                    ob[2] = df.format(rc.getImputadoNc());
                                    totalAfectado += rc.getImputadoNc();
                                }
                                if (rc.getImporteNc() != null) {
                                    ob[3] = df.format(rc.getImporteNc());
                                    totalComprobante += rc.getImporteNc();
                                }
                            }
                        } else {
                            if (rc.getComprobanteCompras() != null) {
                                ob[0] = sdf.format(rc.getComprobanteCompras().getFechaFactura());
                                ob[1] = "FC " + rc.getComprobanteCompras().getLetra() + " "
                                        + dfs.format(rc.getComprobanteCompras().getNumeroSucursal())
                                        + "-" + dfn.format(rc.getComprobanteCompras().getNumeroFactura());
                                if (rc.getImputadoNc() != null) {
                                    ob[2] = df.format(rc.getImputadoNc());
                                    totalAfectado += rc.getImputadoNc();
                                }
                                if (rc.getComprobanteCompras().getTotal() != null) {
                                    ob[3] = df.format(rc.getComprobanteCompras().getTotal());
                                    totalComprobante += rc.getComprobanteCompras().getTotal();
                                }
                            }
                        }
                    }
                    tbl.addRow(ob);
                }
                Object ob[] = new Object[4];
                ob[0] = "";
                tbl.addRow(ob);
                ob[1] = "TOTAL:";
                ob[2] = df.format(totalAfectado);
                //ob[3] = df.format(totalComprobante);
                tbl.addRow(ob);
                tabla.setModel(tbl);
            }
        } else {
            String letra = "R";
            String suc = dfs.format(1);
            String nro = dfn.format(rp.getNumero());
            String comprob = letra + " " + suc + "-" + nro;
            nroFcTxt.setText(comprob);
            totalFcTxt.setText(df.format(rp.getImporte()));
            fechaTxt.setText(sdf.format(rp.getFecha()));
            List<RcCo> rco = null;
            if (rp != null) {
                try {
                    rco = new RcCoService().getRcCoByRecibo(rp);
                } catch (Exception ex) {
                    Logger.getLogger(ComposicionPagoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (rco != null && !rco.isEmpty()) {
                    limpiarTabla();
                    DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
                    for (RcCo rc : rco) {
                        Object ob[] = new Object[4];
                        ob[0] = sdf.format(rc.getComprobanteCompras().getFechaFactura());
                        String le = rc.getComprobanteCompras().getLetra();
                        String nusu = dfs.format(rc.getComprobanteCompras().getNumeroSucursal());
                        String nufa = dfn.format(rc.getComprobanteCompras().getNumeroFactura());
                        ob[1] = "FC " + le + " " + nusu + "-" + nufa;
                        if (rc.getImporteRc() != null) {
                            ob[3] = df.format(rc.getImporteRc());
                            totalAfectado += rc.getImporteRc();
                        }
                        if (rc.getImputadoFc() != null) {
                            ob[2] = df.format(rc.getImputadoFc());
                            totalComprobante += rc.getImputadoFc();
                        }
                        tbl.addRow(ob);
                    }
                    Object ob1[] = new Object[4];
                    ob1[0] = " ";
                    tbl.addRow(ob1);
                    ob1[1] = "TOTAL";
                    ob1[2] = df.format(totalComprobante);
                    tbl.addRow(ob1);
                    tabla.setModel(tbl);
                }
            }
        }
    }

    private void volver() {
        CuentaCorrienteProveedorFrame mf = new CuentaCorrienteProveedorFrame(ccp.getProveedor(),0);
        mf.setVisible(true);
        this.dispose();
    }

    private void limpiarTabla() {
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        int row = tbl.getRowCount();
        if (row > 0) {
            for (int i = 0; i < row; i++) {
                tbl.removeRow(0);
            }
        }
        tabla.setModel(tbl);
    }
}
