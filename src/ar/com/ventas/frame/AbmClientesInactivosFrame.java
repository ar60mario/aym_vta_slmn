/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Cliente;
import ar.com.ventas.entities.ClienteTraba;
import ar.com.ventas.entities.Customer;
import ar.com.ventas.entities.CustomerInactivo;
import ar.com.ventas.entities.CustomerTraba;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ClienteService;
import ar.com.ventas.services.ClienteTrabaService;
import ar.com.ventas.services.CustomerService;
import ar.com.ventas.services.CustomerTrabaService;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Supervisor
 */
public class AbmClientesInactivosFrame extends javax.swing.JFrame {

    private List<Customer> listadoCliente = null;
    private List<CustomerInactivo> ci = new ArrayList<CustomerInactivo>();
    private Integer row;

    /**
     * Creates new form AbmCliente
     * @param row
     */
    public AbmClientesInactivosFrame(Integer row) {
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        initComponents();
        this.row = row;
        llenarTabla();
        alfabeticoRb.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        volverBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        modificarBtn = new javax.swing.JButton();
        numericoRb = new javax.swing.JRadioButton();
        alfabeticoRb = new javax.swing.JRadioButton();
        nombreTxt = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        desbloquearBtn = new javax.swing.JButton();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CODIGO", "NOMBRE", "CUIT", "OF_activo", "CF_activo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaClientes);
        if (tablaClientes.getColumnModel().getColumnCount() > 0) {
            tablaClientes.getColumnModel().getColumn(0).setPreferredWidth(40);
            tablaClientes.getColumnModel().getColumn(1).setPreferredWidth(300);
            tablaClientes.getColumnModel().getColumn(2).setPreferredWidth(60);
        }

        modificarBtn.setText("Modificar");
        modificarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarBtnActionPerformed(evt);
            }
        });

        numericoRb.setText("Numérico");
        numericoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numericoRbActionPerformed(evt);
            }
        });

        alfabeticoRb.setText("Alfabético");
        alfabeticoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alfabeticoRbActionPerformed(evt);
            }
        });

        nombreTxt.setText("NOMBRE");
        nombreTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nombreTxtKeyPressed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        desbloquearBtn.setText("Desbloquear");
        desbloquearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desbloquearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(modificarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(desbloquearBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(volverBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(numericoRb)
                        .addGap(18, 18, 18)
                        .addComponent(alfabeticoRb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buscarBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numericoRb)
                    .addComponent(alfabeticoRb)
                    .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modificarBtn)
                    .addComponent(volverBtn)
                    .addComponent(desbloquearBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        AbmClienteFrame mainFrame = new AbmClienteFrame(null, null, null, null, null, null);
        mainFrame.setVisible(true);
        this.dispose();

    }//GEN-LAST:event_volverBtnActionPerformed

    private void modificarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarBtnActionPerformed
//        Customer cliente = this.getClienteSeleccionado();
//        String c = cliente.getCodigo();
//        ClienteTraba ct = null;
//        CustomerTraba cuTr = null;
//        try {
//            ct = new ClienteTrabaService().getClienteByCodigo(c);
//            cuTr = new CustomerTrabaService().getClienteByCodigo(c);
//        } catch (Exception ex) {
//            Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        if (ct.getTraba1() != null) {
//            if (ct.getTraba1()) {
//                JOptionPane.showMessageDialog(this, "Cliente bloqueado para Modificar.");
//                return;
//            }
//        }
//        if (cuTr.getTraba2() != null) {
//            if (cuTr.getTraba2()) {
//                JOptionPane.showMessageDialog(this, "Cliente bloqueado para Modificar.");
//                return;
//            }
//        }
//        if (cliente != null) {
//            int r = tablaClientes.getSelectedRow();
//            String co = listadoCliente.get(r).getCodigo();
//            Cliente se = null;
//            try {
//                se = new ClienteService().getClienteByCodigo(co);
//            } catch (Exception ex) {
//                Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            ModificarClienteFrame mcf = new ModificarClienteFrame(se, r);
//            mcf.setVisible(true);
//            this.dispose();
//        } else {
//            JOptionPane.showMessageDialog(this, "Debe seleccionar un Cliente de la lista.", "Atencion",
//                    JOptionPane.INFORMATION_MESSAGE);
//        }
    }//GEN-LAST:event_modificarBtnActionPerformed

    private void alfabeticoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alfabeticoRbActionPerformed
        if (numericoRb.isSelected()) {
            borrarTabla();
            alfabeticoRb.setSelected(true);
            numericoRb.setSelected(false);
            llenarTabla();
        } else {
            alfabeticoRb.setSelected(true);
        }
    }//GEN-LAST:event_alfabeticoRbActionPerformed

    private void numericoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numericoRbActionPerformed
        if (alfabeticoRb.isSelected()) {
            borrarTabla();
            numericoRb.setSelected(true);
            alfabeticoRb.setSelected(false);
            llenarTablaNumerico();
        } else {
            numericoRb.setSelected(true);
        }
    }//GEN-LAST:event_numericoRbActionPerformed

    private void nombreTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTxtKeyPressed
        if (evt.getKeyCode() == 10) {
            if (!nombreTxt.getText().isEmpty()) {
                buscarClientesByFiltro();
            }
        }
    }//GEN-LAST:event_nombreTxtKeyPressed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        if (!nombreTxt.getText().isEmpty()) {
            buscarClientesByFiltro();
        }
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void desbloquearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desbloquearBtnActionPerformed
        int row = tablaClientes.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente");
            return;
        }
        JOptionPane.showMessageDialog(this, "Verifique que salio de todos \nlos sistemas para desbloquear");
        Customer cli = listadoCliente.get(row);
        String c = cli.getCodigo();
        Cliente se = null;
        try {
            se = new ClienteService().getClienteByCodigo(c);
        } catch (Exception ex) {
            Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        ClienteTraba ct = null;
        CustomerTraba cuTr = null;
        try {
            ct = new ClienteTrabaService().getClienteByCodigo(c);
            cuTr = new CustomerTrabaService().getClienteByCodigo(c);
        } catch (Exception ex) {
            Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        int resp = JOptionPane.showConfirmDialog(null,
                "Esta seguro de desbloquear a: \n" + cli.getCodigo() + "?",
                "Atencion", JOptionPane.YES_NO_OPTION);
        if (resp == 0) {
            ct.setTraba1(false);
            cuTr.setTraba2(false);
            se.setImporteMostrador(0.00);
            try {
                new ClienteService().updateCliente(se);
                new ClienteTrabaService().updateCliente(ct);
                new CustomerTrabaService().updateCliente(cuTr);
                JOptionPane.showMessageDialog(this, "Cliente: \n" + se.getRazonSocial() + "\nDesbloqueado.");
            } catch (Exception ex) {
                Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_desbloquearBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AbmClientesInactivosFrame(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton alfabeticoRb;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JButton desbloquearBtn;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modificarBtn;
    private javax.swing.JTextField nombreTxt;
    private javax.swing.JRadioButton numericoRb;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JButton volverBtn;
    // End of variables declaration//GEN-END:variables

    private void llenarTabla() {
        nombreTxt.setText("");
        nombreTxt.requestFocus();
        DefaultTableModel tabla = (DefaultTableModel) tablaClientes.getModel();
        listadoCliente = null;
        try {
            CustomerService clienteService = new CustomerService();
            listadoCliente = clienteService.getAllCustomersInactivosOrdenado(); // Obtengo los Clientes de la DB.
        } catch (Exception ex) {
            // Logear error y mostrarlo
            JOptionPane.showInternalMessageDialog(null, "Error");
        }
        if (listadoCliente != null && !listadoCliente.isEmpty()) {
            for (Customer cli : listadoCliente) {
                Object ob[] = new Object[5];
                String co = cli.getCodigo();
                ob[0] = cli.getCodigo();
                Cliente cliente = null;
                try {
                    cliente = new ClienteService().getClienteByCodigo(co);
                } catch (Exception ex) {
                    Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                ob[1] = cliente.getRazonSocial();
                ob[2] = cliente.getCuit();
                if (cliente.getActivo() != null) {
                    if (cliente.getActivo()) {
                        ob[3] = "SI";
                    } else {
                        ob[3] = "NO";
                    }
                } else {
                    ob[3] = "SI";
                }
                if (cli.getActivo() != null) {
                    if (cli.getActivo()) {
                        ob[4] = "SI";
                    } else {
                        ob[4] = "NO";
                    }
                } else {
                    ob[4] = "SI";
                }
                tabla.addRow(ob);
            }
            tablaClientes.setModel(tabla);
        }
        if (row != null) {
            Rectangle rect = tablaClientes.getCellRect(row, 0, true);
            tablaClientes.scrollRectToVisible(rect);
            tablaClientes.clearSelection();
            tablaClientes.setRowSelectionInterval(row, row);
        }
    }

    private Customer getClienteSeleccionado() {
        Customer cliente = null;
        int filaSeleccionada = tablaClientes.getSelectedRow();
        if (filaSeleccionada != -1 && listadoCliente != null && !listadoCliente.isEmpty()) {
            cliente = listadoCliente.get(filaSeleccionada);
        } else {
//            logger.log(Level.WARNING, "No se selecciono ningun item de la lista");
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente de la lista.", "Atencion",
                    JOptionPane.INFORMATION_MESSAGE);
        }
        return cliente;
    }

    private void borrarTabla() {
        int rows = tablaClientes.getRowCount();
        DefaultTableModel tabla = (DefaultTableModel) tablaClientes.getModel();
        for (int n = 0; n < rows; n++) {
            tabla.removeRow(0);
            listadoCliente.remove(0);
        }
        tablaClientes.setModel(tabla);
    }

    private void llenarTablaNumerico() {
        listadoCliente = null;
        DefaultTableModel tabla = (DefaultTableModel) tablaClientes.getModel();
        try {
            listadoCliente = new CustomerService().getAllCustomersInactivosOrdenado();
        } catch (Exception ex) {
            Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (listadoCliente != null && !listadoCliente.isEmpty()) {
            for (Customer cli : listadoCliente) {
                Object ob[] = new Object[3];
                String co = cli.getCodigo();
                ob[0] = co;
                Cliente c = null;
                try {
                    c = new ClienteService().getClienteByCodigo(co);
                } catch (Exception ex) {
                    Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (c != null) {
                    ob[1] = c.getRazonSocial();
                    ob[2] = c.getCuit();
                }
                tabla.addRow(ob);
            }
            tablaClientes.setModel(tabla);
        }
    }

    private void buscarClientesByFiltro() {
        borrarTabla();
        String filtro = nombreTxt.getText();
        listadoCliente = null;
        try {
            listadoCliente = new CustomerService().getAllCustomersInactivosOrdenado();
        } catch (Exception ex) {
            Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (listadoCliente != null && !listadoCliente.isEmpty()) {
            ci = new ArrayList<CustomerInactivo>();
            for (Customer cu : listadoCliente) {
                CustomerInactivo cl = new CustomerInactivo();
                cl.setActivo(cu.getActivo());
                String codig0 = cu.getCodigo();
                cl.setCodigo(codig0);
                cl.setDescuento(cu.getDescuento());
                cl.setObservaciones(cu.getObservaciones());
                cl.setSaldo(cu.getSaldo());
                cl.setTieneDescuento(cu.getTieneDescuento());
                Cliente client = null;
                try {
                    client = new ClienteService().getClienteByCodigo(codig0);
                } catch (Exception ex) {
                    Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (client != null) {
                    cl.setRazonSocial(client.getRazonSocial());
                } else {
                    cl.setRazonSocial("");
                }
                ci.add(cl);
            }
            Collections.sort(ci);
            DefaultTableModel tabla = (DefaultTableModel) tablaClientes.getModel();
            for (CustomerInactivo cli : ci) {
                if (cli.getRazonSocial().indexOf(filtro) < 0) {
                    continue;
                }
                Object ob[] = new Object[3];
                String co = cli.getCodigo();
                Cliente c = null;
                try {
                    c = new ClienteService().getClienteByCodigo(co);
                } catch (Exception ex) {
                    Logger.getLogger(AbmClientesInactivosFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                ob[0] = co;
                ob[1] = cli.getRazonSocial();
                ob[2] = c.getCuit();
                tabla.addRow(ob);
            }
            tablaClientes.setModel(tabla);
        }
    }
}
