/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ar.com.ventas.frame;

import ar.com.ventas.entities.Producto;
import ar.com.ventas.entities.Rubro;
import ar.com.ventas.entities.SubRubro;
import ar.com.ventas.main.MainFrame;
import ar.com.ventas.services.ProductoService;
import ar.com.ventas.services.RubroService;
import ar.com.ventas.services.SubRubroService;
import java.io.File;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author Mario
 */
public class StockProductosActivosFrame extends javax.swing.JFrame {

    private List<Rubro> rubros;
    private List<SubRubro> subRubros;
    private List<Producto> productos;
    private DecimalFormat df = new DecimalFormat("#0");
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

    /**
     * Creates new form StockProductosActivosFrame
     */
    public StockProductosActivosFrame() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(245, 222, 179));
        prepararFrame();
        llenarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboRubro = new javax.swing.JComboBox<>();
        comboSubrubro = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        xCodigoRb = new javax.swing.JRadioButton();
        xDescripRb = new javax.swing.JRadioButton();
        volverBtn = new javax.swing.JButton();
        excelBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("STOCK PRODUCTOS ACTIVOS");

        comboRubro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        comboSubrubro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Rubro:");

        jLabel2.setText("Subrubro:");

        xCodigoRb.setText("X Código");
        xCodigoRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xCodigoRbActionPerformed(evt);
            }
        });

        xDescripRb.setText("X Descripción");
        xDescripRb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xDescripRbActionPerformed(evt);
            }
        });

        volverBtn.setText("Volver");
        volverBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverBtnActionPerformed(evt);
            }
        });

        excelBtn.setText("Excel");
        excelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excelBtnActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descripción", "Stock", "Mínimo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(1).setPreferredWidth(350);
        }

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboRubro, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboSubrubro, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(xCodigoRb)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(excelBtn)
                                .addGap(18, 18, 18)
                                .addComponent(volverBtn))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(xDescripRb)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboRubro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(xCodigoRb)
                    .addComponent(volverBtn)
                    .addComponent(excelBtn)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboSubrubro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xDescripRb))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void volverBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverBtnActionPerformed
        volver();
    }//GEN-LAST:event_volverBtnActionPerformed

    private void excelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excelBtnActionPerformed
        excel();
    }//GEN-LAST:event_excelBtnActionPerformed

    private void xCodigoRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xCodigoRbActionPerformed
        xCodigoRb.setSelected(true);
        xDescripRb.setSelected(false);
    }//GEN-LAST:event_xCodigoRbActionPerformed

    private void xDescripRbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xDescripRbActionPerformed
        xCodigoRb.setSelected(false);
        xDescripRb.setSelected(true);
    }//GEN-LAST:event_xDescripRbActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        buscar();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockProductosActivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockProductosActivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockProductosActivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockProductosActivosFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StockProductosActivosFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboRubro;
    private javax.swing.JComboBox<String> comboSubrubro;
    private javax.swing.JButton excelBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverBtn;
    private javax.swing.JRadioButton xCodigoRb;
    private javax.swing.JRadioButton xDescripRb;
    // End of variables declaration//GEN-END:variables

    private void prepararFrame() {
        xCodigoRb.setSelected(true);
        xDescripRb.setSelected(false);
        rubros = null;
        subRubros = null;
        comboRubro.removeAllItems();
        comboSubrubro.removeAllItems();
        comboRubro.addItem("TODOS");
        comboSubrubro.addItem("TODOS");
        try {
            rubros = new RubroService().getAllRubros();
            subRubros = new SubRubroService().getAllSubRubros();
        } catch (Exception ex) {
            Logger.getLogger(StockProductosActivosFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (rubros != null && !rubros.isEmpty()) {
            for (Rubro r : rubros) {
                comboRubro.addItem(r.getCodigo() + " " + r.getNombre());
            }
        }
        if (subRubros != null && !subRubros.isEmpty()) {
            for (SubRubro s : subRubros) {
                comboSubrubro.addItem(s.getCodigo() + " " + s.getDetalle());
            }
        }
    }

    private void llenarTabla() {
        productos = null;
        limpiarTabla();
        int ru = comboRubro.getSelectedIndex();
        int su = comboSubrubro.getSelectedIndex();
        if (xDescripRb.isSelected()) {
            if (ru == 0 && su == 0) {
                try {
                    productos = new ProductoService().getProductosActivosByNombre();
                } catch (Exception ex) {
                    Logger.getLogger(StockProductosActivosFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                if (ru == 0) {
                    SubRubro s = subRubros.get(su - 1);
                    try {
                        productos = new ProductoService().getAllProductosActivosBySubRubroByNombre(s);
                    } catch (Exception ex) {
                        Logger.getLogger(StockProductosActivosFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    if (su == 0) {
                        Rubro r = rubros.get(ru - 1);
                        try {
                            productos = new ProductoService().getAllProductosActivosByRubroByNombre(r);
                        } catch (Exception ex) {
                            Logger.getLogger(StockProductosActivosFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        SubRubro s = subRubros.get(su - 1);
                        Rubro r = rubros.get(ru - 1);
                        try {
                            productos = new ProductoService().getAllProductosActivosByRubroAndSubByNombre(r, s);
                        } catch (Exception ex) {
                            Logger.getLogger(StockProductosActivosFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        } else {
            if (ru == 0 && su == 0) {
                try {
                    productos = new ProductoService().getProductosActivosByCodigo();
                } catch (Exception ex) {
                    Logger.getLogger(StockProductosActivosFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                if (ru == 0) {
                    SubRubro s = subRubros.get(su - 1);
                    try {
                        productos = new ProductoService().getAllProductosActivosBySubRubroByCodigo(s);
                    } catch (Exception ex) {
                        Logger.getLogger(StockProductosActivosFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    if (su == 0) {
                        Rubro r = rubros.get(ru - 1);
                        try {
                            productos = new ProductoService().getAllProductosActivosByRubroByCodigo(r);
                        } catch (Exception ex) {
                            Logger.getLogger(StockProductosActivosFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        SubRubro s = subRubros.get(su - 1);
                        Rubro r = rubros.get(ru - 1);
                        try {
                            productos = new ProductoService().getAllProductosActivosByRubroAndSubRubroByCodigo(r, s);
                        } catch (Exception ex) {
                            Logger.getLogger(StockProductosActivosFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }
        if (productos != null && !productos.isEmpty()) {
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            for (Producto p : productos) {
                Object ob[] = new Object[4];
                ob[0] = p.getCodigo();
                ob[1] = p.getDetalle();
                if (p.getStock() != null) {
                    ob[2] = df.format(p.getStock());
                } else {
                    ob[2] = df.format(0);
                }
                if (p.getStockMinimo() != null) {
                    ob[3] = df.format(p.getStockMinimo());
                } else {
                    ob[3] = df.format(0);
                }
                tbl.addRow(ob);
            }
            tabla.setModel(tbl);
        }
    }

    private void volver() {
        MainFrame mf = new MainFrame();
        mf.setVisible(true);
        this.dispose();
    }

    private void excel() {
        int rows = tabla.getRowCount();
        if(rows < 0){
            JOptionPane.showMessageDialog(this, "LA TABLA ESTA VACIA");
            return;
        }
        String rutaArchivo = "c:/informes/stock.xls";
        File archivo = new File(rutaArchivo);
        if (archivo.exists()) {
            archivo.delete();
        }
        try {
            archivo.createNewFile();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        WritableWorkbook libro = null;
        try {
            libro = Workbook.createWorkbook(archivo);

        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        WritableSheet hoja1 = libro.createSheet("Comision", 0);
        try {
            hoja1.addCell(new jxl.write.Label(0, 0, "Distribuidora A&M - Stock Productos"));
            hoja1.addCell(new jxl.write.Label(0, 1, "Fecha: " + sdf.format(new Date())));
            hoja1.addCell(new jxl.write.Label(0, 2, "Código"));
            hoja1.addCell(new jxl.write.Label(1, 2, "Descripción"));
            hoja1.addCell(new jxl.write.Label(2, 2, "Stock"));
            hoja1.addCell(new jxl.write.Label(3, 2, "Mínimo"));
            DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
            int y = 3;
            
            for (int i = 0; i < rows - 3; i++) {
                hoja1.addCell(new jxl.write.Label(0, y, tbl.getValueAt(i, 0).toString()));
                hoja1.addCell(new jxl.write.Label(1, y, tbl.getValueAt(i, 1).toString()));
                Double importe = Double.valueOf(tbl.getValueAt(i, 2).toString().replaceAll(",", "."));
                String tmp = df.format(importe);
                importe = Double.valueOf(tmp.replaceAll(",", "."));
                hoja1.addCell(new jxl.write.Number(2,y,importe));
                importe = Double.valueOf(tbl.getValueAt(i, 3).toString().replaceAll(",", "."));
                tmp = df.format(importe);
                importe = Double.valueOf(tmp.replaceAll(",", "."));
                hoja1.addCell(new jxl.write.Number(3, y, importe));
                y += 1;
            }
        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error configurando Excel");
        }
        try {
            libro.write();
            libro.close();
        } catch (IOException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 528");

        } catch (WriteException ex) {
            Logger.getLogger(VerIvaVentasPorPeriodoFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error: 529");
        }
        JOptionPane.showMessageDialog(this, "Excel creado correctamente");
        JOptionPane.showMessageDialog(this, "Está en c:/informes/stock.xls");
    }

    private void limpiarTabla() {
        DefaultTableModel tbl = (DefaultTableModel) tabla.getModel();
        int rows = tbl.getRowCount();
        if (rows > 0) {
            for (int i = 0; i < rows; i++) {
                tbl.removeRow(0);
            }
        }
    }

    private void buscar() {
        llenarTabla();
    }
}
